export declare type canonical = string;
export declare type url = string;
export declare type uuid = string;
export declare type integer = number;
export declare type decimal = number;
export declare type uri = string;
export declare type base64Binary = string;
export declare type instant = string;
export declare type date = string;
export declare type dateTime = string;
export declare type time = string;
export declare type code = string;
export declare type oid = string;
export declare type id = string;
export declare type markdown = string;
export declare type unsignedInt = number;
export declare type positiveInt = number;
export declare type xhtml = string;
/**
 * A financial tool for tracking value accrued for a particular purpose.  In the healthcare field, used to track charges for a patient, cost centers, etc.
 */
export interface Account {
    /**
     * The type of the resource.
     */
    resourceType: string;
    /**
     * The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes.
     */
    id?: id;
    /**
     * Contains extension information for property 'id'.
     */
    _id?: Element;
    /**
     * The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource.
     */
    meta?: Meta;
    /**
     * A reference to a set of rules that were followed when the resource was constructed, and which must be understood when processing the content. Often, this is a reference to an implementation guide that defines the special rules along with other profiles etc.
     */
    implicitRules?: uri;
    /**
     * Contains extension information for property 'implicitRules'.
     */
    _implicitRules?: Element;
    /**
     * The base language in which the resource is written.
     */
    language?: code;
    /**
     * Contains extension information for property 'language'.
     */
    _language?: Element;
    /**
     * A human-readable narrative that contains a summary of the resource and can be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it "clinically safe" for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety.
     */
    text?: Narrative;
    /**
     * These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, and nor can they have their own independent transaction scope.
     */
    contained?: Resource[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * Unique identifier used to reference the account.  Might or might not be intended for human use (e.g. credit card number).
     */
    identifier?: Identifier[];
    /**
     * Indicates whether the account is presently used/usable or not.
     */
    status: code;
    /**
     * Contains extension information for property 'status'.
     */
    _status?: Element;
    /**
     * Categorizes the account for reporting and searching purposes.
     */
    type?: CodeableConcept;
    /**
     * Name used for the account when displaying it to humans in reports, etc.
     */
    name?: string;
    /**
     * Contains extension information for property 'name'.
     */
    _name?: Element;
    /**
     * Identifies the entity which incurs the expenses. While the immediate recipients of services or goods might be entities related to the subject, the expenses were ultimately incurred by the subject of the Account.
     */
    subject?: Reference[];
    /**
     * The date range of services associated with this account.
     */
    servicePeriod?: Period;
    /**
     * The party(s) that are responsible for covering the payment of this account, and what order should they be applied to the account.
     */
    coverage?: AccountCoverage[];
    /**
     * Indicates the service area, hospital, department, etc. with responsibility for managing the Account.
     */
    owner?: Reference;
    /**
     * Provides additional information about what the account tracks and how it is used.
     */
    description?: string;
    /**
     * Contains extension information for property 'description'.
     */
    _description?: Element;
    /**
     * The parties responsible for balancing the account if other payment options fall short.
     */
    guarantor?: AccountGuarantor[];
    /**
     * Reference to a parent Account.
     */
    partOf?: Reference;
}
/**
 * The party(s) that are responsible for covering the payment of this account, and what order should they be applied to the account.
 */
export interface AccountCoverage {
    /**
     * Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
     */
    id?: string;
    /**
     * Contains extension information for property 'id'.
     */
    _id?: Element;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * The party(s) that contribute to payment (or part of) of the charges applied to this account (including self-pay).A coverage may only be responsible for specific types of charges, and the sequence of the coverages in the account could be important when processing billing.
     */
    coverage: Reference;
    /**
     * The priority of the coverage in the context of this account.
     */
    priority?: positiveInt;
    /**
     * Contains extension information for property 'priority'.
     */
    _priority?: Element;
}
/**
 * The parties responsible for balancing the account if other payment options fall short.
 */
export interface AccountGuarantor {
    /**
     * Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
     */
    id?: string;
    /**
     * Contains extension information for property 'id'.
     */
    _id?: Element;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * The entity who is responsible.
     */
    party: Reference;
    /**
     * A guarantor may be placed on credit hold or otherwise have their role temporarily suspended.
     */
    onHold?: boolean;
    /**
     * Contains extension information for property 'onHold'.
     */
    _onHold?: Element;
    /**
     * The timeframe during which the guarantor accepts responsibility for the account.
     */
    period?: Period;
}
/**
 * This resource allows for the definition of some activity to be performed, independent of a particular patient, practitioner, or other performance context.
 */
export interface ActivityDefinition {
    /**
     * The type of the resource.
     */
    resourceType: string;
    /**
     * The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes.
     */
    id?: id;
    /**
     * Contains extension information for property 'id'.
     */
    _id?: Element;
    /**
     * The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource.
     */
    meta?: Meta;
    /**
     * A reference to a set of rules that were followed when the resource was constructed, and which must be understood when processing the content. Often, this is a reference to an implementation guide that defines the special rules along with other profiles etc.
     */
    implicitRules?: uri;
    /**
     * Contains extension information for property 'implicitRules'.
     */
    _implicitRules?: Element;
    /**
     * The base language in which the resource is written.
     */
    language?: code;
    /**
     * Contains extension information for property 'language'.
     */
    _language?: Element;
    /**
     * A human-readable narrative that contains a summary of the resource and can be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it "clinically safe" for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety.
     */
    text?: Narrative;
    /**
     * These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, and nor can they have their own independent transaction scope.
     */
    contained?: Resource[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * An absolute URI that is used to identify this activity definition when it is referenced in a specification, model, design or an instance; also called its canonical identifier. This SHOULD be globally unique and SHOULD be a literal address at which at which an authoritative instance of this activity definition is (or will be) published. This URL can be the target of a canonical reference. It SHALL remain the same when the activity definition is stored on different servers.
     */
    url?: uri;
    /**
     * Contains extension information for property 'url'.
     */
    _url?: Element;
    /**
     * A formal identifier that is used to identify this activity definition when it is represented in other formats, or referenced in a specification, model, design or an instance.
     */
    identifier?: Identifier[];
    /**
     * The identifier that is used to identify this version of the activity definition when it is referenced in a specification, model, design or instance. This is an arbitrary value managed by the activity definition author and is not expected to be globally unique. For example, it might be a timestamp (e.g. yyyymmdd) if a managed version is not available. There is also no expectation that versions can be placed in a lexicographical sequence. To provide a version consistent with the Decision Support Service specification, use the format Major.Minor.Revision (e.g. 1.0.0). For more information on versioning knowledge assets, refer to the Decision Support Service specification. Note that a version is required for non-experimental active assets.
     */
    version?: string;
    /**
     * Contains extension information for property 'version'.
     */
    _version?: Element;
    /**
     * A natural language name identifying the activity definition. This name should be usable as an identifier for the module by machine processing applications such as code generation.
     */
    name?: string;
    /**
     * Contains extension information for property 'name'.
     */
    _name?: Element;
    /**
     * A short, descriptive, user-friendly title for the activity definition.
     */
    title?: string;
    /**
     * Contains extension information for property 'title'.
     */
    _title?: Element;
    /**
     * An explanatory or alternate title for the activity definition giving additional information about its content.
     */
    subtitle?: string;
    /**
     * Contains extension information for property 'subtitle'.
     */
    _subtitle?: Element;
    /**
     * The status of this activity definition. Enables tracking the life-cycle of the content.
     */
    status: code;
    /**
     * Contains extension information for property 'status'.
     */
    _status?: Element;
    /**
     * A Boolean value to indicate that this activity definition is authored for testing purposes (or education/evaluation/marketing) and is not intended to be used for genuine usage.
     */
    experimental?: boolean;
    /**
     * Contains extension information for property 'experimental'.
     */
    _experimental?: Element;
    /**
     * A code or group definition that describes the intended subject of the activity being defined.
     */
    subjectCodeableConcept?: CodeableConcept;
    /**
     * A code or group definition that describes the intended subject of the activity being defined.
     */
    subjectReference?: Reference;
    /**
     * The date  (and optionally time) when the activity definition was published. The date must change when the business version changes and it must change if the status code changes. In addition, it should change when the substantive content of the activity definition changes.
     */
    date?: dateTime;
    /**
     * Contains extension information for property 'date'.
     */
    _date?: Element;
    /**
     * The name of the organization or individual that published the activity definition.
     */
    publisher?: string;
    /**
     * Contains extension information for property 'publisher'.
     */
    _publisher?: Element;
    /**
     * Contact details to assist a user in finding and communicating with the publisher.
     */
    contact?: ContactDetail[];
    /**
     * A free text natural language description of the activity definition from a consumer's perspective.
     */
    description?: markdown;
    /**
     * Contains extension information for property 'description'.
     */
    _description?: Element;
    /**
     * The content was developed with a focus and intent of supporting the contexts that are listed. These contexts may be general categories (gender, age, ...) or may be references to specific programs (insurance plans, studies, ...) and may be used to assist with indexing and searching for appropriate activity definition instances.
     */
    useContext?: UsageContext[];
    /**
     * A legal or geographic region in which the activity definition is intended to be used.
     */
    jurisdiction?: CodeableConcept[];
    /**
     * Explanation of why this activity definition is needed and why it has been designed as it has.
     */
    purpose?: markdown;
    /**
     * Contains extension information for property 'purpose'.
     */
    _purpose?: Element;
    /**
     * A detailed description of how the activity definition is used from a clinical perspective.
     */
    usage?: string;
    /**
     * Contains extension information for property 'usage'.
     */
    _usage?: Element;
    /**
     * A copyright statement relating to the activity definition and/or its contents. Copyright statements are generally legal restrictions on the use and publishing of the activity definition.
     */
    copyright?: markdown;
    /**
     * Contains extension information for property 'copyright'.
     */
    _copyright?: Element;
    /**
     * The date on which the resource content was approved by the publisher. Approval happens once when the content is officially approved for usage.
     */
    approvalDate?: date;
    /**
     * Contains extension information for property 'approvalDate'.
     */
    _approvalDate?: Element;
    /**
     * The date on which the resource content was last reviewed. Review happens periodically after approval but does not change the original approval date.
     */
    lastReviewDate?: date;
    /**
     * Contains extension information for property 'lastReviewDate'.
     */
    _lastReviewDate?: Element;
    /**
     * The period during which the activity definition content was or is planned to be in active use.
     */
    effectivePeriod?: Period;
    /**
     * Descriptive topics related to the content of the activity. Topics provide a high-level categorization of the activity that can be useful for filtering and searching.
     */
    topic?: CodeableConcept[];
    /**
     * An individiual or organization primarily involved in the creation and maintenance of the content.
     */
    author?: ContactDetail[];
    /**
     * An individual or organization primarily responsible for internal coherence of the content.
     */
    editor?: ContactDetail[];
    /**
     * An individual or organization primarily responsible for review of some aspect of the content.
     */
    reviewer?: ContactDetail[];
    /**
     * An individual or organization responsible for officially endorsing the content for use in some setting.
     */
    endorser?: ContactDetail[];
    /**
     * Related artifacts such as additional documentation, justification, or bibliographic references.
     */
    relatedArtifact?: RelatedArtifact[];
    /**
     * A reference to a Library resource containing any formal logic used by the activity definition.
     */
    library?: canonical[];
    /**
     * A description of the kind of resource the activity definition is representing. For example, a MedicationRequest, a ServiceRequest, or a CommunicationRequest. Typically, but not always, this is a Request resource.
     */
    kind?: code;
    /**
     * Contains extension information for property 'kind'.
     */
    _kind?: Element;
    /**
     * A profile to which the target of the activity definition is expected to conform.
     */
    profile?: canonical;
    /**
     * Detailed description of the type of activity; e.g. What lab test, what procedure, what kind of encounter.
     */
    code?: CodeableConcept;
    /**
     * Indicates the level of authority/intentionality associated with the activity and where the request should fit into the workflow chain.
     */
    intent?: code;
    /**
     * Contains extension information for property 'intent'.
     */
    _intent?: Element;
    /**
     * Indicates how quickly the activity  should be addressed with respect to other requests.
     */
    priority?: code;
    /**
     * Contains extension information for property 'priority'.
     */
    _priority?: Element;
    /**
     * Set this to true if the definition is to indicate that a particular activity should NOT be performed. If true, this element should be interpreted to reinforce a negative coding. For example NPO as a code with a doNotPerform of true would still indicate to NOT perform the action.
     */
    doNotPerform?: boolean;
    /**
     * Contains extension information for property 'doNotPerform'.
     */
    _doNotPerform?: Element;
    /**
     * The period, timing or frequency upon which the described activity is to occur.
     */
    timingTiming?: Timing;
    /**
     * The period, timing or frequency upon which the described activity is to occur.
     */
    timingDateTime?: dateTime;
    /**
     * Contains extension information for property 'timingDateTime'.
     */
    _timingDateTime?: Element;
    /**
     * The period, timing or frequency upon which the described activity is to occur.
     */
    timingAge?: Age;
    /**
     * The period, timing or frequency upon which the described activity is to occur.
     */
    timingPeriod?: Period;
    /**
     * The period, timing or frequency upon which the described activity is to occur.
     */
    timingRange?: Range;
    /**
     * The period, timing or frequency upon which the described activity is to occur.
     */
    timingDuration?: Duration;
    /**
     * Identifies the facility where the activity will occur; e.g. home, hospital, specific clinic, etc.
     */
    location?: Reference;
    /**
     * Indicates who should participate in performing the action described.
     */
    participant?: ActivityDefinitionParticipant[];
    /**
     * Identifies the food, drug or other product being consumed or supplied in the activity.
     */
    productReference?: Reference;
    /**
     * Identifies the food, drug or other product being consumed or supplied in the activity.
     */
    productCodeableConcept?: CodeableConcept;
    /**
     * Identifies the quantity expected to be consumed at once (per dose, per meal, etc.).
     */
    quantity?: Quantity;
    /**
     * Provides detailed dosage instructions in the same way that they are described for MedicationRequest resources.
     */
    dosage?: Dosage[];
    /**
     * Indicates the sites on the subject's body where the procedure should be performed (I.e. the target sites).
     */
    bodySite?: CodeableConcept[];
    /**
     * Defines specimen requirements for the action to be performed, such as required specimens for a lab test.
     */
    specimenRequirement?: Reference[];
    /**
     * Defines observation requirements for the action to be performed, such as body weight or surface area.
     */
    observationRequirement?: Reference[];
    /**
     * Defines the observations that are expected to be produced by the action.
     */
    observationResultRequirement?: Reference[];
    /**
     * A reference to a StructureMap resource that defines a transform that can be executed to produce the intent resource using the ActivityDefinition instance as the input.
     */
    transform?: canonical;
    /**
     * Dynamic values that will be evaluated to produce values for elements of the resulting resource. For example, if the dosage of a medication must be computed based on the patient's weight, a dynamic value would be used to specify an expression that calculated the weight, and the path on the request resource that would contain the result.
     */
    dynamicValue?: ActivityDefinitionDynamicValue[];
}
/**
 * Indicates who should participate in performing the action described.
 */
export interface ActivityDefinitionParticipant {
    /**
     * Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
     */
    id?: string;
    /**
     * Contains extension information for property 'id'.
     */
    _id?: Element;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * The type of participant in the action.
     */
    type: code;
    /**
     * Contains extension information for property 'type'.
     */
    _type?: Element;
    /**
     * The role the participant should play in performing the described action.
     */
    role?: CodeableConcept;
}
/**
 * Dynamic values that will be evaluated to produce values for elements of the resulting resource. For example, if the dosage of a medication must be computed based on the patient's weight, a dynamic value would be used to specify an expression that calculated the weight, and the path on the request resource that would contain the result.
 */
export interface ActivityDefinitionDynamicValue {
    /**
     * Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
     */
    id?: string;
    /**
     * Contains extension information for property 'id'.
     */
    _id?: Element;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * The path to the element to be customized. This is the path on the resource that will hold the result of the calculation defined by the expression. The specified path SHALL be a FHIRPath resolveable on the specified target type of the ActivityDefinition, and SHALL consist only of identifiers, constant indexers, and a restricted subset of functions. The path is allowed to contain qualifiers (.) to traverse sub-elements, as well as indexers ([x]) to traverse multiple-cardinality sub-elements (see the [Simple FHIRPath Profile](fhirpath.html#simple) for full details).
     */
    path: string;
    /**
     * Contains extension information for property 'path'.
     */
    _path?: Element;
    /**
     * An expression specifying the value of the customized element.
     */
    expression: Expression;
}
/**
 * An address expressed using postal conventions (as opposed to GPS or other location definition formats).  This data type may be used to convey addresses for use in delivering mail as well as for visiting locations which might not be valid for mail delivery.  There are a variety of postal address formats defined around the world.
 */
export interface Address {
    /**
     * Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
     */
    id?: string;
    /**
     * Contains extension information for property 'id'.
     */
    _id?: Element;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * The purpose of this address.
     */
    use?: code;
    /**
     * Contains extension information for property 'use'.
     */
    _use?: Element;
    /**
     * Distinguishes between physical addresses (those you can visit) and mailing addresses (e.g. PO Boxes and care-of addresses). Most addresses are both.
     */
    type?: code;
    /**
     * Contains extension information for property 'type'.
     */
    _type?: Element;
    /**
     * Specifies the entire address as it should be displayed e.g. on a postal label. This may be provided instead of or as well as the specific parts.
     */
    text?: string;
    /**
     * Contains extension information for property 'text'.
     */
    _text?: Element;
    /**
     * This component contains the house number, apartment number, street name, street direction,  P.O. Box number, delivery hints, and similar address information.
     */
    line?: string[];
    /**
     * Contains extension information for property 'line'.
     */
    _line?: Element[];
    /**
     * The name of the city, town, suburb, village or other community or delivery center.
     */
    city?: string;
    /**
     * Contains extension information for property 'city'.
     */
    _city?: Element;
    /**
     * The name of the administrative area (county).
     */
    district?: string;
    /**
     * Contains extension information for property 'district'.
     */
    _district?: Element;
    /**
     * Sub-unit of a country with limited sovereignty in a federally organized country. A code may be used if codes are in common use (e.g. US 2 letter state codes).
     */
    state?: string;
    /**
     * Contains extension information for property 'state'.
     */
    _state?: Element;
    /**
     * A postal code designating a region defined by the postal service.
     */
    postalCode?: string;
    /**
     * Contains extension information for property 'postalCode'.
     */
    _postalCode?: Element;
    /**
     * Country - a nation as commonly understood or generally accepted.
     */
    country?: string;
    /**
     * Contains extension information for property 'country'.
     */
    _country?: Element;
    /**
     * Time period when address was/is in use.
     */
    period?: Period;
}
/**
 * Actual or  potential/avoided event causing unintended physical injury resulting from or contributed to by medical care, a research study or other healthcare setting factors that requires additional monitoring, treatment, or hospitalization, or that results in death.
 */
export interface AdverseEvent {
    /**
     * The type of the resource.
     */
    resourceType: string;
    /**
     * The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes.
     */
    id?: id;
    /**
     * Contains extension information for property 'id'.
     */
    _id?: Element;
    /**
     * The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource.
     */
    meta?: Meta;
    /**
     * A reference to a set of rules that were followed when the resource was constructed, and which must be understood when processing the content. Often, this is a reference to an implementation guide that defines the special rules along with other profiles etc.
     */
    implicitRules?: uri;
    /**
     * Contains extension information for property 'implicitRules'.
     */
    _implicitRules?: Element;
    /**
     * The base language in which the resource is written.
     */
    language?: code;
    /**
     * Contains extension information for property 'language'.
     */
    _language?: Element;
    /**
     * A human-readable narrative that contains a summary of the resource and can be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it "clinically safe" for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety.
     */
    text?: Narrative;
    /**
     * These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, and nor can they have their own independent transaction scope.
     */
    contained?: Resource[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * Business identifiers assigned to this adverse event by the performer or other systems which remain constant as the resource is updated and propagates from server to server.
     */
    identifier?: Identifier;
    /**
     * Whether the event actually happened, or just had the potential to. Note that this is independent of whether anyone was affected or harmed or how severely.
     */
    actuality: code;
    /**
     * Contains extension information for property 'actuality'.
     */
    _actuality?: Element;
    /**
     * The overall type of event, intended for search and filtering purposes.
     */
    category?: CodeableConcept[];
    /**
     * This element defines the specific type of event that occurred or that was prevented from occurring.
     */
    event?: CodeableConcept;
    /**
     * This subject or group impacted by the event.
     */
    subject: Reference;
    /**
     * The Encounter during which AdverseEvent was created or to which the creation of this record is tightly associated.
     */
    encounter?: Reference;
    /**
     * The date (and perhaps time) when the adverse event occurred.
     */
    date?: dateTime;
    /**
     * Contains extension information for property 'date'.
     */
    _date?: Element;
    /**
     * Estimated or actual date the AdverseEvent began, in the opinion of the reporter.
     */
    detected?: dateTime;
    /**
     * Contains extension information for property 'detected'.
     */
    _detected?: Element;
    /**
     * The date on which the existence of the AdverseEvent was first recorded.
     */
    recordedDate?: dateTime;
    /**
     * Contains extension information for property 'recordedDate'.
     */
    _recordedDate?: Element;
    /**
     * Includes information about the reaction that occurred as a result of exposure to a substance (for example, a drug or a chemical).
     */
    resultingCondition?: Reference[];
    /**
     * The information about where the adverse event occurred.
     */
    location?: Reference;
    /**
     * Assessment whether this event was of real importance.
     */
    seriousness?: CodeableConcept;
    /**
     * Describes the severity of the adverse event, in relation to the subject. Contrast to AdverseEvent.seriousness - a severe rash might not be serious, but a mild heart problem is.
     */
    severity?: CodeableConcept;
    /**
     * Describes the type of outcome from the adverse event.
     */
    outcome?: CodeableConcept;
    /**
     * Information on who recorded the adverse event.  May be the patient or a practitioner.
     */
    recorder?: Reference;
    /**
     * Parties that may or should contribute or have contributed information to the adverse event, which can consist of one or more activities.  Such information includes information leading to the decision to perform the activity and how to perform the activity (e.g. consultant), information that the activity itself seeks to reveal (e.g. informant of clinical history), or information about what activity was performed (e.g. informant witness).
     */
    contributor?: Reference[];
    /**
     * Describes the entity that is suspected to have caused the adverse event.
     */
    suspectEntity?: AdverseEventSuspectEntity[];
    /**
     * AdverseEvent.subjectMedicalHistory.
     */
    subjectMedicalHistory?: Reference[];
    /**
     * AdverseEvent.referenceDocument.
     */
    referenceDocument?: Reference[];
    /**
     * AdverseEvent.study.
     */
    study?: Reference[];
}
/**
 * Describes the entity that is suspected to have caused the adverse event.
 */
export interface AdverseEventSuspectEntity {
    /**
     * Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
     */
    id?: string;
    /**
     * Contains extension information for property 'id'.
     */
    _id?: Element;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * Identifies the actual instance of what caused the adverse event.  May be a substance, medication, medication administration, medication statement or a device.
     */
    instance: Reference;
    /**
     * Information on the possible cause of the event.
     */
    causality?: AdverseEventSuspectEntityCausality[];
}
/**
 * Information on the possible cause of the event.
 */
export interface AdverseEventSuspectEntityCausality {
    /**
     * Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
     */
    id?: string;
    /**
     * Contains extension information for property 'id'.
     */
    _id?: Element;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * Assessment of if the entity caused the event.
     */
    assessment?: CodeableConcept;
    /**
     * AdverseEvent.suspectEntity.causalityProductRelatedness.
     */
    productRelatedness?: string;
    /**
     * Contains extension information for property 'productRelatedness'.
     */
    _productRelatedness?: Element;
    /**
     * AdverseEvent.suspectEntity.causalityAuthor.
     */
    author?: Reference;
    /**
     * ProbabilityScale | Bayesian | Checklist.
     */
    method?: CodeableConcept;
}
/**
 * A duration of time during which an organism (or a process) has existed.
 */
export interface Age {
    /**
     * Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
     */
    id?: string;
    /**
     * Contains extension information for property 'id'.
     */
    _id?: Element;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * The value of the measured amount. The value includes an implicit precision in the presentation of the value.
     */
    value?: decimal;
    /**
     * Contains extension information for property 'value'.
     */
    _value?: Element;
    /**
     * How the value should be understood and represented - whether the actual value is greater or less than the stated value due to measurement issues; e.g. if the comparator is "<" , then the real value is < stated value.
     */
    comparator?: code;
    /**
     * Contains extension information for property 'comparator'.
     */
    _comparator?: Element;
    /**
     * A human-readable form of the unit.
     */
    unit?: string;
    /**
     * Contains extension information for property 'unit'.
     */
    _unit?: Element;
    /**
     * The identification of the system that provides the coded form of the unit.
     */
    system?: uri;
    /**
     * Contains extension information for property 'system'.
     */
    _system?: Element;
    /**
     * A computer processable form of the unit in some unit representation system.
     */
    code?: code;
    /**
     * Contains extension information for property 'code'.
     */
    _code?: Element;
}
/**
 * Risk of harmful or undesirable, physiological response which is unique to an individual and associated with exposure to a substance.
 */
export interface AllergyIntolerance {
    /**
     * The type of the resource.
     */
    resourceType: string;
    /**
     * The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes.
     */
    id?: id;
    /**
     * Contains extension information for property 'id'.
     */
    _id?: Element;
    /**
     * The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource.
     */
    meta?: Meta;
    /**
     * A reference to a set of rules that were followed when the resource was constructed, and which must be understood when processing the content. Often, this is a reference to an implementation guide that defines the special rules along with other profiles etc.
     */
    implicitRules?: uri;
    /**
     * Contains extension information for property 'implicitRules'.
     */
    _implicitRules?: Element;
    /**
     * The base language in which the resource is written.
     */
    language?: code;
    /**
     * Contains extension information for property 'language'.
     */
    _language?: Element;
    /**
     * A human-readable narrative that contains a summary of the resource and can be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it "clinically safe" for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety.
     */
    text?: Narrative;
    /**
     * These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, and nor can they have their own independent transaction scope.
     */
    contained?: Resource[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * Business identifiers assigned to this AllergyIntolerance by the performer or other systems which remain constant as the resource is updated and propagates from server to server.
     */
    identifier?: Identifier[];
    /**
     * The clinical status of the allergy or intolerance.
     */
    clinicalStatus?: CodeableConcept;
    /**
     * Assertion about certainty associated with the propensity, or potential risk, of a reaction to the identified substance (including pharmaceutical product).
     */
    verificationStatus?: CodeableConcept;
    /**
     * Identification of the underlying physiological mechanism for the reaction risk.
     */
    type?: code;
    /**
     * Contains extension information for property 'type'.
     */
    _type?: Element;
    /**
     * Category of the identified substance.
     */
    category?: code[];
    /**
     * Contains extension information for property 'category'.
     */
    _category?: Element[];
    /**
     * Estimate of the potential clinical harm, or seriousness, of the reaction to the identified substance.
     */
    criticality?: code;
    /**
     * Contains extension information for property 'criticality'.
     */
    _criticality?: Element;
    /**
     * Code for an allergy or intolerance statement (either a positive or a negated/excluded statement).  This may be a code for a substance or pharmaceutical product that is considered to be responsible for the adverse reaction risk (e.g., "Latex"), an allergy or intolerance condition (e.g., "Latex allergy"), or a negated/excluded code for a specific substance or class (e.g., "No latex allergy") or a general or categorical negated statement (e.g.,  "No known allergy", "No known drug allergies").  Note: the substance for a specific reaction may be different from the substance identified as the cause of the risk, but it must be consistent with it. For instance, it may be a more specific substance (e.g. a brand medication) or a composite product that includes the identified substance. It must be clinically safe to only process the 'code' and ignore the 'reaction.substance'.  If a receiving system is unable to confirm that AllergyIntolerance.reaction.substance falls within the semantic scope of AllergyIntolerance.code, then the receiving system should ignore AllergyIntolerance.reaction.substance.
     */
    code?: CodeableConcept;
    /**
     * The patient who has the allergy or intolerance.
     */
    patient: Reference;
    /**
     * The encounter when the allergy or intolerance was asserted.
     */
    encounter?: Reference;
    /**
     * Estimated or actual date,  date-time, or age when allergy or intolerance was identified.
     */
    onsetDateTime?: dateTime;
    /**
     * Contains extension information for property 'onsetDateTime'.
     */
    _onsetDateTime?: Element;
    /**
     * Estimated or actual date,  date-time, or age when allergy or intolerance was identified.
     */
    onsetAge?: Age;
    /**
     * Estimated or actual date,  date-time, or age when allergy or intolerance was identified.
     */
    onsetPeriod?: Period;
    /**
     * Estimated or actual date,  date-time, or age when allergy or intolerance was identified.
     */
    onsetRange?: Range;
    /**
     * Estimated or actual date,  date-time, or age when allergy or intolerance was identified.
     */
    onsetString?: string;
    /**
     * Contains extension information for property 'onsetString'.
     */
    _onsetString?: Element;
    /**
     * The recordedDate represents when this particular AllergyIntolerance record was created in the system, which is often a system-generated date.
     */
    recordedDate?: dateTime;
    /**
     * Contains extension information for property 'recordedDate'.
     */
    _recordedDate?: Element;
    /**
     * Individual who recorded the record and takes responsibility for its content.
     */
    recorder?: Reference;
    /**
     * The source of the information about the allergy that is recorded.
     */
    asserter?: Reference;
    /**
     * Represents the date and/or time of the last known occurrence of a reaction event.
     */
    lastOccurrence?: dateTime;
    /**
     * Contains extension information for property 'lastOccurrence'.
     */
    _lastOccurrence?: Element;
    /**
     * Additional narrative about the propensity for the Adverse Reaction, not captured in other fields.
     */
    note?: Annotation[];
    /**
     * Details about each adverse reaction event linked to exposure to the identified substance.
     */
    reaction?: AllergyIntoleranceReaction[];
}
/**
 * Details about each adverse reaction event linked to exposure to the identified substance.
 */
export interface AllergyIntoleranceReaction {
    /**
     * Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
     */
    id?: string;
    /**
     * Contains extension information for property 'id'.
     */
    _id?: Element;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * Identification of the specific substance (or pharmaceutical product) considered to be responsible for the Adverse Reaction event. Note: the substance for a specific reaction may be different from the substance identified as the cause of the risk, but it must be consistent with it. For instance, it may be a more specific substance (e.g. a brand medication) or a composite product that includes the identified substance. It must be clinically safe to only process the 'code' and ignore the 'reaction.substance'.  If a receiving system is unable to confirm that AllergyIntolerance.reaction.substance falls within the semantic scope of AllergyIntolerance.code, then the receiving system should ignore AllergyIntolerance.reaction.substance.
     */
    substance?: CodeableConcept;
    /**
     * Clinical symptoms and/or signs that are observed or associated with the adverse reaction event.
     */
    manifestation: CodeableConcept[];
    /**
     * Text description about the reaction as a whole, including details of the manifestation if required.
     */
    description?: string;
    /**
     * Contains extension information for property 'description'.
     */
    _description?: Element;
    /**
     * Record of the date and/or time of the onset of the Reaction.
     */
    onset?: dateTime;
    /**
     * Contains extension information for property 'onset'.
     */
    _onset?: Element;
    /**
     * Clinical assessment of the severity of the reaction event as a whole, potentially considering multiple different manifestations.
     */
    severity?: code;
    /**
     * Contains extension information for property 'severity'.
     */
    _severity?: Element;
    /**
     * Identification of the route by which the subject was exposed to the substance.
     */
    exposureRoute?: CodeableConcept;
    /**
     * Additional text about the adverse reaction event not captured in other fields.
     */
    note?: Annotation[];
}
/**
 * A  text note which also  contains information about who made the statement and when.
 */
export interface Annotation {
    /**
     * Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
     */
    id?: string;
    /**
     * Contains extension information for property 'id'.
     */
    _id?: Element;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * The individual responsible for making the annotation.
     */
    authorReference?: Reference;
    /**
     * The individual responsible for making the annotation.
     */
    authorString?: string;
    /**
     * Contains extension information for property 'authorString'.
     */
    _authorString?: Element;
    /**
     * Indicates when this particular annotation was made.
     */
    time?: dateTime;
    /**
     * Contains extension information for property 'time'.
     */
    _time?: Element;
    /**
     * The text of the annotation in markdown format.
     */
    text: markdown;
    /**
     * Contains extension information for property 'text'.
     */
    _text?: Element;
}
/**
 * A booking of a healthcare event among patient(s), practitioner(s), related person(s) and/or device(s) for a specific date/time. This may result in one or more Encounter(s).
 */
export interface Appointment {
    /**
     * The type of the resource.
     */
    resourceType: string;
    /**
     * The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes.
     */
    id?: id;
    /**
     * Contains extension information for property 'id'.
     */
    _id?: Element;
    /**
     * The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource.
     */
    meta?: Meta;
    /**
     * A reference to a set of rules that were followed when the resource was constructed, and which must be understood when processing the content. Often, this is a reference to an implementation guide that defines the special rules along with other profiles etc.
     */
    implicitRules?: uri;
    /**
     * Contains extension information for property 'implicitRules'.
     */
    _implicitRules?: Element;
    /**
     * The base language in which the resource is written.
     */
    language?: code;
    /**
     * Contains extension information for property 'language'.
     */
    _language?: Element;
    /**
     * A human-readable narrative that contains a summary of the resource and can be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it "clinically safe" for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety.
     */
    text?: Narrative;
    /**
     * These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, and nor can they have their own independent transaction scope.
     */
    contained?: Resource[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * This records identifiers associated with this appointment concern that are defined by business processes and/or used to refer to it when a direct URL reference to the resource itself is not appropriate (e.g. in CDA documents, or in written / printed documentation).
     */
    identifier?: Identifier[];
    /**
     * The overall status of the Appointment. Each of the participants has their own participation status which indicates their involvement in the process, however this status indicates the shared status.
     */
    status: code;
    /**
     * Contains extension information for property 'status'.
     */
    _status?: Element;
    /**
     * The coded reason for the appointment being cancelled. This is often used in reporting/billing/futher processing to determine if further actions are required, or specific fees apply.
     */
    cancelationReason?: CodeableConcept;
    /**
     * A broad categorization of the service that is to be performed during this appointment.
     */
    serviceCategory?: CodeableConcept[];
    /**
     * The specific service that is to be performed during this appointment.
     */
    serviceType?: CodeableConcept[];
    /**
     * The specialty of a practitioner that would be required to perform the service requested in this appointment.
     */
    specialty?: CodeableConcept[];
    /**
     * The style of appointment or patient that has been booked in the slot (not service type).
     */
    appointmentType?: CodeableConcept;
    /**
     * The coded reason that this appointment is being scheduled. This is more clinical than administrative.
     */
    reasonCode?: CodeableConcept[];
    /**
     * Reason the appointment has been scheduled to take place, as specified using information from another resource. When the patient arrives and the encounter begins it may be used as the admission diagnosis. The indication will typically be a Condition (with other resources referenced in the evidence.detail), or a Procedure.
     */
    reasonReference?: Reference[];
    /**
     * The priority of the appointment. Can be used to make informed decisions if needing to re-prioritize appointments. (The iCal Standard specifies 0 as undefined, 1 as highest, 9 as lowest priority).
     */
    priority?: unsignedInt;
    /**
     * Contains extension information for property 'priority'.
     */
    _priority?: Element;
    /**
     * The brief description of the appointment as would be shown on a subject line in a meeting request, or appointment list. Detailed or expanded information should be put in the comment field.
     */
    description?: string;
    /**
     * Contains extension information for property 'description'.
     */
    _description?: Element;
    /**
     * Additional information to support the appointment provided when making the appointment.
     */
    supportingInformation?: Reference[];
    /**
     * Date/Time that the appointment is to take place.
     */
    start?: instant;
    /**
     * Contains extension information for property 'start'.
     */
    _start?: Element;
    /**
     * Date/Time that the appointment is to conclude.
     */
    end?: instant;
    /**
     * Contains extension information for property 'end'.
     */
    _end?: Element;
    /**
     * Number of minutes that the appointment is to take. This can be less than the duration between the start and end times.  For example, where the actual time of appointment is only an estimate or if a 30 minute appointment is being requested, but any time would work.  Also, if there is, for example, a planned 15 minute break in the middle of a long appointment, the duration may be 15 minutes less than the difference between the start and end.
     */
    minutesDuration?: positiveInt;
    /**
     * Contains extension information for property 'minutesDuration'.
     */
    _minutesDuration?: Element;
    /**
     * The slots from the participants' schedules that will be filled by the appointment.
     */
    slot?: Reference[];
    /**
     * The date that this appointment was initially created. This could be different to the meta.lastModified value on the initial entry, as this could have been before the resource was created on the FHIR server, and should remain unchanged over the lifespan of the appointment.
     */
    created?: dateTime;
    /**
     * Contains extension information for property 'created'.
     */
    _created?: Element;
    /**
     * Additional comments about the appointment.
     */
    comment?: string;
    /**
     * Contains extension information for property 'comment'.
     */
    _comment?: Element;
    /**
     * While Appointment.comment contains information for internal use, Appointment.patientInstructions is used to capture patient facing information about the Appointment (e.g. please bring your referral or fast from 8pm night before).
     */
    patientInstruction?: string;
    /**
     * Contains extension information for property 'patientInstruction'.
     */
    _patientInstruction?: Element;
    /**
     * The service request this appointment is allocated to assess (e.g. incoming referral or procedure request).
     */
    basedOn?: Reference[];
    /**
     * List of participants involved in the appointment.
     */
    participant: AppointmentParticipant[];
    /**
     * A set of date ranges (potentially including times) that the appointment is preferred to be scheduled within.The duration (usually in minutes) could also be provided to indicate the length of the appointment to fill and populate the start/end times for the actual allocated time. However, in other situations the duration may be calculated by the scheduling system.
     */
    requestedPeriod?: Period[];
}
/**
 * List of participants involved in the appointment.
 */
export interface AppointmentParticipant {
    /**
     * Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
     */
    id?: string;
    /**
     * Contains extension information for property 'id'.
     */
    _id?: Element;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * Role of participant in the appointment.
     */
    type?: CodeableConcept[];
    /**
     * A Person, Location/HealthcareService or Device that is participating in the appointment.
     */
    actor?: Reference;
    /**
     * Whether this participant is required to be present at the meeting. This covers a use-case where two doctors need to meet to discuss the results for a specific patient, and the patient is not required to be present.
     */
    required?: code;
    /**
     * Contains extension information for property 'required'.
     */
    _required?: Element;
    /**
     * Participation status of the actor.
     */
    status: code;
    /**
     * Contains extension information for property 'status'.
     */
    _status?: Element;
    /**
     * Participation period of the actor.
     */
    period?: Period;
}
/**
 * A reply to an appointment request for a patient and/or practitioner(s), such as a confirmation or rejection.
 */
export interface AppointmentResponse {
    /**
     * The type of the resource.
     */
    resourceType: string;
    /**
     * The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes.
     */
    id?: id;
    /**
     * Contains extension information for property 'id'.
     */
    _id?: Element;
    /**
     * The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource.
     */
    meta?: Meta;
    /**
     * A reference to a set of rules that were followed when the resource was constructed, and which must be understood when processing the content. Often, this is a reference to an implementation guide that defines the special rules along with other profiles etc.
     */
    implicitRules?: uri;
    /**
     * Contains extension information for property 'implicitRules'.
     */
    _implicitRules?: Element;
    /**
     * The base language in which the resource is written.
     */
    language?: code;
    /**
     * Contains extension information for property 'language'.
     */
    _language?: Element;
    /**
     * A human-readable narrative that contains a summary of the resource and can be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it "clinically safe" for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety.
     */
    text?: Narrative;
    /**
     * These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, and nor can they have their own independent transaction scope.
     */
    contained?: Resource[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * This records identifiers associated with this appointment response concern that are defined by business processes and/ or used to refer to it when a direct URL reference to the resource itself is not appropriate.
     */
    identifier?: Identifier[];
    /**
     * Appointment that this response is replying to.
     */
    appointment: Reference;
    /**
     * Date/Time that the appointment is to take place, or requested new start time.
     */
    start?: instant;
    /**
     * Contains extension information for property 'start'.
     */
    _start?: Element;
    /**
     * This may be either the same as the appointment request to confirm the details of the appointment, or alternately a new time to request a re-negotiation of the end time.
     */
    end?: instant;
    /**
     * Contains extension information for property 'end'.
     */
    _end?: Element;
    /**
     * Role of participant in the appointment.
     */
    participantType?: CodeableConcept[];
    /**
     * A Person, Location, HealthcareService, or Device that is participating in the appointment.
     */
    actor?: Reference;
    /**
     * Participation status of the participant. When the status is declined or tentative if the start/end times are different to the appointment, then these times should be interpreted as a requested time change. When the status is accepted, the times can either be the time of the appointment (as a confirmation of the time) or can be empty.
     */
    participantStatus: code;
    /**
     * Contains extension information for property 'participantStatus'.
     */
    _participantStatus?: Element;
    /**
     * Additional comments about the appointment.
     */
    comment?: string;
    /**
     * Contains extension information for property 'comment'.
     */
    _comment?: Element;
}
/**
 * For referring to data content defined in other formats.
 */
export interface Attachment {
    /**
     * Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
     */
    id?: string;
    /**
     * Contains extension information for property 'id'.
     */
    _id?: Element;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * Identifies the type of the data in the attachment and allows a method to be chosen to interpret or render the data. Includes mime type parameters such as charset where appropriate.
     */
    contentType?: code;
    /**
     * Contains extension information for property 'contentType'.
     */
    _contentType?: Element;
    /**
     * The human language of the content. The value can be any valid value according to BCP 47.
     */
    language?: code;
    /**
     * Contains extension information for property 'language'.
     */
    _language?: Element;
    /**
     * The actual data of the attachment - a sequence of bytes, base64 encoded.
     */
    data?: base64Binary;
    /**
     * Contains extension information for property 'data'.
     */
    _data?: Element;
    /**
     * A location where the data can be accessed.
     */
    url?: url;
    /**
     * The number of bytes of data that make up this attachment (before base64 encoding, if that is done).
     */
    size?: unsignedInt;
    /**
     * Contains extension information for property 'size'.
     */
    _size?: Element;
    /**
     * The calculated hash of the data using SHA-1. Represented using base64.
     */
    hash?: base64Binary;
    /**
     * Contains extension information for property 'hash'.
     */
    _hash?: Element;
    /**
     * A label or set of text to display in place of the data.
     */
    title?: string;
    /**
     * Contains extension information for property 'title'.
     */
    _title?: Element;
    /**
     * The date that the attachment was first created.
     */
    creation?: dateTime;
    /**
     * Contains extension information for property 'creation'.
     */
    _creation?: Element;
}
/**
 * A record of an event made for purposes of maintaining a security log. Typical uses include detection of intrusion attempts and monitoring for inappropriate usage.
 */
export interface AuditEvent {
    /**
     * The type of the resource.
     */
    resourceType: string;
    /**
     * The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes.
     */
    id?: id;
    /**
     * Contains extension information for property 'id'.
     */
    _id?: Element;
    /**
     * The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource.
     */
    meta?: Meta;
    /**
     * A reference to a set of rules that were followed when the resource was constructed, and which must be understood when processing the content. Often, this is a reference to an implementation guide that defines the special rules along with other profiles etc.
     */
    implicitRules?: uri;
    /**
     * Contains extension information for property 'implicitRules'.
     */
    _implicitRules?: Element;
    /**
     * The base language in which the resource is written.
     */
    language?: code;
    /**
     * Contains extension information for property 'language'.
     */
    _language?: Element;
    /**
     * A human-readable narrative that contains a summary of the resource and can be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it "clinically safe" for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety.
     */
    text?: Narrative;
    /**
     * These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, and nor can they have their own independent transaction scope.
     */
    contained?: Resource[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * Identifier for a family of the event.  For example, a menu item, program, rule, policy, function code, application name or URL. It identifies the performed function.
     */
    type: Coding;
    /**
     * Identifier for the category of event.
     */
    subtype?: Coding[];
    /**
     * Indicator for type of action performed during the event that generated the audit.
     */
    action?: code;
    /**
     * Contains extension information for property 'action'.
     */
    _action?: Element;
    /**
     * The period during which the activity occurred.
     */
    period?: Period;
    /**
     * The time when the event was recorded.
     */
    recorded: instant;
    /**
     * Contains extension information for property 'recorded'.
     */
    _recorded?: Element;
    /**
     * Indicates whether the event succeeded or failed.
     */
    outcome?: code;
    /**
     * Contains extension information for property 'outcome'.
     */
    _outcome?: Element;
    /**
     * A free text description of the outcome of the event.
     */
    outcomeDesc?: string;
    /**
     * Contains extension information for property 'outcomeDesc'.
     */
    _outcomeDesc?: Element;
    /**
     * The purposeOfUse (reason) that was used during the event being recorded.
     */
    purposeOfEvent?: CodeableConcept[];
    /**
     * An actor taking an active role in the event or activity that is logged.
     */
    agent: AuditEventAgent[];
    /**
     * The system that is reporting the event.
     */
    source: AuditEventSource;
    /**
     * Specific instances of data or objects that have been accessed.
     */
    entity?: AuditEventEntity[];
}
/**
 * An actor taking an active role in the event or activity that is logged.
 */
export interface AuditEventAgent {
    /**
     * Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
     */
    id?: string;
    /**
     * Contains extension information for property 'id'.
     */
    _id?: Element;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * Specification of the participation type the user plays when performing the event.
     */
    type?: CodeableConcept;
    /**
     * The security role that the user was acting under, that come from local codes defined by the access control security system (e.g. RBAC, ABAC) used in the local context.
     */
    role?: CodeableConcept[];
    /**
     * Reference to who this agent is that was involved in the event.
     */
    who?: Reference;
    /**
     * Alternative agent Identifier. For a human, this should be a user identifier text string from authentication system. This identifier would be one known to a common authentication system (e.g. single sign-on), if available.
     */
    altId?: string;
    /**
     * Contains extension information for property 'altId'.
     */
    _altId?: Element;
    /**
     * Human-meaningful name for the agent.
     */
    name?: string;
    /**
     * Contains extension information for property 'name'.
     */
    _name?: Element;
    /**
     * Indicator that the user is or is not the requestor, or initiator, for the event being audited.
     */
    requestor: boolean;
    /**
     * Contains extension information for property 'requestor'.
     */
    _requestor?: Element;
    /**
     * Where the event occurred.
     */
    location?: Reference;
    /**
     * The policy or plan that authorized the activity being recorded. Typically, a single activity may have multiple applicable policies, such as patient consent, guarantor funding, etc. The policy would also indicate the security token used.
     */
    policy?: uri[];
    /**
     * Contains extension information for property 'policy'.
     */
    _policy?: Element[];
    /**
     * Type of media involved. Used when the event is about exporting/importing onto media.
     */
    media?: Coding;
    /**
     * Logical network location for application activity, if the activity has a network location.
     */
    network?: AuditEventAgentNetwork;
    /**
     * The reason (purpose of use), specific to this agent, that was used during the event being recorded.
     */
    purposeOfUse?: CodeableConcept[];
}
/**
 * Logical network location for application activity, if the activity has a network location.
 */
export interface AuditEventAgentNetwork {
    /**
     * Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
     */
    id?: string;
    /**
     * Contains extension information for property 'id'.
     */
    _id?: Element;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * An identifier for the network access point of the user device for the audit event.
     */
    address?: string;
    /**
     * Contains extension information for property 'address'.
     */
    _address?: Element;
    /**
     * An identifier for the type of network access point that originated the audit event.
     */
    type?: code;
    /**
     * Contains extension information for property 'type'.
     */
    _type?: Element;
}
/**
 * The system that is reporting the event.
 */
export interface AuditEventSource {
    /**
     * Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
     */
    id?: string;
    /**
     * Contains extension information for property 'id'.
     */
    _id?: Element;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * Logical source location within the healthcare enterprise network.  For example, a hospital or other provider location within a multi-entity provider group.
     */
    site?: string;
    /**
     * Contains extension information for property 'site'.
     */
    _site?: Element;
    /**
     * Identifier of the source where the event was detected.
     */
    observer: Reference;
    /**
     * Code specifying the type of source where event originated.
     */
    type?: Coding[];
}
/**
 * Specific instances of data or objects that have been accessed.
 */
export interface AuditEventEntity {
    /**
     * Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
     */
    id?: string;
    /**
     * Contains extension information for property 'id'.
     */
    _id?: Element;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * Identifies a specific instance of the entity. The reference should be version specific.
     */
    what?: Reference;
    /**
     * The type of the object that was involved in this audit event.
     */
    type?: Coding;
    /**
     * Code representing the role the entity played in the event being audited.
     */
    role?: Coding;
    /**
     * Identifier for the data life-cycle stage for the entity.
     */
    lifecycle?: Coding;
    /**
     * Security labels for the identified entity.
     */
    securityLabel?: Coding[];
    /**
     * A name of the entity in the audit event.
     */
    name?: string;
    /**
     * Contains extension information for property 'name'.
     */
    _name?: Element;
    /**
     * Text that describes the entity in more detail.
     */
    description?: string;
    /**
     * Contains extension information for property 'description'.
     */
    _description?: Element;
    /**
     * The query parameters for a query-type entities.
     */
    query?: base64Binary;
    /**
     * Contains extension information for property 'query'.
     */
    _query?: Element;
    /**
     * Tagged value pairs for conveying additional information about the entity.
     */
    detail?: AuditEventEntityDetail[];
}
/**
 * Tagged value pairs for conveying additional information about the entity.
 */
export interface AuditEventEntityDetail {
    /**
     * Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
     */
    id?: string;
    /**
     * Contains extension information for property 'id'.
     */
    _id?: Element;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * The type of extra detail provided in the value.
     */
    type: string;
    /**
     * Contains extension information for property 'type'.
     */
    _type?: Element;
    /**
     * The  value of the extra detail.
     */
    valueString: string;
    /**
     * Contains extension information for property 'valueString'.
     */
    _valueString?: Element;
    /**
     * The  value of the extra detail.
     */
    valueBase64Binary: base64Binary;
    /**
     * Contains extension information for property 'valueBase64Binary'.
     */
    _valueBase64Binary?: Element;
}
/**
 * Base definition for all elements that are defined inside a resource - but not those in a data type.
 */
export interface BackboneElement {
    /**
     * Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
     */
    id?: string;
    /**
     * Contains extension information for property 'id'.
     */
    _id?: Element;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
}
/**
 * Basic is used for handling concepts not yet defined in FHIR, narrative-only resources that don't map to an existing resource, and custom resources not appropriate for inclusion in the FHIR specification.
 */
export interface Basic {
    /**
     * The type of the resource.
     */
    resourceType: string;
    /**
     * The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes.
     */
    id?: id;
    /**
     * Contains extension information for property 'id'.
     */
    _id?: Element;
    /**
     * The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource.
     */
    meta?: Meta;
    /**
     * A reference to a set of rules that were followed when the resource was constructed, and which must be understood when processing the content. Often, this is a reference to an implementation guide that defines the special rules along with other profiles etc.
     */
    implicitRules?: uri;
    /**
     * Contains extension information for property 'implicitRules'.
     */
    _implicitRules?: Element;
    /**
     * The base language in which the resource is written.
     */
    language?: code;
    /**
     * Contains extension information for property 'language'.
     */
    _language?: Element;
    /**
     * A human-readable narrative that contains a summary of the resource and can be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it "clinically safe" for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety.
     */
    text?: Narrative;
    /**
     * These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, and nor can they have their own independent transaction scope.
     */
    contained?: Resource[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * Identifier assigned to the resource for business purposes, outside the context of FHIR.
     */
    identifier?: Identifier[];
    /**
     * Identifies the 'type' of resource - equivalent to the resource name for other resources.
     */
    code: CodeableConcept;
    /**
     * Identifies the patient, practitioner, device or any other resource that is the "focus" of this resource.
     */
    subject?: Reference;
    /**
     * Identifies when the resource was first created.
     */
    created?: date;
    /**
     * Contains extension information for property 'created'.
     */
    _created?: Element;
    /**
     * Indicates who was responsible for creating the resource instance.
     */
    author?: Reference;
}
/**
 * A material substance originating from a biological entity intended to be transplanted or infusedinto another (possibly the same) biological entity.
 */
export interface BiologicallyDerivedProduct {
    /**
     * The type of the resource.
     */
    resourceType: string;
    /**
     * The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes.
     */
    id?: id;
    /**
     * Contains extension information for property 'id'.
     */
    _id?: Element;
    /**
     * The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource.
     */
    meta?: Meta;
    /**
     * A reference to a set of rules that were followed when the resource was constructed, and which must be understood when processing the content. Often, this is a reference to an implementation guide that defines the special rules along with other profiles etc.
     */
    implicitRules?: uri;
    /**
     * Contains extension information for property 'implicitRules'.
     */
    _implicitRules?: Element;
    /**
     * The base language in which the resource is written.
     */
    language?: code;
    /**
     * Contains extension information for property 'language'.
     */
    _language?: Element;
    /**
     * A human-readable narrative that contains a summary of the resource and can be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it "clinically safe" for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety.
     */
    text?: Narrative;
    /**
     * These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, and nor can they have their own independent transaction scope.
     */
    contained?: Resource[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * This records identifiers associated with this biologically derived product instance that are defined by business processes and/or used to refer to it when a direct URL reference to the resource itself is not appropriate (e.g. in CDA documents, or in written / printed documentation).
     */
    identifier?: Identifier[];
    /**
     * Broad category of this product.
     */
    productCategory?: code;
    /**
     * Contains extension information for property 'productCategory'.
     */
    _productCategory?: Element;
    /**
     * A code that identifies the kind of this biologically derived product (SNOMED Ctcode).
     */
    productCode?: CodeableConcept;
    /**
     * Whether the product is currently available.
     */
    status?: code;
    /**
     * Contains extension information for property 'status'.
     */
    _status?: Element;
    /**
     * Procedure request to obtain this biologically derived product.
     */
    request?: Reference[];
    /**
     * Number of discrete units within this product.
     */
    quantity?: integer;
    /**
     * Contains extension information for property 'quantity'.
     */
    _quantity?: Element;
    /**
     * Parent product (if any).
     */
    parent?: Reference[];
    /**
     * How this product was collected.
     */
    collection?: BiologicallyDerivedProductCollection;
    /**
     * Any processing of the product during collection that does not change the fundamental nature of the product. For example adding anti-coagulants during the collection of Peripheral Blood Stem Cells.
     */
    processing?: BiologicallyDerivedProductProcessing[];
    /**
     * Any manipulation of product post-collection that is intended to alter the product.  For example a buffy-coat enrichment or CD8 reduction of Peripheral Blood Stem Cells to make it more suitable for infusion.
     */
    manipulation?: BiologicallyDerivedProductManipulation;
    /**
     * Product storage.
     */
    storage?: BiologicallyDerivedProductStorage[];
}
/**
 * How this product was collected.
 */
export interface BiologicallyDerivedProductCollection {
    /**
     * Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
     */
    id?: string;
    /**
     * Contains extension information for property 'id'.
     */
    _id?: Element;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * Healthcare professional who is performing the collection.
     */
    collector?: Reference;
    /**
     * The patient or entity, such as a hospital or vendor in the case of a processed/manipulated/manufactured product, providing the product.
     */
    source?: Reference;
    /**
     * Time of product collection.
     */
    collectedDateTime?: dateTime;
    /**
     * Contains extension information for property 'collectedDateTime'.
     */
    _collectedDateTime?: Element;
    /**
     * Time of product collection.
     */
    collectedPeriod?: Period;
}
/**
 * Any processing of the product during collection that does not change the fundamental nature of the product. For example adding anti-coagulants during the collection of Peripheral Blood Stem Cells.
 */
export interface BiologicallyDerivedProductProcessing {
    /**
     * Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
     */
    id?: string;
    /**
     * Contains extension information for property 'id'.
     */
    _id?: Element;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * Description of of processing.
     */
    description?: string;
    /**
     * Contains extension information for property 'description'.
     */
    _description?: Element;
    /**
     * Procesing code.
     */
    procedure?: CodeableConcept;
    /**
     * Substance added during processing.
     */
    additive?: Reference;
    /**
     * Time of processing.
     */
    timeDateTime?: dateTime;
    /**
     * Contains extension information for property 'timeDateTime'.
     */
    _timeDateTime?: Element;
    /**
     * Time of processing.
     */
    timePeriod?: Period;
}
/**
 * Any manipulation of product post-collection that is intended to alter the product.  For example a buffy-coat enrichment or CD8 reduction of Peripheral Blood Stem Cells to make it more suitable for infusion.
 */
export interface BiologicallyDerivedProductManipulation {
    /**
     * Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
     */
    id?: string;
    /**
     * Contains extension information for property 'id'.
     */
    _id?: Element;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * Description of manipulation.
     */
    description?: string;
    /**
     * Contains extension information for property 'description'.
     */
    _description?: Element;
    /**
     * Time of manipulation.
     */
    timeDateTime?: dateTime;
    /**
     * Contains extension information for property 'timeDateTime'.
     */
    _timeDateTime?: Element;
    /**
     * Time of manipulation.
     */
    timePeriod?: Period;
}
/**
 * Product storage.
 */
export interface BiologicallyDerivedProductStorage {
    /**
     * Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
     */
    id?: string;
    /**
     * Contains extension information for property 'id'.
     */
    _id?: Element;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * Description of storage.
     */
    description?: string;
    /**
     * Contains extension information for property 'description'.
     */
    _description?: Element;
    /**
     * Storage temperature.
     */
    temperature?: decimal;
    /**
     * Contains extension information for property 'temperature'.
     */
    _temperature?: Element;
    /**
     * Temperature scale used.
     */
    scale?: code;
    /**
     * Contains extension information for property 'scale'.
     */
    _scale?: Element;
    /**
     * Storage timeperiod.
     */
    duration?: Period;
}
/**
 * Record details about an anatomical structure.  This resource may be used when a coded concept does not provide the necessary detail needed for the use case.
 */
export interface BodyStructure {
    /**
     * The type of the resource.
     */
    resourceType: string;
    /**
     * The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes.
     */
    id?: id;
    /**
     * Contains extension information for property 'id'.
     */
    _id?: Element;
    /**
     * The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource.
     */
    meta?: Meta;
    /**
     * A reference to a set of rules that were followed when the resource was constructed, and which must be understood when processing the content. Often, this is a reference to an implementation guide that defines the special rules along with other profiles etc.
     */
    implicitRules?: uri;
    /**
     * Contains extension information for property 'implicitRules'.
     */
    _implicitRules?: Element;
    /**
     * The base language in which the resource is written.
     */
    language?: code;
    /**
     * Contains extension information for property 'language'.
     */
    _language?: Element;
    /**
     * A human-readable narrative that contains a summary of the resource and can be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it "clinically safe" for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety.
     */
    text?: Narrative;
    /**
     * These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, and nor can they have their own independent transaction scope.
     */
    contained?: Resource[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * Identifier for this instance of the anatomical structure.
     */
    identifier?: Identifier[];
    /**
     * Whether this body site is in active use.
     */
    active?: boolean;
    /**
     * Contains extension information for property 'active'.
     */
    _active?: Element;
    /**
     * The kind of structure being represented by the body structure at `BodyStructure.location`.  This can define both normal and abnormal morphologies.
     */
    morphology?: CodeableConcept;
    /**
     * The anatomical location or region of the specimen, lesion, or body structure.
     */
    location?: CodeableConcept;
    /**
     * Qualifier to refine the anatomical location.  These include qualifiers for laterality, relative location, directionality, number, and plane.
     */
    locationQualifier?: CodeableConcept[];
    /**
     * A summary, characterization or explanation of the body structure.
     */
    description?: string;
    /**
     * Contains extension information for property 'description'.
     */
    _description?: Element;
    /**
     * Image or images used to identify a location.
     */
    image?: Attachment[];
    /**
     * The person to which the body site belongs.
     */
    patient: Reference;
}
/**
 * A Capability Statement documents a set of capabilities (behaviors) of a FHIR Server for a particular version of FHIR that may be used as a statement of actual server functionality or a statement of required or desired server implementation.
 */
export interface CapabilityStatement {
    /**
     * The type of the resource.
     */
    resourceType: string;
    /**
     * The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes.
     */
    id?: id;
    /**
     * Contains extension information for property 'id'.
     */
    _id?: Element;
    /**
     * The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource.
     */
    meta?: Meta;
    /**
     * A reference to a set of rules that were followed when the resource was constructed, and which must be understood when processing the content. Often, this is a reference to an implementation guide that defines the special rules along with other profiles etc.
     */
    implicitRules?: uri;
    /**
     * Contains extension information for property 'implicitRules'.
     */
    _implicitRules?: Element;
    /**
     * The base language in which the resource is written.
     */
    language?: code;
    /**
     * Contains extension information for property 'language'.
     */
    _language?: Element;
    /**
     * A human-readable narrative that contains a summary of the resource and can be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it "clinically safe" for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety.
     */
    text?: Narrative;
    /**
     * These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, and nor can they have their own independent transaction scope.
     */
    contained?: Resource[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * An absolute URI that is used to identify this capability statement when it is referenced in a specification, model, design or an instance; also called its canonical identifier. This SHOULD be globally unique and SHOULD be a literal address at which at which an authoritative instance of this capability statement is (or will be) published. This URL can be the target of a canonical reference. It SHALL remain the same when the capability statement is stored on different servers.
     */
    url?: uri;
    /**
     * Contains extension information for property 'url'.
     */
    _url?: Element;
    /**
     * The identifier that is used to identify this version of the capability statement when it is referenced in a specification, model, design or instance. This is an arbitrary value managed by the capability statement author and is not expected to be globally unique. For example, it might be a timestamp (e.g. yyyymmdd) if a managed version is not available. There is also no expectation that versions can be placed in a lexicographical sequence.
     */
    version?: string;
    /**
     * Contains extension information for property 'version'.
     */
    _version?: Element;
    /**
     * A natural language name identifying the capability statement. This name should be usable as an identifier for the module by machine processing applications such as code generation.
     */
    name?: string;
    /**
     * Contains extension information for property 'name'.
     */
    _name?: Element;
    /**
     * A short, descriptive, user-friendly title for the capability statement.
     */
    title?: string;
    /**
     * Contains extension information for property 'title'.
     */
    _title?: Element;
    /**
     * The status of this capability statement. Enables tracking the life-cycle of the content.
     */
    status: code;
    /**
     * Contains extension information for property 'status'.
     */
    _status?: Element;
    /**
     * A Boolean value to indicate that this capability statement is authored for testing purposes (or education/evaluation/marketing) and is not intended to be used for genuine usage.
     */
    experimental?: boolean;
    /**
     * Contains extension information for property 'experimental'.
     */
    _experimental?: Element;
    /**
     * The date  (and optionally time) when the capability statement was published. The date must change when the business version changes and it must change if the status code changes. In addition, it should change when the substantive content of the capability statement changes.
     */
    date: dateTime;
    /**
     * Contains extension information for property 'date'.
     */
    _date?: Element;
    /**
     * The name of the organization or individual that published the capability statement.
     */
    publisher?: string;
    /**
     * Contains extension information for property 'publisher'.
     */
    _publisher?: Element;
    /**
     * Contact details to assist a user in finding and communicating with the publisher.
     */
    contact?: ContactDetail[];
    /**
     * A free text natural language description of the capability statement from a consumer's perspective. Typically, this is used when the capability statement describes a desired rather than an actual solution, for example as a formal expression of requirements as part of an RFP.
     */
    description?: markdown;
    /**
     * Contains extension information for property 'description'.
     */
    _description?: Element;
    /**
     * The content was developed with a focus and intent of supporting the contexts that are listed. These contexts may be general categories (gender, age, ...) or may be references to specific programs (insurance plans, studies, ...) and may be used to assist with indexing and searching for appropriate capability statement instances.
     */
    useContext?: UsageContext[];
    /**
     * A legal or geographic region in which the capability statement is intended to be used.
     */
    jurisdiction?: CodeableConcept[];
    /**
     * Explanation of why this capability statement is needed and why it has been designed as it has.
     */
    purpose?: markdown;
    /**
     * Contains extension information for property 'purpose'.
     */
    _purpose?: Element;
    /**
     * A copyright statement relating to the capability statement and/or its contents. Copyright statements are generally legal restrictions on the use and publishing of the capability statement.
     */
    copyright?: markdown;
    /**
     * Contains extension information for property 'copyright'.
     */
    _copyright?: Element;
    /**
     * The way that this statement is intended to be used, to describe an actual running instance of software, a particular product (kind, not instance of software) or a class of implementation (e.g. a desired purchase).
     */
    kind: code;
    /**
     * Contains extension information for property 'kind'.
     */
    _kind?: Element;
    /**
     * Reference to a canonical URL of another CapabilityStatement that this software implements. This capability statement is a published API description that corresponds to a business service. The server may actually implement a subset of the capability statement it claims to implement, so the capability statement must specify the full capability details.
     */
    instantiates?: canonical[];
    /**
     * Reference to a canonical URL of another CapabilityStatement that this software adds to. The capability statement automatically includes everything in the other statement, and it is not duplicated, though the server may repeat the same resources, interactions and operations to add additional details to them.
     */
    imports?: canonical[];
    /**
     * Software that is covered by this capability statement.  It is used when the capability statement describes the capabilities of a particular software version, independent of an installation.
     */
    software?: CapabilityStatementSoftware;
    /**
     * Identifies a specific implementation instance that is described by the capability statement - i.e. a particular installation, rather than the capabilities of a software program.
     */
    implementation?: CapabilityStatementImplementation;
    /**
     * The version of the FHIR specification that this CapabilityStatement describes (which SHALL be the same as the FHIR version of the CapabilityStatement itself). There is no default value.
     */
    fhirVersion: code;
    /**
     * Contains extension information for property 'fhirVersion'.
     */
    _fhirVersion?: Element;
    /**
     * A list of the formats supported by this implementation using their content types.
     */
    format: code[];
    /**
     * Contains extension information for property 'format'.
     */
    _format?: Element[];
    /**
     * A list of the patch formats supported by this implementation using their content types.
     */
    patchFormat?: code[];
    /**
     * Contains extension information for property 'patchFormat'.
     */
    _patchFormat?: Element[];
    /**
     * A list of implementation guides that the server does (or should) support in their entirety.
     */
    implementationGuide?: canonical[];
    /**
     * A definition of the restful capabilities of the solution, if any.
     */
    rest?: CapabilityStatementRest[];
    /**
     * A description of the messaging capabilities of the solution.
     */
    messaging?: CapabilityStatementMessaging[];
    /**
     * A document definition.
     */
    document?: CapabilityStatementDocument[];
}
/**
 * Software that is covered by this capability statement.  It is used when the capability statement describes the capabilities of a particular software version, independent of an installation.
 */
export interface CapabilityStatementSoftware {
    /**
     * Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
     */
    id?: string;
    /**
     * Contains extension information for property 'id'.
     */
    _id?: Element;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * Name the software is known by.
     */
    name: string;
    /**
     * Contains extension information for property 'name'.
     */
    _name?: Element;
    /**
     * The version identifier for the software covered by this statement.
     */
    version?: string;
    /**
     * Contains extension information for property 'version'.
     */
    _version?: Element;
    /**
     * Date this version of the software was released.
     */
    releaseDate?: dateTime;
    /**
     * Contains extension information for property 'releaseDate'.
     */
    _releaseDate?: Element;
}
/**
 * Identifies a specific implementation instance that is described by the capability statement - i.e. a particular installation, rather than the capabilities of a software program.
 */
export interface CapabilityStatementImplementation {
    /**
     * Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
     */
    id?: string;
    /**
     * Contains extension information for property 'id'.
     */
    _id?: Element;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * Information about the specific installation that this capability statement relates to.
     */
    description: string;
    /**
     * Contains extension information for property 'description'.
     */
    _description?: Element;
    /**
     * An absolute base URL for the implementation.  This forms the base for REST interfaces as well as the mailbox and document interfaces.
     */
    url?: url;
    /**
     * The organization responsible for the management of the instance and oversight of the data on the server at the specified URL.
     */
    custodian?: Reference;
}
/**
 * A definition of the restful capabilities of the solution, if any.
 */
export interface CapabilityStatementRest {
    /**
     * Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
     */
    id?: string;
    /**
     * Contains extension information for property 'id'.
     */
    _id?: Element;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * Identifies whether this portion of the statement is describing the ability to initiate or receive restful operations.
     */
    mode: code;
    /**
     * Contains extension information for property 'mode'.
     */
    _mode?: Element;
    /**
     * Information about the system's restful capabilities that apply across all applications, such as security.
     */
    documentation?: markdown;
    /**
     * Contains extension information for property 'documentation'.
     */
    _documentation?: Element;
    /**
     * Information about security implementation from an interface perspective - what a client needs to know.
     */
    security?: CapabilityStatementRestSecurity;
    /**
     * A specification of the restful capabilities of the solution for a specific resource type.
     */
    resource?: CapabilityStatementRestResource[];
    /**
     * A specification of restful operations supported by the system.
     */
    interaction?: CapabilityStatementRestInteraction[];
    /**
     * Search parameters that are supported for searching all resources for implementations to support and/or make use of - either references to ones defined in the specification, or additional ones defined for/by the implementation.
     */
    searchParam?: CapabilityStatementRestResourceSearchParam[];
    /**
     * Definition of an operation or a named query together with its parameters and their meaning and type.
     */
    operation?: CapabilityStatementRestResourceOperation[];
    /**
     * An absolute URI which is a reference to the definition of a compartment that the system supports. The reference is to a CompartmentDefinition resource by its canonical URL .
     */
    compartment?: canonical[];
}
/**
 * Information about security implementation from an interface perspective - what a client needs to know.
 */
export interface CapabilityStatementRestSecurity {
    /**
     * Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
     */
    id?: string;
    /**
     * Contains extension information for property 'id'.
     */
    _id?: Element;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * Server adds CORS headers when responding to requests - this enables Javascript applications to use the server.
     */
    cors?: boolean;
    /**
     * Contains extension information for property 'cors'.
     */
    _cors?: Element;
    /**
     * Types of security services that are supported/required by the system.
     */
    service?: CodeableConcept[];
    /**
     * General description of how security works.
     */
    description?: markdown;
    /**
     * Contains extension information for property 'description'.
     */
    _description?: Element;
}
/**
 * A specification of the restful capabilities of the solution for a specific resource type.
 */
export interface CapabilityStatementRestResource {
    /**
     * Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
     */
    id?: string;
    /**
     * Contains extension information for property 'id'.
     */
    _id?: Element;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * A type of resource exposed via the restful interface.
     */
    type: code;
    /**
     * Contains extension information for property 'type'.
     */
    _type?: Element;
    /**
     * A specification of the profile that describes the solution's overall support for the resource, including any constraints on cardinality, bindings, lengths or other limitations. See further discussion in [Using Profiles](profiling.html#profile-uses).
     */
    profile?: canonical;
    /**
     * A list of profiles that represent different use cases supported by the system. For a server, "supported by the system" means the system hosts/produces a set of resources that are conformant to a particular profile, and allows clients that use its services to search using this profile and to find appropriate data. For a client, it means the system will search by this profile and process data according to the guidance implicit in the profile. See further discussion in [Using Profiles](profiling.html#profile-uses).
     */
    supportedProfile?: canonical[];
    /**
     * Additional information about the resource type used by the system.
     */
    documentation?: markdown;
    /**
     * Contains extension information for property 'documentation'.
     */
    _documentation?: Element;
    /**
     * Identifies a restful operation supported by the solution.
     */
    interaction?: CapabilityStatementRestResourceInteraction[];
    /**
     * This field is set to no-version to specify that the system does not support (server) or use (client) versioning for this resource type. If this has some other value, the server must at least correctly track and populate the versionId meta-property on resources. If the value is 'versioned-update', then the server supports all the versioning features, including using e-tags for version integrity in the API.
     */
    versioning?: code;
    /**
     * Contains extension information for property 'versioning'.
     */
    _versioning?: Element;
    /**
     * A flag for whether the server is able to return past versions as part of the vRead operation.
     */
    readHistory?: boolean;
    /**
     * Contains extension information for property 'readHistory'.
     */
    _readHistory?: Element;
    /**
     * A flag to indicate that the server allows or needs to allow the client to create new identities on the server (that is, the client PUTs to a location where there is no existing resource). Allowing this operation means that the server allows the client to create new identities on the server.
     */
    updateCreate?: boolean;
    /**
     * Contains extension information for property 'updateCreate'.
     */
    _updateCreate?: Element;
    /**
     * A flag that indicates that the server supports conditional create.
     */
    conditionalCreate?: boolean;
    /**
     * Contains extension information for property 'conditionalCreate'.
     */
    _conditionalCreate?: Element;
    /**
     * A code that indicates how the server supports conditional read.
     */
    conditionalRead?: code;
    /**
     * Contains extension information for property 'conditionalRead'.
     */
    _conditionalRead?: Element;
    /**
     * A flag that indicates that the server supports conditional update.
     */
    conditionalUpdate?: boolean;
    /**
     * Contains extension information for property 'conditionalUpdate'.
     */
    _conditionalUpdate?: Element;
    /**
     * A code that indicates how the server supports conditional delete.
     */
    conditionalDelete?: code;
    /**
     * Contains extension information for property 'conditionalDelete'.
     */
    _conditionalDelete?: Element;
    /**
     * A set of flags that defines how references are supported.
     */
    referencePolicy?: code[];
    /**
     * Contains extension information for property 'referencePolicy'.
     */
    _referencePolicy?: Element[];
    /**
     * A list of _include values supported by the server.
     */
    searchInclude?: string[];
    /**
     * Contains extension information for property 'searchInclude'.
     */
    _searchInclude?: Element[];
    /**
     * A list of _revinclude (reverse include) values supported by the server.
     */
    searchRevInclude?: string[];
    /**
     * Contains extension information for property 'searchRevInclude'.
     */
    _searchRevInclude?: Element[];
    /**
     * Search parameters for implementations to support and/or make use of - either references to ones defined in the specification, or additional ones defined for/by the implementation.
     */
    searchParam?: CapabilityStatementRestResourceSearchParam[];
    /**
     * Definition of an operation or a named query together with its parameters and their meaning and type. Consult the definition of the operation for details about how to invoke the operation, and the parameters.
     */
    operation?: CapabilityStatementRestResourceOperation[];
}
/**
 * Identifies a restful operation supported by the solution.
 */
export interface CapabilityStatementRestResourceInteraction {
    /**
     * Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
     */
    id?: string;
    /**
     * Contains extension information for property 'id'.
     */
    _id?: Element;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * Coded identifier of the operation, supported by the system resource.
     */
    code: code;
    /**
     * Contains extension information for property 'code'.
     */
    _code?: Element;
    /**
     * Guidance specific to the implementation of this operation, such as 'delete is a logical delete' or 'updates are only allowed with version id' or 'creates permitted from pre-authorized certificates only'.
     */
    documentation?: markdown;
    /**
     * Contains extension information for property 'documentation'.
     */
    _documentation?: Element;
}
/**
 * Search parameters for implementations to support and/or make use of - either references to ones defined in the specification, or additional ones defined for/by the implementation.
 */
export interface CapabilityStatementRestResourceSearchParam {
    /**
     * Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
     */
    id?: string;
    /**
     * Contains extension information for property 'id'.
     */
    _id?: Element;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * The name of the search parameter used in the interface.
     */
    name: string;
    /**
     * Contains extension information for property 'name'.
     */
    _name?: Element;
    /**
     * An absolute URI that is a formal reference to where this parameter was first defined, so that a client can be confident of the meaning of the search parameter (a reference to [SearchParameter.url](searchparameter-definitions.html#SearchParameter.url)). This element SHALL be populated if the search parameter refers to a SearchParameter defined by the FHIR core specification or externally defined IGs.
     */
    definition?: canonical;
    /**
     * The type of value a search parameter refers to, and how the content is interpreted.
     */
    type: code;
    /**
     * Contains extension information for property 'type'.
     */
    _type?: Element;
    /**
     * This allows documentation of any distinct behaviors about how the search parameter is used.  For example, text matching algorithms.
     */
    documentation?: markdown;
    /**
     * Contains extension information for property 'documentation'.
     */
    _documentation?: Element;
}
/**
 * Definition of an operation or a named query together with its parameters and their meaning and type. Consult the definition of the operation for details about how to invoke the operation, and the parameters.
 */
export interface CapabilityStatementRestResourceOperation {
    /**
     * Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
     */
    id?: string;
    /**
     * Contains extension information for property 'id'.
     */
    _id?: Element;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * The name of the operation or query. For an operation, this is the name  prefixed with $ and used in the URL. For a query, this is the name used in the _query parameter when the query is called.
     */
    name: string;
    /**
     * Contains extension information for property 'name'.
     */
    _name?: Element;
    /**
     * Where the formal definition can be found. If a server references the base definition of an Operation (i.e. from the specification itself such as ```http://hl7.org/fhir/OperationDefinition/ValueSet-expand```), that means it supports the full capabilities of the operation - e.g. both GET and POST invocation.  If it only supports a subset, it must define its own custom [OperationDefinition](operationdefinition.html#) with a 'base' of the original OperationDefinition.  The custom definition would describe the specific subset of functionality supported.
     */
    definition: canonical;
    /**
     * Documentation that describes anything special about the operation behavior, possibly detailing different behavior for system, type and instance-level invocation of the operation.
     */
    documentation?: markdown;
    /**
     * Contains extension information for property 'documentation'.
     */
    _documentation?: Element;
}
/**
 * A specification of restful operations supported by the system.
 */
export interface CapabilityStatementRestInteraction {
    /**
     * Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
     */
    id?: string;
    /**
     * Contains extension information for property 'id'.
     */
    _id?: Element;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * A coded identifier of the operation, supported by the system.
     */
    code: code;
    /**
     * Contains extension information for property 'code'.
     */
    _code?: Element;
    /**
     * Guidance specific to the implementation of this operation, such as limitations on the kind of transactions allowed, or information about system wide search is implemented.
     */
    documentation?: markdown;
    /**
     * Contains extension information for property 'documentation'.
     */
    _documentation?: Element;
}
/**
 * A description of the messaging capabilities of the solution.
 */
export interface CapabilityStatementMessaging {
    /**
     * Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
     */
    id?: string;
    /**
     * Contains extension information for property 'id'.
     */
    _id?: Element;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * An endpoint (network accessible address) to which messages and/or replies are to be sent.
     */
    endpoint?: CapabilityStatementMessagingEndpoint[];
    /**
     * Length if the receiver's reliable messaging cache in minutes (if a receiver) or how long the cache length on the receiver should be (if a sender).
     */
    reliableCache?: unsignedInt;
    /**
     * Contains extension information for property 'reliableCache'.
     */
    _reliableCache?: Element;
    /**
     * Documentation about the system's messaging capabilities for this endpoint not otherwise documented by the capability statement.  For example, the process for becoming an authorized messaging exchange partner.
     */
    documentation?: markdown;
    /**
     * Contains extension information for property 'documentation'.
     */
    _documentation?: Element;
    /**
     * References to message definitions for messages this system can send or receive.
     */
    supportedMessage?: CapabilityStatementMessagingSupportedMessage[];
}
/**
 * An endpoint (network accessible address) to which messages and/or replies are to be sent.
 */
export interface CapabilityStatementMessagingEndpoint {
    /**
     * Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
     */
    id?: string;
    /**
     * Contains extension information for property 'id'.
     */
    _id?: Element;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * A list of the messaging transport protocol(s) identifiers, supported by this endpoint.
     */
    protocol: Coding;
    /**
     * The network address of the endpoint. For solutions that do not use network addresses for routing, it can be just an identifier.
     */
    address: url;
}
/**
 * References to message definitions for messages this system can send or receive.
 */
export interface CapabilityStatementMessagingSupportedMessage {
    /**
     * Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
     */
    id?: string;
    /**
     * Contains extension information for property 'id'.
     */
    _id?: Element;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * The mode of this event declaration - whether application is sender or receiver.
     */
    mode: code;
    /**
     * Contains extension information for property 'mode'.
     */
    _mode?: Element;
    /**
     * Points to a message definition that identifies the messaging event, message structure, allowed responses, etc.
     */
    definition: canonical;
}
/**
 * A document definition.
 */
export interface CapabilityStatementDocument {
    /**
     * Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
     */
    id?: string;
    /**
     * Contains extension information for property 'id'.
     */
    _id?: Element;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * Mode of this document declaration - whether an application is a producer or consumer.
     */
    mode: code;
    /**
     * Contains extension information for property 'mode'.
     */
    _mode?: Element;
    /**
     * A description of how the application supports or uses the specified document profile.  For example, when documents are created, what action is taken with consumed documents, etc.
     */
    documentation?: markdown;
    /**
     * Contains extension information for property 'documentation'.
     */
    _documentation?: Element;
    /**
     * A profile on the document Bundle that constrains which resources are present, and their contents.
     */
    profile: canonical;
}
/**
 * Describes the intention of how one or more practitioners intend to deliver care for a particular patient, group or community for a period of time, possibly limited to care for a specific condition or set of conditions.
 */
export interface CarePlan {
    /**
     * The type of the resource.
     */
    resourceType: string;
    /**
     * The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes.
     */
    id?: id;
    /**
     * Contains extension information for property 'id'.
     */
    _id?: Element;
    /**
     * The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource.
     */
    meta?: Meta;
    /**
     * A reference to a set of rules that were followed when the resource was constructed, and which must be understood when processing the content. Often, this is a reference to an implementation guide that defines the special rules along with other profiles etc.
     */
    implicitRules?: uri;
    /**
     * Contains extension information for property 'implicitRules'.
     */
    _implicitRules?: Element;
    /**
     * The base language in which the resource is written.
     */
    language?: code;
    /**
     * Contains extension information for property 'language'.
     */
    _language?: Element;
    /**
     * A human-readable narrative that contains a summary of the resource and can be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it "clinically safe" for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety.
     */
    text?: Narrative;
    /**
     * These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, and nor can they have their own independent transaction scope.
     */
    contained?: Resource[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * Business identifiers assigned to this care plan by the performer or other systems which remain constant as the resource is updated and propagates from server to server.
     */
    identifier?: Identifier[];
    /**
     * The URL pointing to a FHIR-defined protocol, guideline, questionnaire or other definition that is adhered to in whole or in part by this CarePlan.
     */
    instantiatesCanonical?: canonical[];
    /**
     * The URL pointing to an externally maintained protocol, guideline, questionnaire or other definition that is adhered to in whole or in part by this CarePlan.
     */
    instantiatesUri?: uri[];
    /**
     * Contains extension information for property 'instantiatesUri'.
     */
    _instantiatesUri?: Element[];
    /**
     * A care plan that is fulfilled in whole or in part by this care plan.
     */
    basedOn?: Reference[];
    /**
     * Completed or terminated care plan whose function is taken by this new care plan.
     */
    replaces?: Reference[];
    /**
     * A larger care plan of which this particular care plan is a component or step.
     */
    partOf?: Reference[];
    /**
     * Indicates whether the plan is currently being acted upon, represents future intentions or is now a historical record.
     */
    status: code;
    /**
     * Contains extension information for property 'status'.
     */
    _status?: Element;
    /**
     * Indicates the level of authority/intentionality associated with the care plan and where the care plan fits into the workflow chain.
     */
    intent: code;
    /**
     * Contains extension information for property 'intent'.
     */
    _intent?: Element;
    /**
     * Identifies what "kind" of plan this is to support differentiation between multiple co-existing plans; e.g. "Home health", "psychiatric", "asthma", "disease management", "wellness plan", etc.
     */
    category?: CodeableConcept[];
    /**
     * Human-friendly name for the care plan.
     */
    title?: string;
    /**
     * Contains extension information for property 'title'.
     */
    _title?: Element;
    /**
     * A description of the scope and nature of the plan.
     */
    description?: string;
    /**
     * Contains extension information for property 'description'.
     */
    _description?: Element;
    /**
     * Identifies the patient or group whose intended care is described by the plan.
     */
    subject: Reference;
    /**
     * The Encounter during which this CarePlan was created or to which the creation of this record is tightly associated.
     */
    encounter?: Reference;
    /**
     * Indicates when the plan did (or is intended to) come into effect and end.
     */
    period?: Period;
    /**
     * Represents when this particular CarePlan record was created in the system, which is often a system-generated date.
     */
    created?: dateTime;
    /**
     * Contains extension information for property 'created'.
     */
    _created?: Element;
    /**
     * When populated, the author is responsible for the care plan.  The care plan is attributed to the author.
     */
    author?: Reference;
    /**
     * Identifies the individual(s) or organization who provided the contents of the care plan.
     */
    contributor?: Reference[];
    /**
     * Identifies all people and organizations who are expected to be involved in the care envisioned by this plan.
     */
    careTeam?: Reference[];
    /**
     * Identifies the conditions/problems/concerns/diagnoses/etc. whose management and/or mitigation are handled by this plan.
     */
    addresses?: Reference[];
    /**
     * Identifies portions of the patient's record that specifically influenced the formation of the plan.  These might include comorbidities, recent procedures, limitations, recent assessments, etc.
     */
    supportingInfo?: Reference[];
    /**
     * Describes the intended objective(s) of carrying out the care plan.
     */
    goal?: Reference[];
    /**
     * Identifies a planned action to occur as part of the plan.  For example, a medication to be used, lab tests to perform, self-monitoring, education, etc.
     */
    activity?: CarePlanActivity[];
    /**
     * General notes about the care plan not covered elsewhere.
     */
    note?: Annotation[];
}
/**
 * Identifies a planned action to occur as part of the plan.  For example, a medication to be used, lab tests to perform, self-monitoring, education, etc.
 */
export interface CarePlanActivity {
    /**
     * Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
     */
    id?: string;
    /**
     * Contains extension information for property 'id'.
     */
    _id?: Element;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * Identifies the outcome at the point when the status of the activity is assessed.  For example, the outcome of an education activity could be patient understands (or not).
     */
    outcomeCodeableConcept?: CodeableConcept[];
    /**
     * Details of the outcome or action resulting from the activity.  The reference to an "event" resource, such as Procedure or Encounter or Observation, is the result/outcome of the activity itself.  The activity can be conveyed using CarePlan.activity.detail OR using the CarePlan.activity.reference (a reference to a “request” resource).
     */
    outcomeReference?: Reference[];
    /**
     * Notes about the adherence/status/progress of the activity.
     */
    progress?: Annotation[];
    /**
     * The details of the proposed activity represented in a specific resource.
     */
    reference?: Reference;
    /**
     * A simple summary of a planned activity suitable for a general care plan system (e.g. form driven) that doesn't know about specific resources such as procedure etc.
     */
    detail?: CarePlanActivityDetail;
}
/**
 * A simple summary of a planned activity suitable for a general care plan system (e.g. form driven) that doesn't know about specific resources such as procedure etc.
 */
export interface CarePlanActivityDetail {
    /**
     * Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
     */
    id?: string;
    /**
     * Contains extension information for property 'id'.
     */
    _id?: Element;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * A description of the kind of resource the in-line definition of a care plan activity is representing.  The CarePlan.activity.detail is an in-line definition when a resource is not referenced using CarePlan.activity.reference.  For example, a MedicationRequest, a ServiceRequest, or a CommunicationRequest.
     */
    kind?: code;
    /**
     * Contains extension information for property 'kind'.
     */
    _kind?: Element;
    /**
     * The URL pointing to a FHIR-defined protocol, guideline, questionnaire or other definition that is adhered to in whole or in part by this CarePlan activity.
     */
    instantiatesCanonical?: canonical[];
    /**
     * The URL pointing to an externally maintained protocol, guideline, questionnaire or other definition that is adhered to in whole or in part by this CarePlan activity.
     */
    instantiatesUri?: uri[];
    /**
     * Contains extension information for property 'instantiatesUri'.
     */
    _instantiatesUri?: Element[];
    /**
     * Detailed description of the type of planned activity; e.g. what lab test, what procedure, what kind of encounter.
     */
    code?: CodeableConcept;
    /**
     * Provides the rationale that drove the inclusion of this particular activity as part of the plan or the reason why the activity was prohibited.
     */
    reasonCode?: CodeableConcept[];
    /**
     * Indicates another resource, such as the health condition(s), whose existence justifies this request and drove the inclusion of this particular activity as part of the plan.
     */
    reasonReference?: Reference[];
    /**
     * Internal reference that identifies the goals that this activity is intended to contribute towards meeting.
     */
    goal?: Reference[];
    /**
     * Identifies what progress is being made for the specific activity.
     */
    status: code;
    /**
     * Contains extension information for property 'status'.
     */
    _status?: Element;
    /**
     * Provides reason why the activity isn't yet started, is on hold, was cancelled, etc.
     */
    statusReason?: CodeableConcept;
    /**
     * If true, indicates that the described activity is one that must NOT be engaged in when following the plan.  If false, or missing, indicates that the described activity is one that should be engaged in when following the plan.
     */
    doNotPerform?: boolean;
    /**
     * Contains extension information for property 'doNotPerform'.
     */
    _doNotPerform?: Element;
    /**
     * The period, timing or frequency upon which the described activity is to occur.
     */
    scheduledTiming?: Timing;
    /**
     * The period, timing or frequency upon which the described activity is to occur.
     */
    scheduledPeriod?: Period;
    /**
     * The period, timing or frequency upon which the described activity is to occur.
     */
    scheduledString?: string;
    /**
     * Contains extension information for property 'scheduledString'.
     */
    _scheduledString?: Element;
    /**
     * Identifies the facility where the activity will occur; e.g. home, hospital, specific clinic, etc.
     */
    location?: Reference;
    /**
     * Identifies who's expected to be involved in the activity.
     */
    performer?: Reference[];
    /**
     * Identifies the food, drug or other product to be consumed or supplied in the activity.
     */
    productCodeableConcept?: CodeableConcept;
    /**
     * Identifies the food, drug or other product to be consumed or supplied in the activity.
     */
    productReference?: Reference;
    /**
     * Identifies the quantity expected to be consumed in a given day.
     */
    dailyAmount?: Quantity;
    /**
     * Identifies the quantity expected to be supplied, administered or consumed by the subject.
     */
    quantity?: Quantity;
    /**
     * This provides a textual description of constraints on the intended activity occurrence, including relation to other activities.  It may also include objectives, pre-conditions and end-conditions.  Finally, it may convey specifics about the activity such as body site, method, route, etc.
     */
    description?: string;
    /**
     * Contains extension information for property 'description'.
     */
    _description?: Element;
}
/**
 * The Care Team includes all the people and organizations who plan to participate in the coordination and delivery of care for a patient.
 */
export interface CareTeam {
    /**
     * The type of the resource.
     */
    resourceType: string;
    /**
     * The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes.
     */
    id?: id;
    /**
     * Contains extension information for property 'id'.
     */
    _id?: Element;
    /**
     * The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource.
     */
    meta?: Meta;
    /**
     * A reference to a set of rules that were followed when the resource was constructed, and which must be understood when processing the content. Often, this is a reference to an implementation guide that defines the special rules along with other profiles etc.
     */
    implicitRules?: uri;
    /**
     * Contains extension information for property 'implicitRules'.
     */
    _implicitRules?: Element;
    /**
     * The base language in which the resource is written.
     */
    language?: code;
    /**
     * Contains extension information for property 'language'.
     */
    _language?: Element;
    /**
     * A human-readable narrative that contains a summary of the resource and can be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it "clinically safe" for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety.
     */
    text?: Narrative;
    /**
     * These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, and nor can they have their own independent transaction scope.
     */
    contained?: Resource[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * Business identifiers assigned to this care team by the performer or other systems which remain constant as the resource is updated and propagates from server to server.
     */
    identifier?: Identifier[];
    /**
     * Indicates the current state of the care team.
     */
    status?: code;
    /**
     * Contains extension information for property 'status'.
     */
    _status?: Element;
    /**
     * Identifies what kind of team.  This is to support differentiation between multiple co-existing teams, such as care plan team, episode of care team, longitudinal care team.
     */
    category?: CodeableConcept[];
    /**
     * A label for human use intended to distinguish like teams.  E.g. the "red" vs. "green" trauma teams.
     */
    name?: string;
    /**
     * Contains extension information for property 'name'.
     */
    _name?: Element;
    /**
     * Identifies the patient or group whose intended care is handled by the team.
     */
    subject?: Reference;
    /**
     * The Encounter during which this CareTeam was created or to which the creation of this record is tightly associated.
     */
    encounter?: Reference;
    /**
     * Indicates when the team did (or is intended to) come into effect and end.
     */
    period?: Period;
    /**
     * Identifies all people and organizations who are expected to be involved in the care team.
     */
    participant?: CareTeamParticipant[];
    /**
     * Describes why the care team exists.
     */
    reasonCode?: CodeableConcept[];
    /**
     * Condition(s) that this care team addresses.
     */
    reasonReference?: Reference[];
    /**
     * The organization responsible for the care team.
     */
    managingOrganization?: Reference[];
    /**
     * A central contact detail for the care team (that applies to all members).
     */
    telecom?: ContactPoint[];
    /**
     * Comments made about the CareTeam.
     */
    note?: Annotation[];
}
/**
 * Identifies all people and organizations who are expected to be involved in the care team.
 */
export interface CareTeamParticipant {
    /**
     * Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
     */
    id?: string;
    /**
     * Contains extension information for property 'id'.
     */
    _id?: Element;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * Indicates specific responsibility of an individual within the care team, such as "Primary care physician", "Trained social worker counselor", "Caregiver", etc.
     */
    role?: CodeableConcept[];
    /**
     * The specific person or organization who is participating/expected to participate in the care team.
     */
    member?: Reference;
    /**
     * The organization of the practitioner.
     */
    onBehalfOf?: Reference;
    /**
     * Indicates when the specific member or organization did (or is intended to) come into effect and end.
     */
    period?: Period;
}
/**
 * Catalog entries are wrappers that contextualize items included in a catalog.
 */
export interface CatalogEntry {
    /**
     * The type of the resource.
     */
    resourceType: string;
    /**
     * The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes.
     */
    id?: id;
    /**
     * Contains extension information for property 'id'.
     */
    _id?: Element;
    /**
     * The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource.
     */
    meta?: Meta;
    /**
     * A reference to a set of rules that were followed when the resource was constructed, and which must be understood when processing the content. Often, this is a reference to an implementation guide that defines the special rules along with other profiles etc.
     */
    implicitRules?: uri;
    /**
     * Contains extension information for property 'implicitRules'.
     */
    _implicitRules?: Element;
    /**
     * The base language in which the resource is written.
     */
    language?: code;
    /**
     * Contains extension information for property 'language'.
     */
    _language?: Element;
    /**
     * A human-readable narrative that contains a summary of the resource and can be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it "clinically safe" for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety.
     */
    text?: Narrative;
    /**
     * These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, and nor can they have their own independent transaction scope.
     */
    contained?: Resource[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * Used in supporting different identifiers for the same product, e.g. manufacturer code and retailer code.
     */
    identifier?: Identifier[];
    /**
     * The type of item - medication, device, service, protocol or other.
     */
    type?: CodeableConcept;
    /**
     * Whether the entry represents an orderable item.
     */
    orderable: boolean;
    /**
     * Contains extension information for property 'orderable'.
     */
    _orderable?: Element;
    /**
     * The item in a catalog or definition.
     */
    referencedItem: Reference;
    /**
     * Used in supporting related concepts, e.g. NDC to RxNorm.
     */
    additionalIdentifier?: Identifier[];
    /**
     * Classes of devices, or ATC for medication.
     */
    classification?: CodeableConcept[];
    /**
     * Used to support catalog exchange even for unsupported products, e.g. getting list of medications even if not prescribable.
     */
    status?: code;
    /**
     * Contains extension information for property 'status'.
     */
    _status?: Element;
    /**
     * The time period in which this catalog entry is expected to be active.
     */
    validityPeriod?: Period;
    /**
     * The date until which this catalog entry is expected to be active.
     */
    validTo?: dateTime;
    /**
     * Contains extension information for property 'validTo'.
     */
    _validTo?: Element;
    /**
     * Typically date of issue is different from the beginning of the validity. This can be used to see when an item was last updated.
     */
    lastUpdated?: dateTime;
    /**
     * Contains extension information for property 'lastUpdated'.
     */
    _lastUpdated?: Element;
    /**
     * Used for examplefor Out of Formulary, or any specifics.
     */
    additionalCharacteristic?: CodeableConcept[];
    /**
     * User for example for ATC classification, or.
     */
    additionalClassification?: CodeableConcept[];
    /**
     * Used for example, to point to a substance, or to a device used to administer a medication.
     */
    relatedEntry?: CatalogEntryRelatedEntry[];
}
/**
 * Used for example, to point to a substance, or to a device used to administer a medication.
 */
export interface CatalogEntryRelatedEntry {
    /**
     * Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
     */
    id?: string;
    /**
     * Contains extension information for property 'id'.
     */
    _id?: Element;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * The type of relation to the related item: child, parent, packageContent, containerPackage, usedIn, uses, requires, etc.
     */
    relationtype: code;
    /**
     * Contains extension information for property 'relationtype'.
     */
    _relationtype?: Element;
    /**
     * The reference to the related item.
     */
    item: Reference;
}
/**
 * The resource ChargeItem describes the provision of healthcare provider products for a certain patient, therefore referring not only to the product, but containing in addition details of the provision, like date, time, amounts and participating organizations and persons. Main Usage of the ChargeItem is to enable the billing process and internal cost allocation.
 */
export interface ChargeItem {
    /**
     * The type of the resource.
     */
    resourceType: string;
    /**
     * The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes.
     */
    id?: id;
    /**
     * Contains extension information for property 'id'.
     */
    _id?: Element;
    /**
     * The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource.
     */
    meta?: Meta;
    /**
     * A reference to a set of rules that were followed when the resource was constructed, and which must be understood when processing the content. Often, this is a reference to an implementation guide that defines the special rules along with other profiles etc.
     */
    implicitRules?: uri;
    /**
     * Contains extension information for property 'implicitRules'.
     */
    _implicitRules?: Element;
    /**
     * The base language in which the resource is written.
     */
    language?: code;
    /**
     * Contains extension information for property 'language'.
     */
    _language?: Element;
    /**
     * A human-readable narrative that contains a summary of the resource and can be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it "clinically safe" for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety.
     */
    text?: Narrative;
    /**
     * These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, and nor can they have their own independent transaction scope.
     */
    contained?: Resource[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * Identifiers assigned to this event performer or other systems.
     */
    identifier?: Identifier[];
    /**
     * References the (external) source of pricing information, rules of application for the code this ChargeItem uses.
     */
    definitionUri?: uri[];
    /**
     * Contains extension information for property 'definitionUri'.
     */
    _definitionUri?: Element[];
    /**
     * References the source of pricing information, rules of application for the code this ChargeItem uses.
     */
    definitionCanonical?: canonical[];
    /**
     * The current state of the ChargeItem.
     */
    status: code;
    /**
     * Contains extension information for property 'status'.
     */
    _status?: Element;
    /**
     * ChargeItems can be grouped to larger ChargeItems covering the whole set.
     */
    partOf?: Reference[];
    /**
     * A code that identifies the charge, like a billing code.
     */
    code: CodeableConcept;
    /**
     * The individual or set of individuals the action is being or was performed on.
     */
    subject: Reference;
    /**
     * The encounter or episode of care that establishes the context for this event.
     */
    context?: Reference;
    /**
     * Date/time(s) or duration when the charged service was applied.
     */
    occurrenceDateTime?: dateTime;
    /**
     * Contains extension information for property 'occurrenceDateTime'.
     */
    _occurrenceDateTime?: Element;
    /**
     * Date/time(s) or duration when the charged service was applied.
     */
    occurrencePeriod?: Period;
    /**
     * Date/time(s) or duration when the charged service was applied.
     */
    occurrenceTiming?: Timing;
    /**
     * Indicates who or what performed or participated in the charged service.
     */
    performer?: ChargeItemPerformer[];
    /**
     * The organization requesting the service.
     */
    performingOrganization?: Reference;
    /**
     * The organization performing the service.
     */
    requestingOrganization?: Reference;
    /**
     * The financial cost center permits the tracking of charge attribution.
     */
    costCenter?: Reference;
    /**
     * Quantity of which the charge item has been serviced.
     */
    quantity?: Quantity;
    /**
     * The anatomical location where the related service has been applied.
     */
    bodysite?: CodeableConcept[];
    /**
     * Factor overriding the factor determined by the rules associated with the code.
     */
    factorOverride?: decimal;
    /**
     * Contains extension information for property 'factorOverride'.
     */
    _factorOverride?: Element;
    /**
     * Total price of the charge overriding the list price associated with the code.
     */
    priceOverride?: Money;
    /**
     * If the list price or the rule-based factor associated with the code is overridden, this attribute can capture a text to indicate the  reason for this action.
     */
    overrideReason?: string;
    /**
     * Contains extension information for property 'overrideReason'.
     */
    _overrideReason?: Element;
    /**
     * The device, practitioner, etc. who entered the charge item.
     */
    enterer?: Reference;
    /**
     * Date the charge item was entered.
     */
    enteredDate?: dateTime;
    /**
     * Contains extension information for property 'enteredDate'.
     */
    _enteredDate?: Element;
    /**
     * Describes why the event occurred in coded or textual form.
     */
    reason?: CodeableConcept[];
    /**
     * Indicated the rendered service that caused this charge.
     */
    service?: Reference[];
    /**
     * Identifies the device, food, drug or other product being charged either by type code or reference to an instance.
     */
    productReference?: Reference;
    /**
     * Identifies the device, food, drug or other product being charged either by type code or reference to an instance.
     */
    productCodeableConcept?: CodeableConcept;
    /**
     * Account into which this ChargeItems belongs.
     */
    account?: Reference[];
    /**
     * Comments made about the event by the performer, subject or other participants.
     */
    note?: Annotation[];
    /**
     * Further information supporting this charge.
     */
    supportingInformation?: Reference[];
}
/**
 * Indicates who or what performed or participated in the charged service.
 */
export interface ChargeItemPerformer {
    /**
     * Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
     */
    id?: string;
    /**
     * Contains extension information for property 'id'.
     */
    _id?: Element;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * Describes the type of performance or participation(e.g. primary surgeon, anesthesiologiest, etc.).
     */
    function?: CodeableConcept;
    /**
     * The device, practitioner, etc. who performed or participated in the service.
     */
    actor: Reference;
}
/**
 * The ChargeItemDefinition resource provides the properties that apply to the (billing) codes necessary to calculate costs and prices. The properties may differ largely depending on type and realm, therefore this resource gives only a rough structure and requires profiling for each type of billing code system.
 */
export interface ChargeItemDefinition {
    /**
     * The type of the resource.
     */
    resourceType: string;
    /**
     * The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes.
     */
    id?: id;
    /**
     * Contains extension information for property 'id'.
     */
    _id?: Element;
    /**
     * The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource.
     */
    meta?: Meta;
    /**
     * A reference to a set of rules that were followed when the resource was constructed, and which must be understood when processing the content. Often, this is a reference to an implementation guide that defines the special rules along with other profiles etc.
     */
    implicitRules?: uri;
    /**
     * Contains extension information for property 'implicitRules'.
     */
    _implicitRules?: Element;
    /**
     * The base language in which the resource is written.
     */
    language?: code;
    /**
     * Contains extension information for property 'language'.
     */
    _language?: Element;
    /**
     * A human-readable narrative that contains a summary of the resource and can be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it "clinically safe" for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety.
     */
    text?: Narrative;
    /**
     * These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, and nor can they have their own independent transaction scope.
     */
    contained?: Resource[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * An absolute URI that is used to identify this charge item definition when it is referenced in a specification, model, design or an instance; also called its canonical identifier. This SHOULD be globally unique and SHOULD be a literal address at which at which an authoritative instance of this charge item definition is (or will be) published. This URL can be the target of a canonical reference. It SHALL remain the same when the charge item definition is stored on different servers.
     */
    url: uri;
    /**
     * Contains extension information for property 'url'.
     */
    _url?: Element;
    /**
     * A formal identifier that is used to identify this charge item definition when it is represented in other formats, or referenced in a specification, model, design or an instance.
     */
    identifier?: Identifier[];
    /**
     * The identifier that is used to identify this version of the charge item definition when it is referenced in a specification, model, design or instance. This is an arbitrary value managed by the charge item definition author and is not expected to be globally unique. For example, it might be a timestamp (e.g. yyyymmdd) if a managed version is not available. There is also no expectation that versions can be placed in a lexicographical sequence. To provide a version consistent with the Decision Support Service specification, use the format Major.Minor.Revision (e.g. 1.0.0). For more information on versioning knowledge assets, refer to the Decision Support Service specification. Note that a version is required for non-experimental active assets.
     */
    version?: string;
    /**
     * Contains extension information for property 'version'.
     */
    _version?: Element;
    /**
     * A short, descriptive, user-friendly title for the charge item definition.
     */
    title?: string;
    /**
     * Contains extension information for property 'title'.
     */
    _title?: Element;
    /**
     * The URL pointing to an externally-defined charge item definition that is adhered to in whole or in part by this definition.
     */
    derivedFromUri?: uri[];
    /**
     * Contains extension information for property 'derivedFromUri'.
     */
    _derivedFromUri?: Element[];
    /**
     * A larger definition of which this particular definition is a component or step.
     */
    partOf?: canonical[];
    /**
     * As new versions of a protocol or guideline are defined, allows identification of what versions are replaced by a new instance.
     */
    replaces?: canonical[];
    /**
     * The current state of the ChargeItemDefinition.
     */
    status: code;
    /**
     * Contains extension information for property 'status'.
     */
    _status?: Element;
    /**
     * A Boolean value to indicate that this charge item definition is authored for testing purposes (or education/evaluation/marketing) and is not intended to be used for genuine usage.
     */
    experimental?: boolean;
    /**
     * Contains extension information for property 'experimental'.
     */
    _experimental?: Element;
    /**
     * The date  (and optionally time) when the charge item definition was published. The date must change when the business version changes and it must change if the status code changes. In addition, it should change when the substantive content of the charge item definition changes.
     */
    date?: dateTime;
    /**
     * Contains extension information for property 'date'.
     */
    _date?: Element;
    /**
     * The name of the organization or individual that published the charge item definition.
     */
    publisher?: string;
    /**
     * Contains extension information for property 'publisher'.
     */
    _publisher?: Element;
    /**
     * Contact details to assist a user in finding and communicating with the publisher.
     */
    contact?: ContactDetail[];
    /**
     * A free text natural language description of the charge item definition from a consumer's perspective.
     */
    description?: markdown;
    /**
     * Contains extension information for property 'description'.
     */
    _description?: Element;
    /**
     * The content was developed with a focus and intent of supporting the contexts that are listed. These contexts may be general categories (gender, age, ...) or may be references to specific programs (insurance plans, studies, ...) and may be used to assist with indexing and searching for appropriate charge item definition instances.
     */
    useContext?: UsageContext[];
    /**
     * A legal or geographic region in which the charge item definition is intended to be used.
     */
    jurisdiction?: CodeableConcept[];
    /**
     * A copyright statement relating to the charge item definition and/or its contents. Copyright statements are generally legal restrictions on the use and publishing of the charge item definition.
     */
    copyright?: markdown;
    /**
     * Contains extension information for property 'copyright'.
     */
    _copyright?: Element;
    /**
     * The date on which the resource content was approved by the publisher. Approval happens once when the content is officially approved for usage.
     */
    approvalDate?: date;
    /**
     * Contains extension information for property 'approvalDate'.
     */
    _approvalDate?: Element;
    /**
     * The date on which the resource content was last reviewed. Review happens periodically after approval but does not change the original approval date.
     */
    lastReviewDate?: date;
    /**
     * Contains extension information for property 'lastReviewDate'.
     */
    _lastReviewDate?: Element;
    /**
     * The period during which the charge item definition content was or is planned to be in active use.
     */
    effectivePeriod?: Period;
    /**
     * The defined billing details in this resource pertain to the given billing code.
     */
    code?: CodeableConcept;
    /**
     * The defined billing details in this resource pertain to the given product instance(s).
     */
    instance?: Reference[];
    /**
     * Expressions that describe applicability criteria for the billing code.
     */
    applicability?: ChargeItemDefinitionApplicability[];
    /**
     * Group of properties which are applicable under the same conditions. If no applicability rules are established for the group, then all properties always apply.
     */
    propertyGroup?: ChargeItemDefinitionPropertyGroup[];
}
/**
 * Expressions that describe applicability criteria for the billing code.
 */
export interface ChargeItemDefinitionApplicability {
    /**
     * Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
     */
    id?: string;
    /**
     * Contains extension information for property 'id'.
     */
    _id?: Element;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * A brief, natural language description of the condition that effectively communicates the intended semantics.
     */
    description?: string;
    /**
     * Contains extension information for property 'description'.
     */
    _description?: Element;
    /**
     * The media type of the language for the expression, e.g. "text/cql" for Clinical Query Language expressions or "text/fhirpath" for FHIRPath expressions.
     */
    language?: string;
    /**
     * Contains extension information for property 'language'.
     */
    _language?: Element;
    /**
     * An expression that returns true or false, indicating whether the condition is satisfied. When using FHIRPath expressions, the %context environment variable must be replaced at runtime with the ChargeItem resource to which this definition is applied.
     */
    expression?: string;
    /**
     * Contains extension information for property 'expression'.
     */
    _expression?: Element;
}
/**
 * Group of properties which are applicable under the same conditions. If no applicability rules are established for the group, then all properties always apply.
 */
export interface ChargeItemDefinitionPropertyGroup {
    /**
     * Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
     */
    id?: string;
    /**
     * Contains extension information for property 'id'.
     */
    _id?: Element;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * Expressions that describe applicability criteria for the priceComponent.
     */
    applicability?: ChargeItemDefinitionApplicability[];
    /**
     * The price for a ChargeItem may be calculated as a base price with surcharges/deductions that apply in certain conditions. A ChargeItemDefinition resource that defines the prices, factors and conditions that apply to a billing code is currently under development. The priceComponent element can be used to offer transparency to the recipient of the Invoice of how the prices have been calculated.
     */
    priceComponent?: ChargeItemDefinitionPropertyGroupPriceComponent[];
}
/**
 * The price for a ChargeItem may be calculated as a base price with surcharges/deductions that apply in certain conditions. A ChargeItemDefinition resource that defines the prices, factors and conditions that apply to a billing code is currently under development. The priceComponent element can be used to offer transparency to the recipient of the Invoice of how the prices have been calculated.
 */
export interface ChargeItemDefinitionPropertyGroupPriceComponent {
    /**
     * Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
     */
    id?: string;
    /**
     * Contains extension information for property 'id'.
     */
    _id?: Element;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * This code identifies the type of the component.
     */
    type: code;
    /**
     * Contains extension information for property 'type'.
     */
    _type?: Element;
    /**
     * A code that identifies the component. Codes may be used to differentiate between kinds of taxes, surcharges, discounts etc.
     */
    code?: CodeableConcept;
    /**
     * The factor that has been applied on the base price for calculating this component.
     */
    factor?: decimal;
    /**
     * Contains extension information for property 'factor'.
     */
    _factor?: Element;
    /**
     * The amount calculated for this component.
     */
    amount?: Money;
}
/**
 * A provider issued list of professional services and products which have been provided, or are to be provided, to a patient which is sent to an insurer for reimbursement.
 */
export interface Claim {
    /**
     * The type of the resource.
     */
    resourceType: string;
    /**
     * The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes.
     */
    id?: id;
    /**
     * Contains extension information for property 'id'.
     */
    _id?: Element;
    /**
     * The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource.
     */
    meta?: Meta;
    /**
     * A reference to a set of rules that were followed when the resource was constructed, and which must be understood when processing the content. Often, this is a reference to an implementation guide that defines the special rules along with other profiles etc.
     */
    implicitRules?: uri;
    /**
     * Contains extension information for property 'implicitRules'.
     */
    _implicitRules?: Element;
    /**
     * The base language in which the resource is written.
     */
    language?: code;
    /**
     * Contains extension information for property 'language'.
     */
    _language?: Element;
    /**
     * A human-readable narrative that contains a summary of the resource and can be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it "clinically safe" for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety.
     */
    text?: Narrative;
    /**
     * These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, and nor can they have their own independent transaction scope.
     */
    contained?: Resource[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * A unique identifier assigned to this claim.
     */
    identifier?: Identifier[];
    /**
     * The status of the resource instance.
     */
    status: code;
    /**
     * Contains extension information for property 'status'.
     */
    _status?: Element;
    /**
     * The category of claim, e.g. oral, pharmacy, vision, institutional, professional.
     */
    type: CodeableConcept;
    /**
     * A finer grained suite of claim type codes which may convey additional information such as Inpatient vs Outpatient and/or a specialty service.
     */
    subType?: CodeableConcept;
    /**
     * A code to indicate whether the nature of the request is: to request adjudication of products and services previously rendered; or requesting authorization and adjudication for provision in the future; or requesting the non-binding adjudication of the listed products and services which could be provided in the future.
     */
    use: code;
    /**
     * Contains extension information for property 'use'.
     */
    _use?: Element;
    /**
     * The party to whom the professional services and/or products have been supplied or are being considered and for whom actual or forecast reimbursement is sought.
     */
    patient: Reference;
    /**
     * The period for which charges are being submitted.
     */
    billablePeriod?: Period;
    /**
     * The date this resource was created.
     */
    created: dateTime;
    /**
     * Contains extension information for property 'created'.
     */
    _created?: Element;
    /**
     * Individual who created the claim, predetermination or preauthorization.
     */
    enterer?: Reference;
    /**
     * The Insurer who is target of the request.
     */
    insurer?: Reference;
    /**
     * The provider which is responsible for the claim, predetermination or preauthorization.
     */
    provider: Reference;
    /**
     * The provider-required urgency of processing the request. Typical values include: stat, routine deferred.
     */
    priority: CodeableConcept;
    /**
     * A code to indicate whether and for whom funds are to be reserved for future claims.
     */
    fundsReserve?: CodeableConcept;
    /**
     * Other claims which are related to this claim such as prior submissions or claims for related services or for the same event.
     */
    related?: ClaimRelated[];
    /**
     * Prescription to support the dispensing of pharmacy, device or vision products.
     */
    prescription?: Reference;
    /**
     * Original prescription which has been superseded by this prescription to support the dispensing of pharmacy services, medications or products.
     */
    originalPrescription?: Reference;
    /**
     * The party to be reimbursed for cost of the products and services according to the terms of the policy.
     */
    payee?: ClaimPayee;
    /**
     * A reference to a referral resource.
     */
    referral?: Reference;
    /**
     * Facility where the services were provided.
     */
    facility?: Reference;
    /**
     * The members of the team who provided the products and services.
     */
    careTeam?: ClaimCareTeam[];
    /**
     * Additional information codes regarding exceptions, special considerations, the condition, situation, prior or concurrent issues.
     */
    supportingInfo?: ClaimSupportingInfo[];
    /**
     * Information about diagnoses relevant to the claim items.
     */
    diagnosis?: ClaimDiagnosis[];
    /**
     * Procedures performed on the patient relevant to the billing items with the claim.
     */
    procedure?: ClaimProcedure[];
    /**
     * Financial instruments for reimbursement for the health care products and services specified on the claim.
     */
    insurance: ClaimInsurance[];
    /**
     * Details of an accident which resulted in injuries which required the products and services listed in the claim.
     */
    accident?: ClaimAccident;
    /**
     * A claim line. Either a simple  product or service or a 'group' of details which can each be a simple items or groups of sub-details.
     */
    item?: ClaimItem[];
    /**
     * The total value of the all the items in the claim.
     */
    total?: Money;
}
/**
 * Other claims which are related to this claim such as prior submissions or claims for related services or for the same event.
 */
export interface ClaimRelated {
    /**
     * Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
     */
    id?: string;
    /**
     * Contains extension information for property 'id'.
     */
    _id?: Element;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * Reference to a related claim.
     */
    claim?: Reference;
    /**
     * A code to convey how the claims are related.
     */
    relationship?: CodeableConcept;
    /**
     * An alternate organizational reference to the case or file to which this particular claim pertains.
     */
    reference?: Identifier;
}
/**
 * The party to be reimbursed for cost of the products and services according to the terms of the policy.
 */
export interface ClaimPayee {
    /**
     * Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
     */
    id?: string;
    /**
     * Contains extension information for property 'id'.
     */
    _id?: Element;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * Type of Party to be reimbursed: subscriber, provider, other.
     */
    type: CodeableConcept;
    /**
     * Reference to the individual or organization to whom any payment will be made.
     */
    party?: Reference;
}
/**
 * The members of the team who provided the products and services.
 */
export interface ClaimCareTeam {
    /**
     * Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
     */
    id?: string;
    /**
     * Contains extension information for property 'id'.
     */
    _id?: Element;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * A number to uniquely identify care team entries.
     */
    sequence: positiveInt;
    /**
     * Contains extension information for property 'sequence'.
     */
    _sequence?: Element;
    /**
     * Member of the team who provided the product or service.
     */
    provider: Reference;
    /**
     * The party who is billing and/or responsible for the claimed products or services.
     */
    responsible?: boolean;
    /**
     * Contains extension information for property 'responsible'.
     */
    _responsible?: Element;
    /**
     * The lead, assisting or supervising practitioner and their discipline if a multidisciplinary team.
     */
    role?: CodeableConcept;
    /**
     * The qualification of the practitioner which is applicable for this service.
     */
    qualification?: CodeableConcept;
}
/**
 * Additional information codes regarding exceptions, special considerations, the condition, situation, prior or concurrent issues.
 */
export interface ClaimSupportingInfo {
    /**
     * Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
     */
    id?: string;
    /**
     * Contains extension information for property 'id'.
     */
    _id?: Element;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * A number to uniquely identify supporting information entries.
     */
    sequence: positiveInt;
    /**
     * Contains extension information for property 'sequence'.
     */
    _sequence?: Element;
    /**
     * The general class of the information supplied: information; exception; accident, employment; onset, etc.
     */
    category: CodeableConcept;
    /**
     * System and code pertaining to the specific information regarding special conditions relating to the setting, treatment or patient  for which care is sought.
     */
    code?: CodeableConcept;
    /**
     * The date when or period to which this information refers.
     */
    timingDate?: date;
    /**
     * Contains extension information for property 'timingDate'.
     */
    _timingDate?: Element;
    /**
     * The date when or period to which this information refers.
     */
    timingPeriod?: Period;
    /**
     * Additional data or information such as resources, documents, images etc. including references to the data or the actual inclusion of the data.
     */
    valueBoolean?: boolean;
    /**
     * Contains extension information for property 'valueBoolean'.
     */
    _valueBoolean?: Element;
    /**
     * Additional data or information such as resources, documents, images etc. including references to the data or the actual inclusion of the data.
     */
    valueString?: string;
    /**
     * Contains extension information for property 'valueString'.
     */
    _valueString?: Element;
    /**
     * Additional data or information such as resources, documents, images etc. including references to the data or the actual inclusion of the data.
     */
    valueQuantity?: Quantity;
    /**
     * Additional data or information such as resources, documents, images etc. including references to the data or the actual inclusion of the data.
     */
    valueAttachment?: Attachment;
    /**
     * Additional data or information such as resources, documents, images etc. including references to the data or the actual inclusion of the data.
     */
    valueReference?: Reference;
    /**
     * Provides the reason in the situation where a reason code is required in addition to the content.
     */
    reason?: CodeableConcept;
}
/**
 * Information about diagnoses relevant to the claim items.
 */
export interface ClaimDiagnosis {
    /**
     * Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
     */
    id?: string;
    /**
     * Contains extension information for property 'id'.
     */
    _id?: Element;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * A number to uniquely identify diagnosis entries.
     */
    sequence: positiveInt;
    /**
     * Contains extension information for property 'sequence'.
     */
    _sequence?: Element;
    /**
     * The nature of illness or problem in a coded form or as a reference to an external defined Condition.
     */
    diagnosisCodeableConcept: CodeableConcept;
    /**
     * The nature of illness or problem in a coded form or as a reference to an external defined Condition.
     */
    diagnosisReference: Reference;
    /**
     * When the condition was observed or the relative ranking.
     */
    type?: CodeableConcept[];
    /**
     * Indication of whether the diagnosis was present on admission to a facility.
     */
    onAdmission?: CodeableConcept;
    /**
     * A package billing code or bundle code used to group products and services to a particular health condition (such as heart attack) which is based on a predetermined grouping code system.
     */
    packageCode?: CodeableConcept;
}
/**
 * Procedures performed on the patient relevant to the billing items with the claim.
 */
export interface ClaimProcedure {
    /**
     * Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
     */
    id?: string;
    /**
     * Contains extension information for property 'id'.
     */
    _id?: Element;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * A number to uniquely identify procedure entries.
     */
    sequence: positiveInt;
    /**
     * Contains extension information for property 'sequence'.
     */
    _sequence?: Element;
    /**
     * When the condition was observed or the relative ranking.
     */
    type?: CodeableConcept[];
    /**
     * Date and optionally time the procedure was performed.
     */
    date?: dateTime;
    /**
     * Contains extension information for property 'date'.
     */
    _date?: Element;
    /**
     * The code or reference to a Procedure resource which identifies the clinical intervention performed.
     */
    procedureCodeableConcept: CodeableConcept;
    /**
     * The code or reference to a Procedure resource which identifies the clinical intervention performed.
     */
    procedureReference: Reference;
    /**
     * Unique Device Identifiers associated with this line item.
     */
    udi?: Reference[];
}
/**
 * Financial instruments for reimbursement for the health care products and services specified on the claim.
 */
export interface ClaimInsurance {
    /**
     * Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
     */
    id?: string;
    /**
     * Contains extension information for property 'id'.
     */
    _id?: Element;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * A number to uniquely identify insurance entries and provide a sequence of coverages to convey coordination of benefit order.
     */
    sequence: positiveInt;
    /**
     * Contains extension information for property 'sequence'.
     */
    _sequence?: Element;
    /**
     * A flag to indicate that this Coverage is to be used for adjudication of this claim when set to true.
     */
    focal: boolean;
    /**
     * Contains extension information for property 'focal'.
     */
    _focal?: Element;
    /**
     * The business identifier to be used when the claim is sent for adjudication against this insurance policy.
     */
    identifier?: Identifier;
    /**
     * Reference to the insurance card level information contained in the Coverage resource. The coverage issuing insurer will use these details to locate the patient's actual coverage within the insurer's information system.
     */
    coverage: Reference;
    /**
     * A business agreement number established between the provider and the insurer for special business processing purposes.
     */
    businessArrangement?: string;
    /**
     * Contains extension information for property 'businessArrangement'.
     */
    _businessArrangement?: Element;
    /**
     * Reference numbers previously provided by the insurer to the provider to be quoted on subsequent claims containing services or products related to the prior authorization.
     */
    preAuthRef?: string[];
    /**
     * Contains extension information for property 'preAuthRef'.
     */
    _preAuthRef?: Element[];
    /**
     * The result of the adjudication of the line items for the Coverage specified in this insurance.
     */
    claimResponse?: Reference;
}
/**
 * Details of an accident which resulted in injuries which required the products and services listed in the claim.
 */
export interface ClaimAccident {
    /**
     * Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
     */
    id?: string;
    /**
     * Contains extension information for property 'id'.
     */
    _id?: Element;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * Date of an accident event  related to the products and services contained in the claim.
     */
    date: date;
    /**
     * Contains extension information for property 'date'.
     */
    _date?: Element;
    /**
     * The type or context of the accident event for the purposes of selection of potential insurance coverages and determination of coordination between insurers.
     */
    type?: CodeableConcept;
    /**
     * The physical location of the accident event.
     */
    locationAddress?: Address;
    /**
     * The physical location of the accident event.
     */
    locationReference?: Reference;
}
/**
 * A claim line. Either a simple  product or service or a 'group' of details which can each be a simple items or groups of sub-details.
 */
export interface ClaimItem {
    /**
     * Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
     */
    id?: string;
    /**
     * Contains extension information for property 'id'.
     */
    _id?: Element;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * A number to uniquely identify item entries.
     */
    sequence: positiveInt;
    /**
     * Contains extension information for property 'sequence'.
     */
    _sequence?: Element;
    /**
     * CareTeam members related to this service or product.
     */
    careTeamSequence?: positiveInt[];
    /**
     * Contains extension information for property 'careTeamSequence'.
     */
    _careTeamSequence?: Element[];
    /**
     * Diagnosis applicable for this service or product.
     */
    diagnosisSequence?: positiveInt[];
    /**
     * Contains extension information for property 'diagnosisSequence'.
     */
    _diagnosisSequence?: Element[];
    /**
     * Procedures applicable for this service or product.
     */
    procedureSequence?: positiveInt[];
    /**
     * Contains extension information for property 'procedureSequence'.
     */
    _procedureSequence?: Element[];
    /**
     * Exceptions, special conditions and supporting information applicable for this service or product.
     */
    informationSequence?: positiveInt[];
    /**
     * Contains extension information for property 'informationSequence'.
     */
    _informationSequence?: Element[];
    /**
     * The type of revenue or cost center providing the product and/or service.
     */
    revenue?: CodeableConcept;
    /**
     * Code to identify the general type of benefits under which products and services are provided.
     */
    category?: CodeableConcept;
    /**
     * When the value is a group code then this item collects a set of related claim details, otherwise this contains the product, service, drug or other billing code for the item.
     */
    productOrService: CodeableConcept;
    /**
     * Item typification or modifiers codes to convey additional context for the product or service.
     */
    modifier?: CodeableConcept[];
    /**
     * Identifies the program under which this may be recovered.
     */
    programCode?: CodeableConcept[];
    /**
     * The date or dates when the service or product was supplied, performed or completed.
     */
    servicedDate?: date;
    /**
     * Contains extension information for property 'servicedDate'.
     */
    _servicedDate?: Element;
    /**
     * The date or dates when the service or product was supplied, performed or completed.
     */
    servicedPeriod?: Period;
    /**
     * Where the product or service was provided.
     */
    locationCodeableConcept?: CodeableConcept;
    /**
     * Where the product or service was provided.
     */
    locationAddress?: Address;
    /**
     * Where the product or service was provided.
     */
    locationReference?: Reference;
    /**
     * The number of repetitions of a service or product.
     */
    quantity?: Quantity;
    /**
     * If the item is not a group then this is the fee for the product or service, otherwise this is the total of the fees for the details of the group.
     */
    unitPrice?: Money;
    /**
     * A real number that represents a multiplier used in determining the overall value of services delivered and/or goods received. The concept of a Factor allows for a discount or surcharge multiplier to be applied to a monetary amount.
     */
    factor?: decimal;
    /**
     * Contains extension information for property 'factor'.
     */
    _factor?: Element;
    /**
     * The quantity times the unit price for an additional service or product or charge.
     */
    net?: Money;
    /**
     * Unique Device Identifiers associated with this line item.
     */
    udi?: Reference[];
    /**
     * Physical service site on the patient (limb, tooth, etc.).
     */
    bodySite?: CodeableConcept;
    /**
     * A region or surface of the bodySite, e.g. limb region or tooth surface(s).
     */
    subSite?: CodeableConcept[];
    /**
     * The Encounters during which this Claim was created or to which the creation of this record is tightly associated.
     */
    encounter?: Reference[];
    /**
     * A claim detail line. Either a simple (a product or service) or a 'group' of sub-details which are simple items.
     */
    detail?: ClaimItemDetail[];
}
/**
 * A claim detail line. Either a simple (a product or service) or a 'group' of sub-details which are simple items.
 */
export interface ClaimItemDetail {
    /**
     * Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
     */
    id?: string;
    /**
     * Contains extension information for property 'id'.
     */
    _id?: Element;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * A number to uniquely identify item entries.
     */
    sequence: positiveInt;
    /**
     * Contains extension information for property 'sequence'.
     */
    _sequence?: Element;
    /**
     * The type of revenue or cost center providing the product and/or service.
     */
    revenue?: CodeableConcept;
    /**
     * Code to identify the general type of benefits under which products and services are provided.
     */
    category?: CodeableConcept;
    /**
     * When the value is a group code then this item collects a set of related claim details, otherwise this contains the product, service, drug or other billing code for the item.
     */
    productOrService: CodeableConcept;
    /**
     * Item typification or modifiers codes to convey additional context for the product or service.
     */
    modifier?: CodeableConcept[];
    /**
     * Identifies the program under which this may be recovered.
     */
    programCode?: CodeableConcept[];
    /**
     * The number of repetitions of a service or product.
     */
    quantity?: Quantity;
    /**
     * If the item is not a group then this is the fee for the product or service, otherwise this is the total of the fees for the details of the group.
     */
    unitPrice?: Money;
    /**
     * A real number that represents a multiplier used in determining the overall value of services delivered and/or goods received. The concept of a Factor allows for a discount or surcharge multiplier to be applied to a monetary amount.
     */
    factor?: decimal;
    /**
     * Contains extension information for property 'factor'.
     */
    _factor?: Element;
    /**
     * The quantity times the unit price for an additional service or product or charge.
     */
    net?: Money;
    /**
     * Unique Device Identifiers associated with this line item.
     */
    udi?: Reference[];
    /**
     * A claim detail line. Either a simple (a product or service) or a 'group' of sub-details which are simple items.
     */
    subDetail?: ClaimItemDetailSubDetail[];
}
/**
 * A claim detail line. Either a simple (a product or service) or a 'group' of sub-details which are simple items.
 */
export interface ClaimItemDetailSubDetail {
    /**
     * Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
     */
    id?: string;
    /**
     * Contains extension information for property 'id'.
     */
    _id?: Element;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * A number to uniquely identify item entries.
     */
    sequence: positiveInt;
    /**
     * Contains extension information for property 'sequence'.
     */
    _sequence?: Element;
    /**
     * The type of revenue or cost center providing the product and/or service.
     */
    revenue?: CodeableConcept;
    /**
     * Code to identify the general type of benefits under which products and services are provided.
     */
    category?: CodeableConcept;
    /**
     * When the value is a group code then this item collects a set of related claim details, otherwise this contains the product, service, drug or other billing code for the item.
     */
    productOrService: CodeableConcept;
    /**
     * Item typification or modifiers codes to convey additional context for the product or service.
     */
    modifier?: CodeableConcept[];
    /**
     * Identifies the program under which this may be recovered.
     */
    programCode?: CodeableConcept[];
    /**
     * The number of repetitions of a service or product.
     */
    quantity?: Quantity;
    /**
     * If the item is not a group then this is the fee for the product or service, otherwise this is the total of the fees for the details of the group.
     */
    unitPrice?: Money;
    /**
     * A real number that represents a multiplier used in determining the overall value of services delivered and/or goods received. The concept of a Factor allows for a discount or surcharge multiplier to be applied to a monetary amount.
     */
    factor?: decimal;
    /**
     * Contains extension information for property 'factor'.
     */
    _factor?: Element;
    /**
     * The quantity times the unit price for an additional service or product or charge.
     */
    net?: Money;
    /**
     * Unique Device Identifiers associated with this line item.
     */
    udi?: Reference[];
}
/**
 * This resource provides the adjudication details from the processing of a Claim resource.
 */
export interface ClaimResponse {
    /**
     * The type of the resource.
     */
    resourceType: string;
    /**
     * The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes.
     */
    id?: id;
    /**
     * Contains extension information for property 'id'.
     */
    _id?: Element;
    /**
     * The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource.
     */
    meta?: Meta;
    /**
     * A reference to a set of rules that were followed when the resource was constructed, and which must be understood when processing the content. Often, this is a reference to an implementation guide that defines the special rules along with other profiles etc.
     */
    implicitRules?: uri;
    /**
     * Contains extension information for property 'implicitRules'.
     */
    _implicitRules?: Element;
    /**
     * The base language in which the resource is written.
     */
    language?: code;
    /**
     * Contains extension information for property 'language'.
     */
    _language?: Element;
    /**
     * A human-readable narrative that contains a summary of the resource and can be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it "clinically safe" for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety.
     */
    text?: Narrative;
    /**
     * These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, and nor can they have their own independent transaction scope.
     */
    contained?: Resource[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * A unique identifier assigned to this claim response.
     */
    identifier?: Identifier[];
    /**
     * The status of the resource instance.
     */
    status: code;
    /**
     * Contains extension information for property 'status'.
     */
    _status?: Element;
    /**
     * A finer grained suite of claim type codes which may convey additional information such as Inpatient vs Outpatient and/or a specialty service.
     */
    type: CodeableConcept;
    /**
     * A finer grained suite of claim type codes which may convey additional information such as Inpatient vs Outpatient and/or a specialty service.
     */
    subType?: CodeableConcept;
    /**
     * A code to indicate whether the nature of the request is: to request adjudication of products and services previously rendered; or requesting authorization and adjudication for provision in the future; or requesting the non-binding adjudication of the listed products and services which could be provided in the future.
     */
    use: code;
    /**
     * Contains extension information for property 'use'.
     */
    _use?: Element;
    /**
     * The party to whom the professional services and/or products have been supplied or are being considered and for whom actual for facast reimbursement is sought.
     */
    patient: Reference;
    /**
     * The date this resource was created.
     */
    created: dateTime;
    /**
     * Contains extension information for property 'created'.
     */
    _created?: Element;
    /**
     * The party responsible for authorization, adjudication and reimbursement.
     */
    insurer: Reference;
    /**
     * The provider which is responsible for the claim, predetermination or preauthorization.
     */
    requestor?: Reference;
    /**
     * Original request resource reference.
     */
    request?: Reference;
    /**
     * The outcome of the claim, predetermination, or preauthorization processing.
     */
    outcome: code;
    /**
     * Contains extension information for property 'outcome'.
     */
    _outcome?: Element;
    /**
     * A human readable description of the status of the adjudication.
     */
    disposition?: string;
    /**
     * Contains extension information for property 'disposition'.
     */
    _disposition?: Element;
    /**
     * Reference from the Insurer which is used in later communications which refers to this adjudication.
     */
    preAuthRef?: string;
    /**
     * Contains extension information for property 'preAuthRef'.
     */
    _preAuthRef?: Element;
    /**
     * The time frame during which this authorization is effective.
     */
    preAuthPeriod?: Period;
    /**
     * Type of Party to be reimbursed: subscriber, provider, other.
     */
    payeeType?: CodeableConcept;
    /**
     * A claim line. Either a simple (a product or service) or a 'group' of details which can also be a simple items or groups of sub-details.
     */
    item?: ClaimResponseItem[];
    /**
     * The first-tier service adjudications for payor added product or service lines.
     */
    addItem?: ClaimResponseAddItem[];
    /**
     * The adjudication results which are presented at the header level rather than at the line-item or add-item levels.
     */
    adjudication?: ClaimResponseItemAdjudication[];
    /**
     * Categorized monetary totals for the adjudication.
     */
    total?: ClaimResponseTotal[];
    /**
     * Payment details for the adjudication of the claim.
     */
    payment?: ClaimResponsePayment;
    /**
     * A code, used only on a response to a preauthorization, to indicate whether the benefits payable have been reserved and for whom.
     */
    fundsReserve?: CodeableConcept;
    /**
     * A code for the form to be used for printing the content.
     */
    formCode?: CodeableConcept;
    /**
     * The actual form, by reference or inclusion, for printing the content or an EOB.
     */
    form?: Attachment;
    /**
     * A note that describes or explains adjudication results in a human readable form.
     */
    processNote?: ClaimResponseProcessNote[];
    /**
     * Request for additional supporting or authorizing information.
     */
    communicationRequest?: Reference[];
    /**
     * Financial instruments for reimbursement for the health care products and services specified on the claim.
     */
    insurance?: ClaimResponseInsurance[];
    /**
     * Errors encountered during the processing of the adjudication.
     */
    error?: ClaimResponseError[];
}
/**
 * A claim line. Either a simple (a product or service) or a 'group' of details which can also be a simple items or groups of sub-details.
 */
export interface ClaimResponseItem {
    /**
     * Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
     */
    id?: string;
    /**
     * Contains extension information for property 'id'.
     */
    _id?: Element;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * A number to uniquely reference the claim item entries.
     */
    itemSequence: positiveInt;
    /**
     * Contains extension information for property 'itemSequence'.
     */
    _itemSequence?: Element;
    /**
     * The numbers associated with notes below which apply to the adjudication of this item.
     */
    noteNumber?: positiveInt[];
    /**
     * Contains extension information for property 'noteNumber'.
     */
    _noteNumber?: Element[];
    /**
     * If this item is a group then the values here are a summary of the adjudication of the detail items. If this item is a simple product or service then this is the result of the adjudication of this item.
     */
    adjudication: ClaimResponseItemAdjudication[];
    /**
     * A claim detail. Either a simple (a product or service) or a 'group' of sub-details which are simple items.
     */
    detail?: ClaimResponseItemDetail[];
}
/**
 * If this item is a group then the values here are a summary of the adjudication of the detail items. If this item is a simple product or service then this is the result of the adjudication of this item.
 */
export interface ClaimResponseItemAdjudication {
    /**
     * Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
     */
    id?: string;
    /**
     * Contains extension information for property 'id'.
     */
    _id?: Element;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * A code to indicate the information type of this adjudication record. Information types may include the value submitted, maximum values or percentages allowed or payable under the plan, amounts that: the patient is responsible for in aggregate or pertaining to this item; amounts paid by other coverages; and, the benefit payable for this item.
     */
    category: CodeableConcept;
    /**
     * A code supporting the understanding of the adjudication result and explaining variance from expected amount.
     */
    reason?: CodeableConcept;
    /**
     * Monetary amount associated with the category.
     */
    amount?: Money;
    /**
     * A non-monetary value associated with the category. Mutually exclusive to the amount element above.
     */
    value?: decimal;
    /**
     * Contains extension information for property 'value'.
     */
    _value?: Element;
}
/**
 * A claim detail. Either a simple (a product or service) or a 'group' of sub-details which are simple items.
 */
export interface ClaimResponseItemDetail {
    /**
     * Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
     */
    id?: string;
    /**
     * Contains extension information for property 'id'.
     */
    _id?: Element;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * A number to uniquely reference the claim detail entry.
     */
    detailSequence: positiveInt;
    /**
     * Contains extension information for property 'detailSequence'.
     */
    _detailSequence?: Element;
    /**
     * The numbers associated with notes below which apply to the adjudication of this item.
     */
    noteNumber?: positiveInt[];
    /**
     * Contains extension information for property 'noteNumber'.
     */
    _noteNumber?: Element[];
    /**
     * The adjudication results.
     */
    adjudication: ClaimResponseItemAdjudication[];
    /**
     * A sub-detail adjudication of a simple product or service.
     */
    subDetail?: ClaimResponseItemDetailSubDetail[];
}
/**
 * A sub-detail adjudication of a simple product or service.
 */
export interface ClaimResponseItemDetailSubDetail {
    /**
     * Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
     */
    id?: string;
    /**
     * Contains extension information for property 'id'.
     */
    _id?: Element;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * A number to uniquely reference the claim sub-detail entry.
     */
    subDetailSequence: positiveInt;
    /**
     * Contains extension information for property 'subDetailSequence'.
     */
    _subDetailSequence?: Element;
    /**
     * The numbers associated with notes below which apply to the adjudication of this item.
     */
    noteNumber?: positiveInt[];
    /**
     * Contains extension information for property 'noteNumber'.
     */
    _noteNumber?: Element[];
    /**
     * The adjudication results.
     */
    adjudication?: ClaimResponseItemAdjudication[];
}
/**
 * The first-tier service adjudications for payor added product or service lines.
 */
export interface ClaimResponseAddItem {
    /**
     * Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
     */
    id?: string;
    /**
     * Contains extension information for property 'id'.
     */
    _id?: Element;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * Claim items which this service line is intended to replace.
     */
    itemSequence?: positiveInt[];
    /**
     * Contains extension information for property 'itemSequence'.
     */
    _itemSequence?: Element[];
    /**
     * The sequence number of the details within the claim item which this line is intended to replace.
     */
    detailSequence?: positiveInt[];
    /**
     * Contains extension information for property 'detailSequence'.
     */
    _detailSequence?: Element[];
    /**
     * The sequence number of the sub-details within the details within the claim item which this line is intended to replace.
     */
    subdetailSequence?: positiveInt[];
    /**
     * Contains extension information for property 'subdetailSequence'.
     */
    _subdetailSequence?: Element[];
    /**
     * The providers who are authorized for the services rendered to the patient.
     */
    provider?: Reference[];
    /**
     * When the value is a group code then this item collects a set of related claim details, otherwise this contains the product, service, drug or other billing code for the item.
     */
    productOrService: CodeableConcept;
    /**
     * Item typification or modifiers codes to convey additional context for the product or service.
     */
    modifier?: CodeableConcept[];
    /**
     * Identifies the program under which this may be recovered.
     */
    programCode?: CodeableConcept[];
    /**
     * The date or dates when the service or product was supplied, performed or completed.
     */
    servicedDate?: date;
    /**
     * Contains extension information for property 'servicedDate'.
     */
    _servicedDate?: Element;
    /**
     * The date or dates when the service or product was supplied, performed or completed.
     */
    servicedPeriod?: Period;
    /**
     * Where the product or service was provided.
     */
    locationCodeableConcept?: CodeableConcept;
    /**
     * Where the product or service was provided.
     */
    locationAddress?: Address;
    /**
     * Where the product or service was provided.
     */
    locationReference?: Reference;
    /**
     * The number of repetitions of a service or product.
     */
    quantity?: Quantity;
    /**
     * If the item is not a group then this is the fee for the product or service, otherwise this is the total of the fees for the details of the group.
     */
    unitPrice?: Money;
    /**
     * A real number that represents a multiplier used in determining the overall value of services delivered and/or goods received. The concept of a Factor allows for a discount or surcharge multiplier to be applied to a monetary amount.
     */
    factor?: decimal;
    /**
     * Contains extension information for property 'factor'.
     */
    _factor?: Element;
    /**
     * The quantity times the unit price for an additional service or product or charge.
     */
    net?: Money;
    /**
     * Physical service site on the patient (limb, tooth, etc.).
     */
    bodySite?: CodeableConcept;
    /**
     * A region or surface of the bodySite, e.g. limb region or tooth surface(s).
     */
    subSite?: CodeableConcept[];
    /**
     * The numbers associated with notes below which apply to the adjudication of this item.
     */
    noteNumber?: positiveInt[];
    /**
     * Contains extension information for property 'noteNumber'.
     */
    _noteNumber?: Element[];
    /**
     * The adjudication results.
     */
    adjudication: ClaimResponseItemAdjudication[];
    /**
     * The second-tier service adjudications for payor added services.
     */
    detail?: ClaimResponseAddItemDetail[];
}
/**
 * The second-tier service adjudications for payor added services.
 */
export interface ClaimResponseAddItemDetail {
    /**
     * Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
     */
    id?: string;
    /**
     * Contains extension information for property 'id'.
     */
    _id?: Element;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * When the value is a group code then this item collects a set of related claim details, otherwise this contains the product, service, drug or other billing code for the item.
     */
    productOrService: CodeableConcept;
    /**
     * Item typification or modifiers codes to convey additional context for the product or service.
     */
    modifier?: CodeableConcept[];
    /**
     * The number of repetitions of a service or product.
     */
    quantity?: Quantity;
    /**
     * If the item is not a group then this is the fee for the product or service, otherwise this is the total of the fees for the details of the group.
     */
    unitPrice?: Money;
    /**
     * A real number that represents a multiplier used in determining the overall value of services delivered and/or goods received. The concept of a Factor allows for a discount or surcharge multiplier to be applied to a monetary amount.
     */
    factor?: decimal;
    /**
     * Contains extension information for property 'factor'.
     */
    _factor?: Element;
    /**
     * The quantity times the unit price for an additional service or product or charge.
     */
    net?: Money;
    /**
     * The numbers associated with notes below which apply to the adjudication of this item.
     */
    noteNumber?: positiveInt[];
    /**
     * Contains extension information for property 'noteNumber'.
     */
    _noteNumber?: Element[];
    /**
     * The adjudication results.
     */
    adjudication: ClaimResponseItemAdjudication[];
    /**
     * The third-tier service adjudications for payor added services.
     */
    subDetail?: ClaimResponseAddItemDetailSubDetail[];
}
/**
 * The third-tier service adjudications for payor added services.
 */
export interface ClaimResponseAddItemDetailSubDetail {
    /**
     * Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
     */
    id?: string;
    /**
     * Contains extension information for property 'id'.
     */
    _id?: Element;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * When the value is a group code then this item collects a set of related claim details, otherwise this contains the product, service, drug or other billing code for the item.
     */
    productOrService: CodeableConcept;
    /**
     * Item typification or modifiers codes to convey additional context for the product or service.
     */
    modifier?: CodeableConcept[];
    /**
     * The number of repetitions of a service or product.
     */
    quantity?: Quantity;
    /**
     * If the item is not a group then this is the fee for the product or service, otherwise this is the total of the fees for the details of the group.
     */
    unitPrice?: Money;
    /**
     * A real number that represents a multiplier used in determining the overall value of services delivered and/or goods received. The concept of a Factor allows for a discount or surcharge multiplier to be applied to a monetary amount.
     */
    factor?: decimal;
    /**
     * Contains extension information for property 'factor'.
     */
    _factor?: Element;
    /**
     * The quantity times the unit price for an additional service or product or charge.
     */
    net?: Money;
    /**
     * The numbers associated with notes below which apply to the adjudication of this item.
     */
    noteNumber?: positiveInt[];
    /**
     * Contains extension information for property 'noteNumber'.
     */
    _noteNumber?: Element[];
    /**
     * The adjudication results.
     */
    adjudication: ClaimResponseItemAdjudication[];
}
/**
 * Categorized monetary totals for the adjudication.
 */
export interface ClaimResponseTotal {
    /**
     * Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
     */
    id?: string;
    /**
     * Contains extension information for property 'id'.
     */
    _id?: Element;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * A code to indicate the information type of this adjudication record. Information types may include: the value submitted, maximum values or percentages allowed or payable under the plan, amounts that the patient is responsible for in aggregate or pertaining to this item, amounts paid by other coverages, and the benefit payable for this item.
     */
    category: CodeableConcept;
    /**
     * Monetary total amount associated with the category.
     */
    amount: Money;
}
/**
 * Payment details for the adjudication of the claim.
 */
export interface ClaimResponsePayment {
    /**
     * Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
     */
    id?: string;
    /**
     * Contains extension information for property 'id'.
     */
    _id?: Element;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * Whether this represents partial or complete payment of the benefits payable.
     */
    type: CodeableConcept;
    /**
     * Total amount of all adjustments to this payment included in this transaction which are not related to this claim's adjudication.
     */
    adjustment?: Money;
    /**
     * Reason for the payment adjustment.
     */
    adjustmentReason?: CodeableConcept;
    /**
     * Estimated date the payment will be issued or the actual issue date of payment.
     */
    date?: date;
    /**
     * Contains extension information for property 'date'.
     */
    _date?: Element;
    /**
     * Benefits payable less any payment adjustment.
     */
    amount: Money;
    /**
     * Issuer's unique identifier for the payment instrument.
     */
    identifier?: Identifier;
}
/**
 * A note that describes or explains adjudication results in a human readable form.
 */
export interface ClaimResponseProcessNote {
    /**
     * Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
     */
    id?: string;
    /**
     * Contains extension information for property 'id'.
     */
    _id?: Element;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * A number to uniquely identify a note entry.
     */
    number?: positiveInt;
    /**
     * Contains extension information for property 'number'.
     */
    _number?: Element;
    /**
     * The business purpose of the note text.
     */
    type?: code;
    /**
     * Contains extension information for property 'type'.
     */
    _type?: Element;
    /**
     * The explanation or description associated with the processing.
     */
    text: string;
    /**
     * Contains extension information for property 'text'.
     */
    _text?: Element;
    /**
     * A code to define the language used in the text of the note.
     */
    language?: CodeableConcept;
}
/**
 * Financial instruments for reimbursement for the health care products and services specified on the claim.
 */
export interface ClaimResponseInsurance {
    /**
     * Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
     */
    id?: string;
    /**
     * Contains extension information for property 'id'.
     */
    _id?: Element;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * A number to uniquely identify insurance entries and provide a sequence of coverages to convey coordination of benefit order.
     */
    sequence: positiveInt;
    /**
     * Contains extension information for property 'sequence'.
     */
    _sequence?: Element;
    /**
     * A flag to indicate that this Coverage is to be used for adjudication of this claim when set to true.
     */
    focal: boolean;
    /**
     * Contains extension information for property 'focal'.
     */
    _focal?: Element;
    /**
     * Reference to the insurance card level information contained in the Coverage resource. The coverage issuing insurer will use these details to locate the patient's actual coverage within the insurer's information system.
     */
    coverage: Reference;
    /**
     * A business agreement number established between the provider and the insurer for special business processing purposes.
     */
    businessArrangement?: string;
    /**
     * Contains extension information for property 'businessArrangement'.
     */
    _businessArrangement?: Element;
    /**
     * The result of the adjudication of the line items for the Coverage specified in this insurance.
     */
    claimResponse?: Reference;
}
/**
 * Errors encountered during the processing of the adjudication.
 */
export interface ClaimResponseError {
    /**
     * Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
     */
    id?: string;
    /**
     * Contains extension information for property 'id'.
     */
    _id?: Element;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * The sequence number of the line item submitted which contains the error. This value is omitted when the error occurs outside of the item structure.
     */
    itemSequence?: positiveInt;
    /**
     * Contains extension information for property 'itemSequence'.
     */
    _itemSequence?: Element;
    /**
     * The sequence number of the detail within the line item submitted which contains the error. This value is omitted when the error occurs outside of the item structure.
     */
    detailSequence?: positiveInt;
    /**
     * Contains extension information for property 'detailSequence'.
     */
    _detailSequence?: Element;
    /**
     * The sequence number of the sub-detail within the detail within the line item submitted which contains the error. This value is omitted when the error occurs outside of the item structure.
     */
    subDetailSequence?: positiveInt;
    /**
     * Contains extension information for property 'subDetailSequence'.
     */
    _subDetailSequence?: Element;
    /**
     * An error code, from a specified code system, which details why the claim could not be adjudicated.
     */
    code: CodeableConcept;
}
/**
 * A record of a clinical assessment performed to determine what problem(s) may affect the patient and before planning the treatments or management strategies that are best to manage a patient's condition. Assessments are often 1:1 with a clinical consultation / encounter,  but this varies greatly depending on the clinical workflow. This resource is called "ClinicalImpression" rather than "ClinicalAssessment" to avoid confusion with the recording of assessment tools such as Apgar score.
 */
export interface ClinicalImpression {
    /**
     * The type of the resource.
     */
    resourceType: string;
    /**
     * The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes.
     */
    id?: id;
    /**
     * Contains extension information for property 'id'.
     */
    _id?: Element;
    /**
     * The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource.
     */
    meta?: Meta;
    /**
     * A reference to a set of rules that were followed when the resource was constructed, and which must be understood when processing the content. Often, this is a reference to an implementation guide that defines the special rules along with other profiles etc.
     */
    implicitRules?: uri;
    /**
     * Contains extension information for property 'implicitRules'.
     */
    _implicitRules?: Element;
    /**
     * The base language in which the resource is written.
     */
    language?: code;
    /**
     * Contains extension information for property 'language'.
     */
    _language?: Element;
    /**
     * A human-readable narrative that contains a summary of the resource and can be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it "clinically safe" for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety.
     */
    text?: Narrative;
    /**
     * These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, and nor can they have their own independent transaction scope.
     */
    contained?: Resource[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * Business identifiers assigned to this clinical impression by the performer or other systems which remain constant as the resource is updated and propagates from server to server.
     */
    identifier?: Identifier[];
    /**
     * Identifies the workflow status of the assessment.
     */
    status: code;
    /**
     * Contains extension information for property 'status'.
     */
    _status?: Element;
    /**
     * Captures the reason for the current state of the ClinicalImpression.
     */
    statusReason?: CodeableConcept;
    /**
     * Categorizes the type of clinical assessment performed.
     */
    code?: CodeableConcept;
    /**
     * A summary of the context and/or cause of the assessment - why / where it was performed, and what patient events/status prompted it.
     */
    description?: string;
    /**
     * Contains extension information for property 'description'.
     */
    _description?: Element;
    /**
     * The patient or group of individuals assessed as part of this record.
     */
    subject: Reference;
    /**
     * The Encounter during which this ClinicalImpression was created or to which the creation of this record is tightly associated.
     */
    encounter?: Reference;
    /**
     * The point in time or period over which the subject was assessed.
     */
    effectiveDateTime?: dateTime;
    /**
     * Contains extension information for property 'effectiveDateTime'.
     */
    _effectiveDateTime?: Element;
    /**
     * The point in time or period over which the subject was assessed.
     */
    effectivePeriod?: Period;
    /**
     * Indicates when the documentation of the assessment was complete.
     */
    date?: dateTime;
    /**
     * Contains extension information for property 'date'.
     */
    _date?: Element;
    /**
     * The clinician performing the assessment.
     */
    assessor?: Reference;
    /**
     * A reference to the last assessment that was conducted on this patient. Assessments are often/usually ongoing in nature; a care provider (practitioner or team) will make new assessments on an ongoing basis as new data arises or the patient's conditions changes.
     */
    previous?: Reference;
    /**
     * A list of the relevant problems/conditions for a patient.
     */
    problem?: Reference[];
    /**
     * One or more sets of investigations (signs, symptoms, etc.). The actual grouping of investigations varies greatly depending on the type and context of the assessment. These investigations may include data generated during the assessment process, or data previously generated and recorded that is pertinent to the outcomes.
     */
    investigation?: ClinicalImpressionInvestigation[];
    /**
     * Reference to a specific published clinical protocol that was followed during this assessment, and/or that provides evidence in support of the diagnosis.
     */
    protocol?: uri[];
    /**
     * Contains extension information for property 'protocol'.
     */
    _protocol?: Element[];
    /**
     * A text summary of the investigations and the diagnosis.
     */
    summary?: string;
    /**
     * Contains extension information for property 'summary'.
     */
    _summary?: Element;
    /**
     * Specific findings or diagnoses that were considered likely or relevant to ongoing treatment.
     */
    finding?: ClinicalImpressionFinding[];
    /**
     * Estimate of likely outcome.
     */
    prognosisCodeableConcept?: CodeableConcept[];
    /**
     * RiskAssessment expressing likely outcome.
     */
    prognosisReference?: Reference[];
    /**
     * Information supporting the clinical impression.
     */
    supportingInfo?: Reference[];
    /**
     * Commentary about the impression, typically recorded after the impression itself was made, though supplemental notes by the original author could also appear.
     */
    note?: Annotation[];
}
/**
 * One or more sets of investigations (signs, symptoms, etc.). The actual grouping of investigations varies greatly depending on the type and context of the assessment. These investigations may include data generated during the assessment process, or data previously generated and recorded that is pertinent to the outcomes.
 */
export interface ClinicalImpressionInvestigation {
    /**
     * Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
     */
    id?: string;
    /**
     * Contains extension information for property 'id'.
     */
    _id?: Element;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * A name/code for the group ("set") of investigations. Typically, this will be something like "signs", "symptoms", "clinical", "diagnostic", but the list is not constrained, and others such groups such as (exposure|family|travel|nutritional) history may be used.
     */
    code: CodeableConcept;
    /**
     * A record of a specific investigation that was undertaken.
     */
    item?: Reference[];
}
/**
 * Specific findings or diagnoses that were considered likely or relevant to ongoing treatment.
 */
export interface ClinicalImpressionFinding {
    /**
     * Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
     */
    id?: string;
    /**
     * Contains extension information for property 'id'.
     */
    _id?: Element;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * Specific text or code for finding or diagnosis, which may include ruled-out or resolved conditions.
     */
    itemCodeableConcept?: CodeableConcept;
    /**
     * Specific reference for finding or diagnosis, which may include ruled-out or resolved conditions.
     */
    itemReference?: Reference;
    /**
     * Which investigations support finding or diagnosis.
     */
    basis?: string;
    /**
     * Contains extension information for property 'basis'.
     */
    _basis?: Element;
}
/**
 * A concept that may be defined by a formal reference to a terminology or ontology or may be provided by text.
 */
export interface CodeableConcept {
    /**
     * Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
     */
    id?: string;
    /**
     * Contains extension information for property 'id'.
     */
    _id?: Element;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * A reference to a code defined by a terminology system.
     */
    coding?: Coding[];
    /**
     * A human language representation of the concept as seen/selected/uttered by the user who entered the data and/or which represents the intended meaning of the user.
     */
    text?: string;
    /**
     * Contains extension information for property 'text'.
     */
    _text?: Element;
}
/**
 * The CodeSystem resource is used to declare the existence of and describe a code system or code system supplement and its key properties, and optionally define a part or all of its content.
 */
export interface CodeSystem {
    /**
     * The type of the resource.
     */
    resourceType: string;
    /**
     * The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes.
     */
    id?: id;
    /**
     * Contains extension information for property 'id'.
     */
    _id?: Element;
    /**
     * The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource.
     */
    meta?: Meta;
    /**
     * A reference to a set of rules that were followed when the resource was constructed, and which must be understood when processing the content. Often, this is a reference to an implementation guide that defines the special rules along with other profiles etc.
     */
    implicitRules?: uri;
    /**
     * Contains extension information for property 'implicitRules'.
     */
    _implicitRules?: Element;
    /**
     * The base language in which the resource is written.
     */
    language?: code;
    /**
     * Contains extension information for property 'language'.
     */
    _language?: Element;
    /**
     * A human-readable narrative that contains a summary of the resource and can be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it "clinically safe" for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety.
     */
    text?: Narrative;
    /**
     * These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, and nor can they have their own independent transaction scope.
     */
    contained?: Resource[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * An absolute URI that is used to identify this code system when it is referenced in a specification, model, design or an instance; also called its canonical identifier. This SHOULD be globally unique and SHOULD be a literal address at which at which an authoritative instance of this code system is (or will be) published. This URL can be the target of a canonical reference. It SHALL remain the same when the code system is stored on different servers. This is used in [Coding](datatypes.html#Coding).system.
     */
    url?: uri;
    /**
     * Contains extension information for property 'url'.
     */
    _url?: Element;
    /**
     * A formal identifier that is used to identify this code system when it is represented in other formats, or referenced in a specification, model, design or an instance.
     */
    identifier?: Identifier[];
    /**
     * The identifier that is used to identify this version of the code system when it is referenced in a specification, model, design or instance. This is an arbitrary value managed by the code system author and is not expected to be globally unique. For example, it might be a timestamp (e.g. yyyymmdd) if a managed version is not available. There is also no expectation that versions can be placed in a lexicographical sequence. This is used in [Coding](datatypes.html#Coding).version.
     */
    version?: string;
    /**
     * Contains extension information for property 'version'.
     */
    _version?: Element;
    /**
     * A natural language name identifying the code system. This name should be usable as an identifier for the module by machine processing applications such as code generation.
     */
    name?: string;
    /**
     * Contains extension information for property 'name'.
     */
    _name?: Element;
    /**
     * A short, descriptive, user-friendly title for the code system.
     */
    title?: string;
    /**
     * Contains extension information for property 'title'.
     */
    _title?: Element;
    /**
     * The date (and optionally time) when the code system resource was created or revised.
     */
    status: code;
    /**
     * Contains extension information for property 'status'.
     */
    _status?: Element;
    /**
     * A Boolean value to indicate that this code system is authored for testing purposes (or education/evaluation/marketing) and is not intended to be used for genuine usage.
     */
    experimental?: boolean;
    /**
     * Contains extension information for property 'experimental'.
     */
    _experimental?: Element;
    /**
     * The date  (and optionally time) when the code system was published. The date must change when the business version changes and it must change if the status code changes. In addition, it should change when the substantive content of the code system changes.
     */
    date?: dateTime;
    /**
     * Contains extension information for property 'date'.
     */
    _date?: Element;
    /**
     * The name of the organization or individual that published the code system.
     */
    publisher?: string;
    /**
     * Contains extension information for property 'publisher'.
     */
    _publisher?: Element;
    /**
     * Contact details to assist a user in finding and communicating with the publisher.
     */
    contact?: ContactDetail[];
    /**
     * A free text natural language description of the code system from a consumer's perspective.
     */
    description?: markdown;
    /**
     * Contains extension information for property 'description'.
     */
    _description?: Element;
    /**
     * The content was developed with a focus and intent of supporting the contexts that are listed. These contexts may be general categories (gender, age, ...) or may be references to specific programs (insurance plans, studies, ...) and may be used to assist with indexing and searching for appropriate code system instances.
     */
    useContext?: UsageContext[];
    /**
     * A legal or geographic region in which the code system is intended to be used.
     */
    jurisdiction?: CodeableConcept[];
    /**
     * Explanation of why this code system is needed and why it has been designed as it has.
     */
    purpose?: markdown;
    /**
     * Contains extension information for property 'purpose'.
     */
    _purpose?: Element;
    /**
     * A copyright statement relating to the code system and/or its contents. Copyright statements are generally legal restrictions on the use and publishing of the code system.
     */
    copyright?: markdown;
    /**
     * Contains extension information for property 'copyright'.
     */
    _copyright?: Element;
    /**
     * If code comparison is case sensitive when codes within this system are compared to each other.
     */
    caseSensitive?: boolean;
    /**
     * Contains extension information for property 'caseSensitive'.
     */
    _caseSensitive?: Element;
    /**
     * Canonical reference to the value set that contains the entire code system.
     */
    valueSet?: canonical;
    /**
     * The meaning of the hierarchy of concepts as represented in this resource.
     */
    hierarchyMeaning?: code;
    /**
     * Contains extension information for property 'hierarchyMeaning'.
     */
    _hierarchyMeaning?: Element;
    /**
     * The code system defines a compositional (post-coordination) grammar.
     */
    compositional?: boolean;
    /**
     * Contains extension information for property 'compositional'.
     */
    _compositional?: Element;
    /**
     * This flag is used to signify that the code system does not commit to concept permanence across versions. If true, a version must be specified when referencing this code system.
     */
    versionNeeded?: boolean;
    /**
     * Contains extension information for property 'versionNeeded'.
     */
    _versionNeeded?: Element;
    /**
     * The extent of the content of the code system (the concepts and codes it defines) are represented in this resource instance.
     */
    content: code;
    /**
     * Contains extension information for property 'content'.
     */
    _content?: Element;
    /**
     * The canonical URL of the code system that this code system supplement is adding designations and properties to.
     */
    supplements?: canonical;
    /**
     * The total number of concepts defined by the code system. Where the code system has a compositional grammar, the basis of this count is defined by the system steward.
     */
    count?: unsignedInt;
    /**
     * Contains extension information for property 'count'.
     */
    _count?: Element;
    /**
     * A filter that can be used in a value set compose statement when selecting concepts using a filter.
     */
    filter?: CodeSystemFilter[];
    /**
     * A property defines an additional slot through which additional information can be provided about a concept.
     */
    property?: CodeSystemProperty[];
    /**
     * Concepts that are in the code system. The concept definitions are inherently hierarchical, but the definitions must be consulted to determine what the meanings of the hierarchical relationships are.
     */
    concept?: CodeSystemConcept[];
}
/**
 * A filter that can be used in a value set compose statement when selecting concepts using a filter.
 */
export interface CodeSystemFilter {
    /**
     * Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
     */
    id?: string;
    /**
     * Contains extension information for property 'id'.
     */
    _id?: Element;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * The code that identifies this filter when it is used as a filter in [ValueSet](valueset.html#).compose.include.filter.
     */
    code: code;
    /**
     * Contains extension information for property 'code'.
     */
    _code?: Element;
    /**
     * A description of how or why the filter is used.
     */
    description?: string;
    /**
     * Contains extension information for property 'description'.
     */
    _description?: Element;
    /**
     * A list of operators that can be used with the filter.
     */
    operator: code[];
    /**
     * Contains extension information for property 'operator'.
     */
    _operator?: Element[];
    /**
     * A description of what the value for the filter should be.
     */
    value: string;
    /**
     * Contains extension information for property 'value'.
     */
    _value?: Element;
}
/**
 * A property defines an additional slot through which additional information can be provided about a concept.
 */
export interface CodeSystemProperty {
    /**
     * Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
     */
    id?: string;
    /**
     * Contains extension information for property 'id'.
     */
    _id?: Element;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * A code that is used to identify the property. The code is used internally (in CodeSystem.concept.property.code) and also externally, such as in property filters.
     */
    code: code;
    /**
     * Contains extension information for property 'code'.
     */
    _code?: Element;
    /**
     * Reference to the formal meaning of the property. One possible source of meaning is the [Concept Properties](codesystem-concept-properties.html) code system.
     */
    uri?: uri;
    /**
     * Contains extension information for property 'uri'.
     */
    _uri?: Element;
    /**
     * A description of the property- why it is defined, and how its value might be used.
     */
    description?: string;
    /**
     * Contains extension information for property 'description'.
     */
    _description?: Element;
    /**
     * The type of the property value. Properties of type "code" contain a code defined by the code system (e.g. a reference to another defined concept).
     */
    type: code;
    /**
     * Contains extension information for property 'type'.
     */
    _type?: Element;
}
/**
 * Concepts that are in the code system. The concept definitions are inherently hierarchical, but the definitions must be consulted to determine what the meanings of the hierarchical relationships are.
 */
export interface CodeSystemConcept {
    /**
     * Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
     */
    id?: string;
    /**
     * Contains extension information for property 'id'.
     */
    _id?: Element;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * A code - a text symbol - that uniquely identifies the concept within the code system.
     */
    code: code;
    /**
     * Contains extension information for property 'code'.
     */
    _code?: Element;
    /**
     * A human readable string that is the recommended default way to present this concept to a user.
     */
    display?: string;
    /**
     * Contains extension information for property 'display'.
     */
    _display?: Element;
    /**
     * The formal definition of the concept. The code system resource does not make formal definitions required, because of the prevalence of legacy systems. However, they are highly recommended, as without them there is no formal meaning associated with the concept.
     */
    definition?: string;
    /**
     * Contains extension information for property 'definition'.
     */
    _definition?: Element;
    /**
     * Additional representations for the concept - other languages, aliases, specialized purposes, used for particular purposes, etc.
     */
    designation?: CodeSystemConceptDesignation[];
    /**
     * A property value for this concept.
     */
    property?: CodeSystemConceptProperty[];
    /**
     * Defines children of a concept to produce a hierarchy of concepts. The nature of the relationships is variable (is-a/contains/categorizes) - see hierarchyMeaning.
     */
    concept?: CodeSystemConcept[];
}
/**
 * Additional representations for the concept - other languages, aliases, specialized purposes, used for particular purposes, etc.
 */
export interface CodeSystemConceptDesignation {
    /**
     * Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
     */
    id?: string;
    /**
     * Contains extension information for property 'id'.
     */
    _id?: Element;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * The language this designation is defined for.
     */
    language?: code;
    /**
     * Contains extension information for property 'language'.
     */
    _language?: Element;
    /**
     * A code that details how this designation would be used.
     */
    use?: Coding;
    /**
     * The text value for this designation.
     */
    value: string;
    /**
     * Contains extension information for property 'value'.
     */
    _value?: Element;
}
/**
 * A property value for this concept.
 */
export interface CodeSystemConceptProperty {
    /**
     * Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
     */
    id?: string;
    /**
     * Contains extension information for property 'id'.
     */
    _id?: Element;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * A code that is a reference to CodeSystem.property.code.
     */
    code: code;
    /**
     * Contains extension information for property 'code'.
     */
    _code?: Element;
    /**
     * The value of this property.
     */
    valueCode: code;
    /**
     * Contains extension information for property 'valueCode'.
     */
    _valueCode?: Element;
    /**
     * The value of this property.
     */
    valueCoding: Coding;
    /**
     * The value of this property.
     */
    valueString: string;
    /**
     * Contains extension information for property 'valueString'.
     */
    _valueString?: Element;
    /**
     * The value of this property.
     */
    valueInteger: integer;
    /**
     * Contains extension information for property 'valueInteger'.
     */
    _valueInteger?: Element;
    /**
     * The value of this property.
     */
    valueBoolean: boolean;
    /**
     * Contains extension information for property 'valueBoolean'.
     */
    _valueBoolean?: Element;
    /**
     * The value of this property.
     */
    valueDateTime: dateTime;
    /**
     * Contains extension information for property 'valueDateTime'.
     */
    _valueDateTime?: Element;
    /**
     * The value of this property.
     */
    valueDecimal: decimal;
    /**
     * Contains extension information for property 'valueDecimal'.
     */
    _valueDecimal?: Element;
}
/**
 * A reference to a code defined by a terminology system.
 */
export interface Coding {
    /**
     * Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
     */
    id?: string;
    /**
     * Contains extension information for property 'id'.
     */
    _id?: Element;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * The identification of the code system that defines the meaning of the symbol in the code.
     */
    system?: uri;
    /**
     * Contains extension information for property 'system'.
     */
    _system?: Element;
    /**
     * The version of the code system which was used when choosing this code. Note that a well-maintained code system does not need the version reported, because the meaning of codes is consistent across versions. However this cannot consistently be assured, and when the meaning is not guaranteed to be consistent, the version SHOULD be exchanged.
     */
    version?: string;
    /**
     * Contains extension information for property 'version'.
     */
    _version?: Element;
    /**
     * A symbol in syntax defined by the system. The symbol may be a predefined code or an expression in a syntax defined by the coding system (e.g. post-coordination).
     */
    code?: code;
    /**
     * Contains extension information for property 'code'.
     */
    _code?: Element;
    /**
     * A representation of the meaning of the code in the system, following the rules of the system.
     */
    display?: string;
    /**
     * Contains extension information for property 'display'.
     */
    _display?: Element;
    /**
     * Indicates that this coding was chosen by a user directly - e.g. off a pick list of available items (codes or displays).
     */
    userSelected?: boolean;
    /**
     * Contains extension information for property 'userSelected'.
     */
    _userSelected?: Element;
}
/**
 * An occurrence of information being transmitted; e.g. an alert that was sent to a responsible provider, a public health agency that was notified about a reportable condition.
 */
export interface Communication {
    /**
     * The type of the resource.
     */
    resourceType: string;
    /**
     * The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes.
     */
    id?: id;
    /**
     * Contains extension information for property 'id'.
     */
    _id?: Element;
    /**
     * The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource.
     */
    meta?: Meta;
    /**
     * A reference to a set of rules that were followed when the resource was constructed, and which must be understood when processing the content. Often, this is a reference to an implementation guide that defines the special rules along with other profiles etc.
     */
    implicitRules?: uri;
    /**
     * Contains extension information for property 'implicitRules'.
     */
    _implicitRules?: Element;
    /**
     * The base language in which the resource is written.
     */
    language?: code;
    /**
     * Contains extension information for property 'language'.
     */
    _language?: Element;
    /**
     * A human-readable narrative that contains a summary of the resource and can be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it "clinically safe" for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety.
     */
    text?: Narrative;
    /**
     * These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, and nor can they have their own independent transaction scope.
     */
    contained?: Resource[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * Business identifiers assigned to this communication by the performer or other systems which remain constant as the resource is updated and propagates from server to server.
     */
    identifier?: Identifier[];
    /**
     * The URL pointing to a FHIR-defined protocol, guideline, orderset or other definition that is adhered to in whole or in part by this Communication.
     */
    instantiatesCanonical?: canonical[];
    /**
     * The URL pointing to an externally maintained protocol, guideline, orderset or other definition that is adhered to in whole or in part by this Communication.
     */
    instantiatesUri?: uri[];
    /**
     * Contains extension information for property 'instantiatesUri'.
     */
    _instantiatesUri?: Element[];
    /**
     * An order, proposal or plan fulfilled in whole or in part by this Communication.
     */
    basedOn?: Reference[];
    /**
     * Part of this action.
     */
    partOf?: Reference[];
    /**
     * Prior communication that this communication is in response to.
     */
    inResponseTo?: Reference[];
    /**
     * The status of the transmission.
     */
    status: code;
    /**
     * Contains extension information for property 'status'.
     */
    _status?: Element;
    /**
     * Captures the reason for the current state of the Communication.
     */
    statusReason?: CodeableConcept;
    /**
     * The type of message conveyed such as alert, notification, reminder, instruction, etc.
     */
    category?: CodeableConcept[];
    /**
     * Characterizes how quickly the planned or in progress communication must be addressed. Includes concepts such as stat, urgent, routine.
     */
    priority?: code;
    /**
     * Contains extension information for property 'priority'.
     */
    _priority?: Element;
    /**
     * A channel that was used for this communication (e.g. email, fax).
     */
    medium?: CodeableConcept[];
    /**
     * The patient or group that was the focus of this communication.
     */
    subject?: Reference;
    /**
     * Description of the purpose/content, similar to a subject line in an email.
     */
    topic?: CodeableConcept;
    /**
     * Other resources that pertain to this communication and to which this communication should be associated.
     */
    about?: Reference[];
    /**
     * The Encounter during which this Communication was created or to which the creation of this record is tightly associated.
     */
    encounter?: Reference;
    /**
     * The time when this communication was sent.
     */
    sent?: dateTime;
    /**
     * Contains extension information for property 'sent'.
     */
    _sent?: Element;
    /**
     * The time when this communication arrived at the destination.
     */
    received?: dateTime;
    /**
     * Contains extension information for property 'received'.
     */
    _received?: Element;
    /**
     * The entity (e.g. person, organization, clinical information system, care team or device) which was the target of the communication. If receipts need to be tracked by an individual, a separate resource instance will need to be created for each recipient.  Multiple recipient communications are intended where either receipts are not tracked (e.g. a mass mail-out) or a receipt is captured in aggregate (all emails confirmed received by a particular time).
     */
    recipient?: Reference[];
    /**
     * The entity (e.g. person, organization, clinical information system, or device) which was the source of the communication.
     */
    sender?: Reference;
    /**
     * The reason or justification for the communication.
     */
    reasonCode?: CodeableConcept[];
    /**
     * Indicates another resource whose existence justifies this communication.
     */
    reasonReference?: Reference[];
    /**
     * Text, attachment(s), or resource(s) that was communicated to the recipient.
     */
    payload?: CommunicationPayload[];
    /**
     * Additional notes or commentary about the communication by the sender, receiver or other interested parties.
     */
    note?: Annotation[];
}
/**
 * Text, attachment(s), or resource(s) that was communicated to the recipient.
 */
export interface CommunicationPayload {
    /**
     * Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
     */
    id?: string;
    /**
     * Contains extension information for property 'id'.
     */
    _id?: Element;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * A communicated content (or for multi-part communications, one portion of the communication).
     */
    contentString: string;
    /**
     * Contains extension information for property 'contentString'.
     */
    _contentString?: Element;
    /**
     * A communicated content (or for multi-part communications, one portion of the communication).
     */
    contentAttachment: Attachment;
    /**
     * A communicated content (or for multi-part communications, one portion of the communication).
     */
    contentReference: Reference;
}
/**
 * A request to convey information; e.g. the CDS system proposes that an alert be sent to a responsible provider, the CDS system proposes that the public health agency be notified about a reportable condition.
 */
export interface CommunicationRequest {
    /**
     * The type of the resource.
     */
    resourceType: string;
    /**
     * The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes.
     */
    id?: id;
    /**
     * Contains extension information for property 'id'.
     */
    _id?: Element;
    /**
     * The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource.
     */
    meta?: Meta;
    /**
     * A reference to a set of rules that were followed when the resource was constructed, and which must be understood when processing the content. Often, this is a reference to an implementation guide that defines the special rules along with other profiles etc.
     */
    implicitRules?: uri;
    /**
     * Contains extension information for property 'implicitRules'.
     */
    _implicitRules?: Element;
    /**
     * The base language in which the resource is written.
     */
    language?: code;
    /**
     * Contains extension information for property 'language'.
     */
    _language?: Element;
    /**
     * A human-readable narrative that contains a summary of the resource and can be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it "clinically safe" for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety.
     */
    text?: Narrative;
    /**
     * These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, and nor can they have their own independent transaction scope.
     */
    contained?: Resource[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * Business identifiers assigned to this communication request by the performer or other systems which remain constant as the resource is updated and propagates from server to server.
     */
    identifier?: Identifier[];
    /**
     * A plan or proposal that is fulfilled in whole or in part by this request.
     */
    basedOn?: Reference[];
    /**
     * Completed or terminated request(s) whose function is taken by this new request.
     */
    replaces?: Reference[];
    /**
     * A shared identifier common to all requests that were authorized more or less simultaneously by a single author, representing the identifier of the requisition, prescription or similar form.
     */
    groupIdentifier?: Identifier;
    /**
     * The status of the proposal or order.
     */
    status: code;
    /**
     * Contains extension information for property 'status'.
     */
    _status?: Element;
    /**
     * Captures the reason for the current state of the CommunicationRequest.
     */
    statusReason?: CodeableConcept;
    /**
     * The type of message to be sent such as alert, notification, reminder, instruction, etc.
     */
    category?: CodeableConcept[];
    /**
     * Characterizes how quickly the proposed act must be initiated. Includes concepts such as stat, urgent, routine.
     */
    priority?: code;
    /**
     * Contains extension information for property 'priority'.
     */
    _priority?: Element;
    /**
     * If true indicates that the CommunicationRequest is asking for the specified action to *not* occur.
     */
    doNotPerform?: boolean;
    /**
     * Contains extension information for property 'doNotPerform'.
     */
    _doNotPerform?: Element;
    /**
     * A channel that was used for this communication (e.g. email, fax).
     */
    medium?: CodeableConcept[];
    /**
     * The patient or group that is the focus of this communication request.
     */
    subject?: Reference;
    /**
     * Other resources that pertain to this communication request and to which this communication request should be associated.
     */
    about?: Reference[];
    /**
     * The Encounter during which this CommunicationRequest was created or to which the creation of this record is tightly associated.
     */
    encounter?: Reference;
    /**
     * Text, attachment(s), or resource(s) to be communicated to the recipient.
     */
    payload?: CommunicationRequestPayload[];
    /**
     * The time when this communication is to occur.
     */
    occurrenceDateTime?: dateTime;
    /**
     * Contains extension information for property 'occurrenceDateTime'.
     */
    _occurrenceDateTime?: Element;
    /**
     * The time when this communication is to occur.
     */
    occurrencePeriod?: Period;
    /**
     * For draft requests, indicates the date of initial creation.  For requests with other statuses, indicates the date of activation.
     */
    authoredOn?: dateTime;
    /**
     * Contains extension information for property 'authoredOn'.
     */
    _authoredOn?: Element;
    /**
     * The device, individual, or organization who initiated the request and has responsibility for its activation.
     */
    requester?: Reference;
    /**
     * The entity (e.g. person, organization, clinical information system, device, group, or care team) which is the intended target of the communication.
     */
    recipient?: Reference[];
    /**
     * The entity (e.g. person, organization, clinical information system, or device) which is to be the source of the communication.
     */
    sender?: Reference;
    /**
     * Describes why the request is being made in coded or textual form.
     */
    reasonCode?: CodeableConcept[];
    /**
     * Indicates another resource whose existence justifies this request.
     */
    reasonReference?: Reference[];
    /**
     * Comments made about the request by the requester, sender, recipient, subject or other participants.
     */
    note?: Annotation[];
}
/**
 * Text, attachment(s), or resource(s) to be communicated to the recipient.
 */
export interface CommunicationRequestPayload {
    /**
     * Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
     */
    id?: string;
    /**
     * Contains extension information for property 'id'.
     */
    _id?: Element;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * The communicated content (or for multi-part communications, one portion of the communication).
     */
    contentString: string;
    /**
     * Contains extension information for property 'contentString'.
     */
    _contentString?: Element;
    /**
     * The communicated content (or for multi-part communications, one portion of the communication).
     */
    contentAttachment: Attachment;
    /**
     * The communicated content (or for multi-part communications, one portion of the communication).
     */
    contentReference: Reference;
}
/**
 * A compartment definition that defines how resources are accessed on a server.
 */
export interface CompartmentDefinition {
    /**
     * The type of the resource.
     */
    resourceType: string;
    /**
     * The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes.
     */
    id?: id;
    /**
     * Contains extension information for property 'id'.
     */
    _id?: Element;
    /**
     * The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource.
     */
    meta?: Meta;
    /**
     * A reference to a set of rules that were followed when the resource was constructed, and which must be understood when processing the content. Often, this is a reference to an implementation guide that defines the special rules along with other profiles etc.
     */
    implicitRules?: uri;
    /**
     * Contains extension information for property 'implicitRules'.
     */
    _implicitRules?: Element;
    /**
     * The base language in which the resource is written.
     */
    language?: code;
    /**
     * Contains extension information for property 'language'.
     */
    _language?: Element;
    /**
     * A human-readable narrative that contains a summary of the resource and can be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it "clinically safe" for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety.
     */
    text?: Narrative;
    /**
     * These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, and nor can they have their own independent transaction scope.
     */
    contained?: Resource[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * An absolute URI that is used to identify this compartment definition when it is referenced in a specification, model, design or an instance; also called its canonical identifier. This SHOULD be globally unique and SHOULD be a literal address at which at which an authoritative instance of this compartment definition is (or will be) published. This URL can be the target of a canonical reference. It SHALL remain the same when the compartment definition is stored on different servers.
     */
    url: uri;
    /**
     * Contains extension information for property 'url'.
     */
    _url?: Element;
    /**
     * The identifier that is used to identify this version of the compartment definition when it is referenced in a specification, model, design or instance. This is an arbitrary value managed by the compartment definition author and is not expected to be globally unique. For example, it might be a timestamp (e.g. yyyymmdd) if a managed version is not available. There is also no expectation that versions can be placed in a lexicographical sequence.
     */
    version?: string;
    /**
     * Contains extension information for property 'version'.
     */
    _version?: Element;
    /**
     * A natural language name identifying the compartment definition. This name should be usable as an identifier for the module by machine processing applications such as code generation.
     */
    name: string;
    /**
     * Contains extension information for property 'name'.
     */
    _name?: Element;
    /**
     * The status of this compartment definition. Enables tracking the life-cycle of the content.
     */
    status: code;
    /**
     * Contains extension information for property 'status'.
     */
    _status?: Element;
    /**
     * A Boolean value to indicate that this compartment definition is authored for testing purposes (or education/evaluation/marketing) and is not intended to be used for genuine usage.
     */
    experimental?: boolean;
    /**
     * Contains extension information for property 'experimental'.
     */
    _experimental?: Element;
    /**
     * The date  (and optionally time) when the compartment definition was published. The date must change when the business version changes and it must change if the status code changes. In addition, it should change when the substantive content of the compartment definition changes.
     */
    date?: dateTime;
    /**
     * Contains extension information for property 'date'.
     */
    _date?: Element;
    /**
     * The name of the organization or individual that published the compartment definition.
     */
    publisher?: string;
    /**
     * Contains extension information for property 'publisher'.
     */
    _publisher?: Element;
    /**
     * Contact details to assist a user in finding and communicating with the publisher.
     */
    contact?: ContactDetail[];
    /**
     * A free text natural language description of the compartment definition from a consumer's perspective.
     */
    description?: markdown;
    /**
     * Contains extension information for property 'description'.
     */
    _description?: Element;
    /**
     * The content was developed with a focus and intent of supporting the contexts that are listed. These contexts may be general categories (gender, age, ...) or may be references to specific programs (insurance plans, studies, ...) and may be used to assist with indexing and searching for appropriate compartment definition instances.
     */
    useContext?: UsageContext[];
    /**
     * Explanation of why this compartment definition is needed and why it has been designed as it has.
     */
    purpose?: markdown;
    /**
     * Contains extension information for property 'purpose'.
     */
    _purpose?: Element;
    /**
     * Which compartment this definition describes.
     */
    code: code;
    /**
     * Contains extension information for property 'code'.
     */
    _code?: Element;
    /**
     * Whether the search syntax is supported,.
     */
    search: boolean;
    /**
     * Contains extension information for property 'search'.
     */
    _search?: Element;
    /**
     * Information about how a resource is related to the compartment.
     */
    resource?: CompartmentDefinitionResource[];
}
/**
 * Information about how a resource is related to the compartment.
 */
export interface CompartmentDefinitionResource {
    /**
     * Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
     */
    id?: string;
    /**
     * Contains extension information for property 'id'.
     */
    _id?: Element;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * The name of a resource supported by the server.
     */
    code: code;
    /**
     * Contains extension information for property 'code'.
     */
    _code?: Element;
    /**
     * The name of a search parameter that represents the link to the compartment. More than one may be listed because a resource may be linked to a compartment in more than one way,.
     */
    param?: string[];
    /**
     * Contains extension information for property 'param'.
     */
    _param?: Element[];
    /**
     * Additional documentation about the resource and compartment.
     */
    documentation?: string;
    /**
     * Contains extension information for property 'documentation'.
     */
    _documentation?: Element;
}
/**
 * A set of healthcare-related information that is assembled together into a single logical package that provides a single coherent statement of meaning, establishes its own context and that has clinical attestation with regard to who is making the statement. A Composition defines the structure and narrative content necessary for a document. However, a Composition alone does not constitute a document. Rather, the Composition must be the first entry in a Bundle where Bundle.type=document, and any other resources referenced from Composition must be included as subsequent entries in the Bundle (for example Patient, Practitioner, Encounter, etc.).
 */
export interface Composition {
    /**
     * The type of the resource.
     */
    resourceType: string;
    /**
     * The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes.
     */
    id?: id;
    /**
     * Contains extension information for property 'id'.
     */
    _id?: Element;
    /**
     * The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource.
     */
    meta?: Meta;
    /**
     * A reference to a set of rules that were followed when the resource was constructed, and which must be understood when processing the content. Often, this is a reference to an implementation guide that defines the special rules along with other profiles etc.
     */
    implicitRules?: uri;
    /**
     * Contains extension information for property 'implicitRules'.
     */
    _implicitRules?: Element;
    /**
     * The base language in which the resource is written.
     */
    language?: code;
    /**
     * Contains extension information for property 'language'.
     */
    _language?: Element;
    /**
     * A human-readable narrative that contains a summary of the resource and can be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it "clinically safe" for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety.
     */
    text?: Narrative;
    /**
     * These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, and nor can they have their own independent transaction scope.
     */
    contained?: Resource[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * A version-independent identifier for the Composition. This identifier stays constant as the composition is changed over time.
     */
    identifier?: Identifier;
    /**
     * The workflow/clinical status of this composition. The status is a marker for the clinical standing of the document.
     */
    status: code;
    /**
     * Contains extension information for property 'status'.
     */
    _status?: Element;
    /**
     * Specifies the particular kind of composition (e.g. History and Physical, Discharge Summary, Progress Note). This usually equates to the purpose of making the composition.
     */
    type: CodeableConcept;
    /**
     * A categorization for the type of the composition - helps for indexing and searching. This may be implied by or derived from the code specified in the Composition Type.
     */
    category?: CodeableConcept[];
    /**
     * Who or what the composition is about. The composition can be about a person, (patient or healthcare practitioner), a device (e.g. a machine) or even a group of subjects (such as a document about a herd of livestock, or a set of patients that share a common exposure).
     */
    subject?: Reference;
    /**
     * Describes the clinical encounter or type of care this documentation is associated with.
     */
    encounter?: Reference;
    /**
     * The composition editing time, when the composition was last logically changed by the author.
     */
    date: dateTime;
    /**
     * Contains extension information for property 'date'.
     */
    _date?: Element;
    /**
     * Identifies who is responsible for the information in the composition, not necessarily who typed it in.
     */
    author: Reference[];
    /**
     * Official human-readable label for the composition.
     */
    title: string;
    /**
     * Contains extension information for property 'title'.
     */
    _title?: Element;
    /**
     * The code specifying the level of confidentiality of the Composition.
     */
    confidentiality?: code;
    /**
     * Contains extension information for property 'confidentiality'.
     */
    _confidentiality?: Element;
    /**
     * A participant who has attested to the accuracy of the composition/document.
     */
    attester?: CompositionAttester[];
    /**
     * Identifies the organization or group who is responsible for ongoing maintenance of and access to the composition/document information.
     */
    custodian?: Reference;
    /**
     * Relationships that this composition has with other compositions or documents that already exist.
     */
    relatesTo?: CompositionRelatesTo[];
    /**
     * The clinical service, such as a colonoscopy or an appendectomy, being documented.
     */
    event?: CompositionEvent[];
    /**
     * The root of the sections that make up the composition.
     */
    section?: CompositionSection[];
}
/**
 * A participant who has attested to the accuracy of the composition/document.
 */
export interface CompositionAttester {
    /**
     * Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
     */
    id?: string;
    /**
     * Contains extension information for property 'id'.
     */
    _id?: Element;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * The type of attestation the authenticator offers.
     */
    mode: code;
    /**
     * Contains extension information for property 'mode'.
     */
    _mode?: Element;
    /**
     * When the composition was attested by the party.
     */
    time?: dateTime;
    /**
     * Contains extension information for property 'time'.
     */
    _time?: Element;
    /**
     * Who attested the composition in the specified way.
     */
    party?: Reference;
}
/**
 * Relationships that this composition has with other compositions or documents that already exist.
 */
export interface CompositionRelatesTo {
    /**
     * Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
     */
    id?: string;
    /**
     * Contains extension information for property 'id'.
     */
    _id?: Element;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * The type of relationship that this composition has with anther composition or document.
     */
    code: code;
    /**
     * Contains extension information for property 'code'.
     */
    _code?: Element;
    /**
     * The target composition/document of this relationship.
     */
    targetIdentifier: Identifier;
    /**
     * The target composition/document of this relationship.
     */
    targetReference: Reference;
}
/**
 * The clinical service, such as a colonoscopy or an appendectomy, being documented.
 */
export interface CompositionEvent {
    /**
     * Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
     */
    id?: string;
    /**
     * Contains extension information for property 'id'.
     */
    _id?: Element;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * This list of codes represents the main clinical acts, such as a colonoscopy or an appendectomy, being documented. In some cases, the event is inherent in the typeCode, such as a "History and Physical Report" in which the procedure being documented is necessarily a "History and Physical" act.
     */
    code?: CodeableConcept[];
    /**
     * The period of time covered by the documentation. There is no assertion that the documentation is a complete representation for this period, only that it documents events during this time.
     */
    period?: Period;
    /**
     * The description and/or reference of the event(s) being documented. For example, this could be used to document such a colonoscopy or an appendectomy.
     */
    detail?: Reference[];
}
/**
 * The root of the sections that make up the composition.
 */
export interface CompositionSection {
    /**
     * Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
     */
    id?: string;
    /**
     * Contains extension information for property 'id'.
     */
    _id?: Element;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * The label for this particular section.  This will be part of the rendered content for the document, and is often used to build a table of contents.
     */
    title?: string;
    /**
     * Contains extension information for property 'title'.
     */
    _title?: Element;
    /**
     * A code identifying the kind of content contained within the section. This must be consistent with the section title.
     */
    code?: CodeableConcept;
    /**
     * Identifies who is responsible for the information in this section, not necessarily who typed it in.
     */
    author?: Reference[];
    /**
     * The actual focus of the section when it is not the subject of the composition, but instead represents something or someone associated with the subject such as (for a patient subject) a spouse, parent, fetus, or donor. If not focus is specified, the focus is assumed to be focus of the parent section, or, for a section in the Composition itself, the subject of the composition. Sections with a focus SHALL only include resources where the logical subject (patient, subject, focus, etc.) matches the section focus, or the resources have no logical subject (few resources).
     */
    focus?: Reference;
    /**
     * A human-readable narrative that contains the attested content of the section, used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it "clinically safe" for a human to just read the narrative.
     */
    text?: Narrative;
    /**
     * How the entry list was prepared - whether it is a working list that is suitable for being maintained on an ongoing basis, or if it represents a snapshot of a list of items from another source, or whether it is a prepared list where items may be marked as added, modified or deleted.
     */
    mode?: code;
    /**
     * Contains extension information for property 'mode'.
     */
    _mode?: Element;
    /**
     * Specifies the order applied to the items in the section entries.
     */
    orderedBy?: CodeableConcept;
    /**
     * A reference to the actual resource from which the narrative in the section is derived.
     */
    entry?: Reference[];
    /**
     * If the section is empty, why the list is empty. An empty section typically has some text explaining the empty reason.
     */
    emptyReason?: CodeableConcept;
    /**
     * A nested sub-section within this section.
     */
    section?: CompositionSection[];
}
/**
 * A statement of relationships from one set of concepts to one or more other concepts - either concepts in code systems, or data element/data element concepts, or classes in class models.
 */
export interface ConceptMap {
    /**
     * The type of the resource.
     */
    resourceType: string;
    /**
     * The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes.
     */
    id?: id;
    /**
     * Contains extension information for property 'id'.
     */
    _id?: Element;
    /**
     * The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource.
     */
    meta?: Meta;
    /**
     * A reference to a set of rules that were followed when the resource was constructed, and which must be understood when processing the content. Often, this is a reference to an implementation guide that defines the special rules along with other profiles etc.
     */
    implicitRules?: uri;
    /**
     * Contains extension information for property 'implicitRules'.
     */
    _implicitRules?: Element;
    /**
     * The base language in which the resource is written.
     */
    language?: code;
    /**
     * Contains extension information for property 'language'.
     */
    _language?: Element;
    /**
     * A human-readable narrative that contains a summary of the resource and can be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it "clinically safe" for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety.
     */
    text?: Narrative;
    /**
     * These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, and nor can they have their own independent transaction scope.
     */
    contained?: Resource[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * An absolute URI that is used to identify this concept map when it is referenced in a specification, model, design or an instance; also called its canonical identifier. This SHOULD be globally unique and SHOULD be a literal address at which at which an authoritative instance of this concept map is (or will be) published. This URL can be the target of a canonical reference. It SHALL remain the same when the concept map is stored on different servers.
     */
    url?: uri;
    /**
     * Contains extension information for property 'url'.
     */
    _url?: Element;
    /**
     * A formal identifier that is used to identify this concept map when it is represented in other formats, or referenced in a specification, model, design or an instance.
     */
    identifier?: Identifier;
    /**
     * The identifier that is used to identify this version of the concept map when it is referenced in a specification, model, design or instance. This is an arbitrary value managed by the concept map author and is not expected to be globally unique. For example, it might be a timestamp (e.g. yyyymmdd) if a managed version is not available. There is also no expectation that versions can be placed in a lexicographical sequence.
     */
    version?: string;
    /**
     * Contains extension information for property 'version'.
     */
    _version?: Element;
    /**
     * A natural language name identifying the concept map. This name should be usable as an identifier for the module by machine processing applications such as code generation.
     */
    name?: string;
    /**
     * Contains extension information for property 'name'.
     */
    _name?: Element;
    /**
     * A short, descriptive, user-friendly title for the concept map.
     */
    title?: string;
    /**
     * Contains extension information for property 'title'.
     */
    _title?: Element;
    /**
     * The status of this concept map. Enables tracking the life-cycle of the content.
     */
    status: code;
    /**
     * Contains extension information for property 'status'.
     */
    _status?: Element;
    /**
     * A Boolean value to indicate that this concept map is authored for testing purposes (or education/evaluation/marketing) and is not intended to be used for genuine usage.
     */
    experimental?: boolean;
    /**
     * Contains extension information for property 'experimental'.
     */
    _experimental?: Element;
    /**
     * The date  (and optionally time) when the concept map was published. The date must change when the business version changes and it must change if the status code changes. In addition, it should change when the substantive content of the concept map changes.
     */
    date?: dateTime;
    /**
     * Contains extension information for property 'date'.
     */
    _date?: Element;
    /**
     * The name of the organization or individual that published the concept map.
     */
    publisher?: string;
    /**
     * Contains extension information for property 'publisher'.
     */
    _publisher?: Element;
    /**
     * Contact details to assist a user in finding and communicating with the publisher.
     */
    contact?: ContactDetail[];
    /**
     * A free text natural language description of the concept map from a consumer's perspective.
     */
    description?: markdown;
    /**
     * Contains extension information for property 'description'.
     */
    _description?: Element;
    /**
     * The content was developed with a focus and intent of supporting the contexts that are listed. These contexts may be general categories (gender, age, ...) or may be references to specific programs (insurance plans, studies, ...) and may be used to assist with indexing and searching for appropriate concept map instances.
     */
    useContext?: UsageContext[];
    /**
     * A legal or geographic region in which the concept map is intended to be used.
     */
    jurisdiction?: CodeableConcept[];
    /**
     * Explanation of why this concept map is needed and why it has been designed as it has.
     */
    purpose?: markdown;
    /**
     * Contains extension information for property 'purpose'.
     */
    _purpose?: Element;
    /**
     * A copyright statement relating to the concept map and/or its contents. Copyright statements are generally legal restrictions on the use and publishing of the concept map.
     */
    copyright?: markdown;
    /**
     * Contains extension information for property 'copyright'.
     */
    _copyright?: Element;
    /**
     * Identifier for the source value set that contains the concepts that are being mapped and provides context for the mappings.
     */
    sourceUri?: uri;
    /**
     * Contains extension information for property 'sourceUri'.
     */
    _sourceUri?: Element;
    /**
     * Identifier for the source value set that contains the concepts that are being mapped and provides context for the mappings.
     */
    sourceCanonical?: canonical;
    /**
     * The target value set provides context for the mappings. Note that the mapping is made between concepts, not between value sets, but the value set provides important context about how the concept mapping choices are made.
     */
    targetUri?: uri;
    /**
     * Contains extension information for property 'targetUri'.
     */
    _targetUri?: Element;
    /**
     * The target value set provides context for the mappings. Note that the mapping is made between concepts, not between value sets, but the value set provides important context about how the concept mapping choices are made.
     */
    targetCanonical?: canonical;
    /**
     * A group of mappings that all have the same source and target system.
     */
    group?: ConceptMapGroup[];
}
/**
 * A group of mappings that all have the same source and target system.
 */
export interface ConceptMapGroup {
    /**
     * Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
     */
    id?: string;
    /**
     * Contains extension information for property 'id'.
     */
    _id?: Element;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * An absolute URI that identifies the source system where the concepts to be mapped are defined.
     */
    source?: uri;
    /**
     * Contains extension information for property 'source'.
     */
    _source?: Element;
    /**
     * The specific version of the code system, as determined by the code system authority.
     */
    sourceVersion?: string;
    /**
     * Contains extension information for property 'sourceVersion'.
     */
    _sourceVersion?: Element;
    /**
     * An absolute URI that identifies the target system that the concepts will be mapped to.
     */
    target?: uri;
    /**
     * Contains extension information for property 'target'.
     */
    _target?: Element;
    /**
     * The specific version of the code system, as determined by the code system authority.
     */
    targetVersion?: string;
    /**
     * Contains extension information for property 'targetVersion'.
     */
    _targetVersion?: Element;
    /**
     * Mappings for an individual concept in the source to one or more concepts in the target.
     */
    element: ConceptMapGroupElement[];
    /**
     * What to do when there is no mapping for the source concept. "Unmapped" does not include codes that are unmatched, and the unmapped element is ignored in a code is specified to have equivalence = unmatched.
     */
    unmapped?: ConceptMapGroupUnmapped;
}
/**
 * Mappings for an individual concept in the source to one or more concepts in the target.
 */
export interface ConceptMapGroupElement {
    /**
     * Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
     */
    id?: string;
    /**
     * Contains extension information for property 'id'.
     */
    _id?: Element;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * Identity (code or path) or the element/item being mapped.
     */
    code?: code;
    /**
     * Contains extension information for property 'code'.
     */
    _code?: Element;
    /**
     * The display for the code. The display is only provided to help editors when editing the concept map.
     */
    display?: string;
    /**
     * Contains extension information for property 'display'.
     */
    _display?: Element;
    /**
     * A concept from the target value set that this concept maps to.
     */
    target?: ConceptMapGroupElementTarget[];
}
/**
 * A concept from the target value set that this concept maps to.
 */
export interface ConceptMapGroupElementTarget {
    /**
     * Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
     */
    id?: string;
    /**
     * Contains extension information for property 'id'.
     */
    _id?: Element;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * Identity (code or path) or the element/item that the map refers to.
     */
    code?: code;
    /**
     * Contains extension information for property 'code'.
     */
    _code?: Element;
    /**
     * The display for the code. The display is only provided to help editors when editing the concept map.
     */
    display?: string;
    /**
     * Contains extension information for property 'display'.
     */
    _display?: Element;
    /**
     * The equivalence between the source and target concepts (counting for the dependencies and products). The equivalence is read from target to source (e.g. the target is 'wider' than the source).
     */
    equivalence: code;
    /**
     * Contains extension information for property 'equivalence'.
     */
    _equivalence?: Element;
    /**
     * A description of status/issues in mapping that conveys additional information not represented in  the structured data.
     */
    comment?: string;
    /**
     * Contains extension information for property 'comment'.
     */
    _comment?: Element;
    /**
     * A set of additional dependencies for this mapping to hold. This mapping is only applicable if the specified element can be resolved, and it has the specified value.
     */
    dependsOn?: ConceptMapGroupElementTargetDependsOn[];
    /**
     * A set of additional outcomes from this mapping to other elements. To properly execute this mapping, the specified element must be mapped to some data element or source that is in context. The mapping may still be useful without a place for the additional data elements, but the equivalence cannot be relied on.
     */
    product?: ConceptMapGroupElementTargetDependsOn[];
}
/**
 * A set of additional dependencies for this mapping to hold. This mapping is only applicable if the specified element can be resolved, and it has the specified value.
 */
export interface ConceptMapGroupElementTargetDependsOn {
    /**
     * Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
     */
    id?: string;
    /**
     * Contains extension information for property 'id'.
     */
    _id?: Element;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * A reference to an element that holds a coded value that corresponds to a code system property. The idea is that the information model carries an element somewhere that is labeled to correspond with a code system property.
     */
    property: uri;
    /**
     * Contains extension information for property 'property'.
     */
    _property?: Element;
    /**
     * An absolute URI that identifies the code system of the dependency code (if the source/dependency is a value set that crosses code systems).
     */
    system?: canonical;
    /**
     * Identity (code or path) or the element/item/ValueSet/text that the map depends on / refers to.
     */
    value: string;
    /**
     * Contains extension information for property 'value'.
     */
    _value?: Element;
    /**
     * The display for the code. The display is only provided to help editors when editing the concept map.
     */
    display?: string;
    /**
     * Contains extension information for property 'display'.
     */
    _display?: Element;
}
/**
 * What to do when there is no mapping for the source concept. "Unmapped" does not include codes that are unmatched, and the unmapped element is ignored in a code is specified to have equivalence = unmatched.
 */
export interface ConceptMapGroupUnmapped {
    /**
     * Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
     */
    id?: string;
    /**
     * Contains extension information for property 'id'.
     */
    _id?: Element;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * Defines which action to take if there is no match for the source concept in the target system designated for the group. One of 3 actions are possible: use the unmapped code (this is useful when doing a mapping between versions, and only a few codes have changed), use a fixed code (a default code), or alternatively, a reference to a different concept map can be provided (by canonical URL).
     */
    mode: code;
    /**
     * Contains extension information for property 'mode'.
     */
    _mode?: Element;
    /**
     * The fixed code to use when the mode = 'fixed'  - all unmapped codes are mapped to a single fixed code.
     */
    code?: code;
    /**
     * Contains extension information for property 'code'.
     */
    _code?: Element;
    /**
     * The display for the code. The display is only provided to help editors when editing the concept map.
     */
    display?: string;
    /**
     * Contains extension information for property 'display'.
     */
    _display?: Element;
    /**
     * The canonical reference to an additional ConceptMap resource instance to use for mapping if this ConceptMap resource contains no matching mapping for the source concept.
     */
    url?: canonical;
}
/**
 * A clinical condition, problem, diagnosis, or other event, situation, issue, or clinical concept that has risen to a level of concern.
 */
export interface Condition {
    /**
     * The type of the resource.
     */
    resourceType: string;
    /**
     * The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes.
     */
    id?: id;
    /**
     * Contains extension information for property 'id'.
     */
    _id?: Element;
    /**
     * The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource.
     */
    meta?: Meta;
    /**
     * A reference to a set of rules that were followed when the resource was constructed, and which must be understood when processing the content. Often, this is a reference to an implementation guide that defines the special rules along with other profiles etc.
     */
    implicitRules?: uri;
    /**
     * Contains extension information for property 'implicitRules'.
     */
    _implicitRules?: Element;
    /**
     * The base language in which the resource is written.
     */
    language?: code;
    /**
     * Contains extension information for property 'language'.
     */
    _language?: Element;
    /**
     * A human-readable narrative that contains a summary of the resource and can be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it "clinically safe" for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety.
     */
    text?: Narrative;
    /**
     * These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, and nor can they have their own independent transaction scope.
     */
    contained?: Resource[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * Business identifiers assigned to this condition by the performer or other systems which remain constant as the resource is updated and propagates from server to server.
     */
    identifier?: Identifier[];
    /**
     * The clinical status of the condition.
     */
    clinicalStatus?: CodeableConcept;
    /**
     * The verification status to support the clinical status of the condition.
     */
    verificationStatus?: CodeableConcept;
    /**
     * A category assigned to the condition.
     */
    category?: CodeableConcept[];
    /**
     * A subjective assessment of the severity of the condition as evaluated by the clinician.
     */
    severity?: CodeableConcept;
    /**
     * Identification of the condition, problem or diagnosis.
     */
    code?: CodeableConcept;
    /**
     * The anatomical location where this condition manifests itself.
     */
    bodySite?: CodeableConcept[];
    /**
     * Indicates the patient or group who the condition record is associated with.
     */
    subject: Reference;
    /**
     * The Encounter during which this Condition was created or to which the creation of this record is tightly associated.
     */
    encounter?: Reference;
    /**
     * Estimated or actual date or date-time  the condition began, in the opinion of the clinician.
     */
    onsetDateTime?: dateTime;
    /**
     * Contains extension information for property 'onsetDateTime'.
     */
    _onsetDateTime?: Element;
    /**
     * Estimated or actual date or date-time  the condition began, in the opinion of the clinician.
     */
    onsetAge?: Age;
    /**
     * Estimated or actual date or date-time  the condition began, in the opinion of the clinician.
     */
    onsetPeriod?: Period;
    /**
     * Estimated or actual date or date-time  the condition began, in the opinion of the clinician.
     */
    onsetRange?: Range;
    /**
     * Estimated or actual date or date-time  the condition began, in the opinion of the clinician.
     */
    onsetString?: string;
    /**
     * Contains extension information for property 'onsetString'.
     */
    _onsetString?: Element;
    /**
     * The date or estimated date that the condition resolved or went into remission. This is called "abatement" because of the many overloaded connotations associated with "remission" or "resolution" - Conditions are never really resolved, but they can abate.
     */
    abatementDateTime?: dateTime;
    /**
     * Contains extension information for property 'abatementDateTime'.
     */
    _abatementDateTime?: Element;
    /**
     * The date or estimated date that the condition resolved or went into remission. This is called "abatement" because of the many overloaded connotations associated with "remission" or "resolution" - Conditions are never really resolved, but they can abate.
     */
    abatementAge?: Age;
    /**
     * The date or estimated date that the condition resolved or went into remission. This is called "abatement" because of the many overloaded connotations associated with "remission" or "resolution" - Conditions are never really resolved, but they can abate.
     */
    abatementPeriod?: Period;
    /**
     * The date or estimated date that the condition resolved or went into remission. This is called "abatement" because of the many overloaded connotations associated with "remission" or "resolution" - Conditions are never really resolved, but they can abate.
     */
    abatementRange?: Range;
    /**
     * The date or estimated date that the condition resolved or went into remission. This is called "abatement" because of the many overloaded connotations associated with "remission" or "resolution" - Conditions are never really resolved, but they can abate.
     */
    abatementString?: string;
    /**
     * Contains extension information for property 'abatementString'.
     */
    _abatementString?: Element;
    /**
     * The recordedDate represents when this particular Condition record was created in the system, which is often a system-generated date.
     */
    recordedDate?: dateTime;
    /**
     * Contains extension information for property 'recordedDate'.
     */
    _recordedDate?: Element;
    /**
     * Individual who recorded the record and takes responsibility for its content.
     */
    recorder?: Reference;
    /**
     * Individual who is making the condition statement.
     */
    asserter?: Reference;
    /**
     * Clinical stage or grade of a condition. May include formal severity assessments.
     */
    stage?: ConditionStage[];
    /**
     * Supporting evidence / manifestations that are the basis of the Condition's verification status, such as evidence that confirmed or refuted the condition.
     */
    evidence?: ConditionEvidence[];
    /**
     * Additional information about the Condition. This is a general notes/comments entry  for description of the Condition, its diagnosis and prognosis.
     */
    note?: Annotation[];
}
/**
 * Clinical stage or grade of a condition. May include formal severity assessments.
 */
export interface ConditionStage {
    /**
     * Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
     */
    id?: string;
    /**
     * Contains extension information for property 'id'.
     */
    _id?: Element;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * A simple summary of the stage such as "Stage 3". The determination of the stage is disease-specific.
     */
    summary?: CodeableConcept;
    /**
     * Reference to a formal record of the evidence on which the staging assessment is based.
     */
    assessment?: Reference[];
    /**
     * The kind of staging, such as pathological or clinical staging.
     */
    type?: CodeableConcept;
}
/**
 * Supporting evidence / manifestations that are the basis of the Condition's verification status, such as evidence that confirmed or refuted the condition.
 */
export interface ConditionEvidence {
    /**
     * Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
     */
    id?: string;
    /**
     * Contains extension information for property 'id'.
     */
    _id?: Element;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * A manifestation or symptom that led to the recording of this condition.
     */
    code?: CodeableConcept[];
    /**
     * Links to other relevant information, including pathology reports.
     */
    detail?: Reference[];
}
/**
 * A record of a healthcare consumer’s  choices, which permits or denies identified recipient(s) or recipient role(s) to perform one or more actions within a given policy context, for specific purposes and periods of time.
 */
export interface Consent {
    /**
     * The type of the resource.
     */
    resourceType: string;
    /**
     * The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes.
     */
    id?: id;
    /**
     * Contains extension information for property 'id'.
     */
    _id?: Element;
    /**
     * The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource.
     */
    meta?: Meta;
    /**
     * A reference to a set of rules that were followed when the resource was constructed, and which must be understood when processing the content. Often, this is a reference to an implementation guide that defines the special rules along with other profiles etc.
     */
    implicitRules?: uri;
    /**
     * Contains extension information for property 'implicitRules'.
     */
    _implicitRules?: Element;
    /**
     * The base language in which the resource is written.
     */
    language?: code;
    /**
     * Contains extension information for property 'language'.
     */
    _language?: Element;
    /**
     * A human-readable narrative that contains a summary of the resource and can be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it "clinically safe" for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety.
     */
    text?: Narrative;
    /**
     * These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, and nor can they have their own independent transaction scope.
     */
    contained?: Resource[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * Unique identifier for this copy of the Consent Statement.
     */
    identifier?: Identifier[];
    /**
     * Indicates the current state of this consent.
     */
    status: code;
    /**
     * Contains extension information for property 'status'.
     */
    _status?: Element;
    /**
     * A selector of the type of consent being presented: ADR, Privacy, Treatment, Research.  This list is now extensible.
     */
    scope: CodeableConcept;
    /**
     * A classification of the type of consents found in the statement. This element supports indexing and retrieval of consent statements.
     */
    category: CodeableConcept[];
    /**
     * The patient/healthcare consumer to whom this consent applies.
     */
    patient?: Reference;
    /**
     * When this  Consent was issued / created / indexed.
     */
    dateTime?: dateTime;
    /**
     * Contains extension information for property 'dateTime'.
     */
    _dateTime?: Element;
    /**
     * Either the Grantor, which is the entity responsible for granting the rights listed in a Consent Directive or the Grantee, which is the entity responsible for complying with the Consent Directive, including any obligations or limitations on authorizations and enforcement of prohibitions.
     */
    performer?: Reference[];
    /**
     * The organization that manages the consent, and the framework within which it is executed.
     */
    organization?: Reference[];
    /**
     * The source on which this consent statement is based. The source might be a scanned original paper form, or a reference to a consent that links back to such a source, a reference to a document repository (e.g. XDS) that stores the original consent document.
     */
    sourceAttachment?: Attachment;
    /**
     * The source on which this consent statement is based. The source might be a scanned original paper form, or a reference to a consent that links back to such a source, a reference to a document repository (e.g. XDS) that stores the original consent document.
     */
    sourceReference?: Reference;
    /**
     * The references to the policies that are included in this consent scope. Policies may be organizational, but are often defined jurisdictionally, or in law.
     */
    policy?: ConsentPolicy[];
    /**
     * A reference to the specific base computable regulation or policy.
     */
    policyRule?: CodeableConcept;
    /**
     * Whether a treatment instruction (e.g. artificial respiration yes or no) was verified with the patient, his/her family or another authorized person.
     */
    verification?: ConsentVerification[];
    /**
     * An exception to the base policy of this consent. An exception can be an addition or removal of access permissions.
     */
    provision?: ConsentProvision;
}
/**
 * The references to the policies that are included in this consent scope. Policies may be organizational, but are often defined jurisdictionally, or in law.
 */
export interface ConsentPolicy {
    /**
     * Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
     */
    id?: string;
    /**
     * Contains extension information for property 'id'.
     */
    _id?: Element;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * Entity or Organization having regulatory jurisdiction or accountability for  enforcing policies pertaining to Consent Directives.
     */
    authority?: uri;
    /**
     * Contains extension information for property 'authority'.
     */
    _authority?: Element;
    /**
     * The references to the policies that are included in this consent scope. Policies may be organizational, but are often defined jurisdictionally, or in law.
     */
    uri?: uri;
    /**
     * Contains extension information for property 'uri'.
     */
    _uri?: Element;
}
/**
 * Whether a treatment instruction (e.g. artificial respiration yes or no) was verified with the patient, his/her family or another authorized person.
 */
export interface ConsentVerification {
    /**
     * Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
     */
    id?: string;
    /**
     * Contains extension information for property 'id'.
     */
    _id?: Element;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * Has the instruction been verified.
     */
    verified: boolean;
    /**
     * Contains extension information for property 'verified'.
     */
    _verified?: Element;
    /**
     * Who verified the instruction (Patient, Relative or other Authorized Person).
     */
    verifiedWith?: Reference;
    /**
     * Date verification was collected.
     */
    verificationDate?: dateTime;
    /**
     * Contains extension information for property 'verificationDate'.
     */
    _verificationDate?: Element;
}
/**
 * An exception to the base policy of this consent. An exception can be an addition or removal of access permissions.
 */
export interface ConsentProvision {
    /**
     * Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
     */
    id?: string;
    /**
     * Contains extension information for property 'id'.
     */
    _id?: Element;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * Action  to take - permit or deny - when the rule conditions are met.  Not permitted in root rule, required in all nested rules.
     */
    type?: code;
    /**
     * Contains extension information for property 'type'.
     */
    _type?: Element;
    /**
     * The timeframe in this rule is valid.
     */
    period?: Period;
    /**
     * Who or what is controlled by this rule. Use group to identify a set of actors by some property they share (e.g. 'admitting officers').
     */
    actor?: ConsentProvisionActor[];
    /**
     * Actions controlled by this Rule.
     */
    action?: CodeableConcept[];
    /**
     * A security label, comprised of 0..* security label fields (Privacy tags), which define which resources are controlled by this exception.
     */
    securityLabel?: Coding[];
    /**
     * The context of the activities a user is taking - why the user is accessing the data - that are controlled by this rule.
     */
    purpose?: Coding[];
    /**
     * The class of information covered by this rule. The type can be a FHIR resource type, a profile on a type, or a CDA document, or some other type that indicates what sort of information the consent relates to.
     */
    class?: Coding[];
    /**
     * If this code is found in an instance, then the rule applies.
     */
    code?: CodeableConcept[];
    /**
     * Clinical or Operational Relevant period of time that bounds the data controlled by this rule.
     */
    dataPeriod?: Period;
    /**
     * The resources controlled by this rule if specific resources are referenced.
     */
    data?: ConsentProvisionData[];
    /**
     * Rules which provide exceptions to the base rule or subrules.
     */
    provision?: ConsentProvision[];
}
/**
 * Who or what is controlled by this rule. Use group to identify a set of actors by some property they share (e.g. 'admitting officers').
 */
export interface ConsentProvisionActor {
    /**
     * Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
     */
    id?: string;
    /**
     * Contains extension information for property 'id'.
     */
    _id?: Element;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * How the individual is involved in the resources content that is described in the exception.
     */
    role: CodeableConcept;
    /**
     * The resource that identifies the actor. To identify actors by type, use group to identify a set of actors by some property they share (e.g. 'admitting officers').
     */
    reference: Reference;
}
/**
 * The resources controlled by this rule if specific resources are referenced.
 */
export interface ConsentProvisionData {
    /**
     * Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
     */
    id?: string;
    /**
     * Contains extension information for property 'id'.
     */
    _id?: Element;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * How the resource reference is interpreted when testing consent restrictions.
     */
    meaning: code;
    /**
     * Contains extension information for property 'meaning'.
     */
    _meaning?: Element;
    /**
     * A reference to a specific resource that defines which resources are covered by this consent.
     */
    reference: Reference;
}
/**
 * Specifies contact information for a person or organization.
 */
export interface ContactDetail {
    /**
     * Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
     */
    id?: string;
    /**
     * Contains extension information for property 'id'.
     */
    _id?: Element;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * The name of an individual to contact.
     */
    name?: string;
    /**
     * Contains extension information for property 'name'.
     */
    _name?: Element;
    /**
     * The contact details for the individual (if a name was provided) or the organization.
     */
    telecom?: ContactPoint[];
}
/**
 * Details for all kinds of technology mediated contact points for a person or organization, including telephone, email, etc.
 */
export interface ContactPoint {
    /**
     * Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
     */
    id?: string;
    /**
     * Contains extension information for property 'id'.
     */
    _id?: Element;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * Telecommunications form for contact point - what communications system is required to make use of the contact.
     */
    system?: code;
    /**
     * Contains extension information for property 'system'.
     */
    _system?: Element;
    /**
     * The actual contact point details, in a form that is meaningful to the designated communication system (i.e. phone number or email address).
     */
    value?: string;
    /**
     * Contains extension information for property 'value'.
     */
    _value?: Element;
    /**
     * Identifies the purpose for the contact point.
     */
    use?: code;
    /**
     * Contains extension information for property 'use'.
     */
    _use?: Element;
    /**
     * Specifies a preferred order in which to use a set of contacts. ContactPoints with lower rank values are more preferred than those with higher rank values.
     */
    rank?: positiveInt;
    /**
     * Contains extension information for property 'rank'.
     */
    _rank?: Element;
    /**
     * Time period when the contact point was/is in use.
     */
    period?: Period;
}
/**
 * Legally enforceable, formally recorded unilateral or bilateral directive i.e., a policy or agreement.
 */
export interface Contract {
    /**
     * The type of the resource.
     */
    resourceType: string;
    /**
     * The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes.
     */
    id?: id;
    /**
     * Contains extension information for property 'id'.
     */
    _id?: Element;
    /**
     * The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource.
     */
    meta?: Meta;
    /**
     * A reference to a set of rules that were followed when the resource was constructed, and which must be understood when processing the content. Often, this is a reference to an implementation guide that defines the special rules along with other profiles etc.
     */
    implicitRules?: uri;
    /**
     * Contains extension information for property 'implicitRules'.
     */
    _implicitRules?: Element;
    /**
     * The base language in which the resource is written.
     */
    language?: code;
    /**
     * Contains extension information for property 'language'.
     */
    _language?: Element;
    /**
     * A human-readable narrative that contains a summary of the resource and can be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it "clinically safe" for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety.
     */
    text?: Narrative;
    /**
     * These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, and nor can they have their own independent transaction scope.
     */
    contained?: Resource[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * Unique identifier for this Contract or a derivative that references a Source Contract.
     */
    identifier?: Identifier[];
    /**
     * Canonical identifier for this contract, represented as a URI (globally unique).
     */
    url?: uri;
    /**
     * Contains extension information for property 'url'.
     */
    _url?: Element;
    /**
     * An edition identifier used for business purposes to label business significant variants.
     */
    version?: string;
    /**
     * Contains extension information for property 'version'.
     */
    _version?: Element;
    /**
     * The status of the resource instance.
     */
    status?: code;
    /**
     * Contains extension information for property 'status'.
     */
    _status?: Element;
    /**
     * Legal states of the formation of a legal instrument, which is a formally executed written document that can be formally attributed to its author, records and formally expresses a legally enforceable act, process, or contractual duty, obligation, or right, and therefore evidences that act, process, or agreement.
     */
    legalState?: CodeableConcept;
    /**
     * The URL pointing to a FHIR-defined Contract Definition that is adhered to in whole or part by this Contract.
     */
    instantiatesCanonical?: Reference;
    /**
     * The URL pointing to an externally maintained definition that is adhered to in whole or in part by this Contract.
     */
    instantiatesUri?: uri;
    /**
     * Contains extension information for property 'instantiatesUri'.
     */
    _instantiatesUri?: Element;
    /**
     * The minimal content derived from the basal information source at a specific stage in its lifecycle.
     */
    contentDerivative?: CodeableConcept;
    /**
     * When this  Contract was issued.
     */
    issued?: dateTime;
    /**
     * Contains extension information for property 'issued'.
     */
    _issued?: Element;
    /**
     * Relevant time or time-period when this Contract is applicable.
     */
    applies?: Period;
    /**
     * Event resulting in discontinuation or termination of this Contract instance by one or more parties to the contract.
     */
    expirationType?: CodeableConcept;
    /**
     * The target entity impacted by or of interest to parties to the agreement.
     */
    subject?: Reference[];
    /**
     * A formally or informally recognized grouping of people, principals, organizations, or jurisdictions formed for the purpose of achieving some form of collective action such as the promulgation, administration and enforcement of contracts and policies.
     */
    authority?: Reference[];
    /**
     * Recognized governance framework or system operating with a circumscribed scope in accordance with specified principles, policies, processes or procedures for managing rights, actions, or behaviors of parties or principals relative to resources.
     */
    domain?: Reference[];
    /**
     * Sites in which the contract is complied with,  exercised, or in force.
     */
    site?: Reference[];
    /**
     * A natural language name identifying this Contract definition, derivative, or instance in any legal state. Provides additional information about its content. This name should be usable as an identifier for the module by machine processing applications such as code generation.
     */
    name?: string;
    /**
     * Contains extension information for property 'name'.
     */
    _name?: Element;
    /**
     * A short, descriptive, user-friendly title for this Contract definition, derivative, or instance in any legal state.t giving additional information about its content.
     */
    title?: string;
    /**
     * Contains extension information for property 'title'.
     */
    _title?: Element;
    /**
     * An explanatory or alternate user-friendly title for this Contract definition, derivative, or instance in any legal state.t giving additional information about its content.
     */
    subtitle?: string;
    /**
     * Contains extension information for property 'subtitle'.
     */
    _subtitle?: Element;
    /**
     * Alternative representation of the title for this Contract definition, derivative, or instance in any legal state., e.g., a domain specific contract number related to legislation.
     */
    alias?: string[];
    /**
     * Contains extension information for property 'alias'.
     */
    _alias?: Element[];
    /**
     * The individual or organization that authored the Contract definition, derivative, or instance in any legal state.
     */
    author?: Reference;
    /**
     * A selector of legal concerns for this Contract definition, derivative, or instance in any legal state.
     */
    scope?: CodeableConcept;
    /**
     * Narrows the range of legal concerns to focus on the achievement of specific contractual objectives.
     */
    topicCodeableConcept?: CodeableConcept;
    /**
     * Narrows the range of legal concerns to focus on the achievement of specific contractual objectives.
     */
    topicReference?: Reference;
    /**
     * A high-level category for the legal instrument, whether constructed as a Contract definition, derivative, or instance in any legal state.  Provides additional information about its content within the context of the Contract's scope to distinguish the kinds of systems that would be interested in the contract.
     */
    type?: CodeableConcept;
    /**
     * Sub-category for the Contract that distinguishes the kinds of systems that would be interested in the Contract within the context of the Contract's scope.
     */
    subType?: CodeableConcept[];
    /**
     * Precusory content developed with a focus and intent of supporting the formation a Contract instance, which may be associated with and transformable into a Contract.
     */
    contentDefinition?: ContractContentDefinition;
    /**
     * One or more Contract Provisions, which may be related and conveyed as a group, and may contain nested groups.
     */
    term?: ContractTerm[];
    /**
     * Information that may be needed by/relevant to the performer in their execution of this term action.
     */
    supportingInfo?: Reference[];
    /**
     * Links to Provenance records for past versions of this Contract definition, derivative, or instance, which identify key state transitions or updates that are likely to be relevant to a user looking at the current version of the Contract.  The Provence.entity indicates the target that was changed in the update. http://build.fhir.org/provenance-definitions.html#Provenance.entity.
     */
    relevantHistory?: Reference[];
    /**
     * Parties with legal standing in the Contract, including the principal parties, the grantor(s) and grantee(s), which are any person or organization bound by the contract, and any ancillary parties, which facilitate the execution of the contract such as a notary or witness.
     */
    signer?: ContractSigner[];
    /**
     * The "patient friendly language" versionof the Contract in whole or in parts. "Patient friendly language" means the representation of the Contract and Contract Provisions in a manner that is readily accessible and understandable by a layperson in accordance with best practices for communication styles that ensure that those agreeing to or signing the Contract understand the roles, actions, obligations, responsibilities, and implication of the agreement.
     */
    friendly?: ContractFriendly[];
    /**
     * List of Legal expressions or representations of this Contract.
     */
    legal?: ContractLegal[];
    /**
     * List of Computable Policy Rule Language Representations of this Contract.
     */
    rule?: ContractRule[];
    /**
     * Legally binding Contract: This is the signed and legally recognized representation of the Contract, which is considered the "source of truth" and which would be the basis for legal action related to enforcement of this Contract.
     */
    legallybindingAttachment?: Attachment;
    /**
     * Legally binding Contract: This is the signed and legally recognized representation of the Contract, which is considered the "source of truth" and which would be the basis for legal action related to enforcement of this Contract.
     */
    legallybindingReference?: Reference;
}
/**
 * Precusory content developed with a focus and intent of supporting the formation a Contract instance, which may be associated with and transformable into a Contract.
 */
export interface ContractContentDefinition {
    /**
     * Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
     */
    id?: string;
    /**
     * Contains extension information for property 'id'.
     */
    _id?: Element;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * Precusory content structure and use, i.e., a boilerplate, template, application for a contract such as an insurance policy or benefits under a program, e.g., workers compensation.
     */
    type: CodeableConcept;
    /**
     * Detailed Precusory content type.
     */
    subType?: CodeableConcept;
    /**
     * The  individual or organization that published the Contract precursor content.
     */
    publisher?: Reference;
    /**
     * The date (and optionally time) when the contract was published. The date must change when the business version changes and it must change if the status code changes. In addition, it should change when the substantive content of the contract changes.
     */
    publicationDate?: dateTime;
    /**
     * Contains extension information for property 'publicationDate'.
     */
    _publicationDate?: Element;
    /**
     * draft | active | retired | unknown.
     */
    publicationStatus: code;
    /**
     * Contains extension information for property 'publicationStatus'.
     */
    _publicationStatus?: Element;
    /**
     * A copyright statement relating to Contract precursor content. Copyright statements are generally legal restrictions on the use and publishing of the Contract precursor content.
     */
    copyright?: markdown;
    /**
     * Contains extension information for property 'copyright'.
     */
    _copyright?: Element;
}
/**
 * One or more Contract Provisions, which may be related and conveyed as a group, and may contain nested groups.
 */
export interface ContractTerm {
    /**
     * Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
     */
    id?: string;
    /**
     * Contains extension information for property 'id'.
     */
    _id?: Element;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * Unique identifier for this particular Contract Provision.
     */
    identifier?: Identifier;
    /**
     * When this Contract Provision was issued.
     */
    issued?: dateTime;
    /**
     * Contains extension information for property 'issued'.
     */
    _issued?: Element;
    /**
     * Relevant time or time-period when this Contract Provision is applicable.
     */
    applies?: Period;
    /**
     * The entity that the term applies to.
     */
    topicCodeableConcept?: CodeableConcept;
    /**
     * The entity that the term applies to.
     */
    topicReference?: Reference;
    /**
     * A legal clause or condition contained within a contract that requires one or both parties to perform a particular requirement by some specified time or prevents one or both parties from performing a particular requirement by some specified time.
     */
    type?: CodeableConcept;
    /**
     * A specialized legal clause or condition based on overarching contract type.
     */
    subType?: CodeableConcept;
    /**
     * Statement of a provision in a policy or a contract.
     */
    text?: string;
    /**
     * Contains extension information for property 'text'.
     */
    _text?: Element;
    /**
     * Security labels that protect the handling of information about the term and its elements, which may be specifically identified..
     */
    securityLabel?: ContractTermSecurityLabel[];
    /**
     * The matter of concern in the context of this provision of the agrement.
     */
    offer: ContractTermOffer;
    /**
     * Contract Term Asset List.
     */
    asset?: ContractTermAsset[];
    /**
     * An actor taking a role in an activity for which it can be assigned some degree of responsibility for the activity taking place.
     */
    action?: ContractTermAction[];
    /**
     * Nested group of Contract Provisions.
     */
    group?: ContractTerm[];
}
/**
 * Security labels that protect the handling of information about the term and its elements, which may be specifically identified..
 */
export interface ContractTermSecurityLabel {
    /**
     * Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
     */
    id?: string;
    /**
     * Contains extension information for property 'id'.
     */
    _id?: Element;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * Number used to link this term or term element to the applicable Security Label.
     */
    number?: unsignedInt[];
    /**
     * Contains extension information for property 'number'.
     */
    _number?: Element[];
    /**
     * Security label privacy tag that species the level of confidentiality protection required for this term and/or term elements.
     */
    classification: Coding;
    /**
     * Security label privacy tag that species the applicable privacy and security policies governing this term and/or term elements.
     */
    category?: Coding[];
    /**
     * Security label privacy tag that species the manner in which term and/or term elements are to be protected.
     */
    control?: Coding[];
}
/**
 * The matter of concern in the context of this provision of the agrement.
 */
export interface ContractTermOffer {
    /**
     * Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
     */
    id?: string;
    /**
     * Contains extension information for property 'id'.
     */
    _id?: Element;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * Unique identifier for this particular Contract Provision.
     */
    identifier?: Identifier[];
    /**
     * Offer Recipient.
     */
    party?: ContractTermOfferParty[];
    /**
     * The owner of an asset has the residual control rights over the asset: the right to decide all usages of the asset in any way not inconsistent with a prior contract, custom, or law (Hart, 1995, p. 30).
     */
    topic?: Reference;
    /**
     * Type of Contract Provision such as specific requirements, purposes for actions, obligations, prohibitions, e.g. life time maximum benefit.
     */
    type?: CodeableConcept;
    /**
     * Type of choice made by accepting party with respect to an offer made by an offeror/ grantee.
     */
    decision?: CodeableConcept;
    /**
     * How the decision about a Contract was conveyed.
     */
    decisionMode?: CodeableConcept[];
    /**
     * Response to offer text.
     */
    answer?: ContractTermOfferAnswer[];
    /**
     * Human readable form of this Contract Offer.
     */
    text?: string;
    /**
     * Contains extension information for property 'text'.
     */
    _text?: Element;
    /**
     * The id of the clause or question text of the offer in the referenced questionnaire/response.
     */
    linkId?: string[];
    /**
     * Contains extension information for property 'linkId'.
     */
    _linkId?: Element[];
    /**
     * Security labels that protects the offer.
     */
    securityLabelNumber?: unsignedInt[];
    /**
     * Contains extension information for property 'securityLabelNumber'.
     */
    _securityLabelNumber?: Element[];
}
/**
 * Offer Recipient.
 */
export interface ContractTermOfferParty {
    /**
     * Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
     */
    id?: string;
    /**
     * Contains extension information for property 'id'.
     */
    _id?: Element;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * Participant in the offer.
     */
    reference: Reference[];
    /**
     * How the party participates in the offer.
     */
    role: CodeableConcept;
}
/**
 * Response to offer text.
 */
export interface ContractTermOfferAnswer {
    /**
     * Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
     */
    id?: string;
    /**
     * Contains extension information for property 'id'.
     */
    _id?: Element;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * Response to an offer clause or question text,  which enables selection of values to be agreed to, e.g., the period of participation, the date of occupancy of a rental, warrently duration, or whether biospecimen may be used for further research.
     */
    valueBoolean: boolean;
    /**
     * Contains extension information for property 'valueBoolean'.
     */
    _valueBoolean?: Element;
    /**
     * Response to an offer clause or question text,  which enables selection of values to be agreed to, e.g., the period of participation, the date of occupancy of a rental, warrently duration, or whether biospecimen may be used for further research.
     */
    valueDecimal: decimal;
    /**
     * Contains extension information for property 'valueDecimal'.
     */
    _valueDecimal?: Element;
    /**
     * Response to an offer clause or question text,  which enables selection of values to be agreed to, e.g., the period of participation, the date of occupancy of a rental, warrently duration, or whether biospecimen may be used for further research.
     */
    valueInteger: integer;
    /**
     * Contains extension information for property 'valueInteger'.
     */
    _valueInteger?: Element;
    /**
     * Response to an offer clause or question text,  which enables selection of values to be agreed to, e.g., the period of participation, the date of occupancy of a rental, warrently duration, or whether biospecimen may be used for further research.
     */
    valueDate: date;
    /**
     * Contains extension information for property 'valueDate'.
     */
    _valueDate?: Element;
    /**
     * Response to an offer clause or question text,  which enables selection of values to be agreed to, e.g., the period of participation, the date of occupancy of a rental, warrently duration, or whether biospecimen may be used for further research.
     */
    valueDateTime: dateTime;
    /**
     * Contains extension information for property 'valueDateTime'.
     */
    _valueDateTime?: Element;
    /**
     * Response to an offer clause or question text,  which enables selection of values to be agreed to, e.g., the period of participation, the date of occupancy of a rental, warrently duration, or whether biospecimen may be used for further research.
     */
    valueTime: time;
    /**
     * Contains extension information for property 'valueTime'.
     */
    _valueTime?: Element;
    /**
     * Response to an offer clause or question text,  which enables selection of values to be agreed to, e.g., the period of participation, the date of occupancy of a rental, warrently duration, or whether biospecimen may be used for further research.
     */
    valueString: string;
    /**
     * Contains extension information for property 'valueString'.
     */
    _valueString?: Element;
    /**
     * Response to an offer clause or question text,  which enables selection of values to be agreed to, e.g., the period of participation, the date of occupancy of a rental, warrently duration, or whether biospecimen may be used for further research.
     */
    valueUri: uri;
    /**
     * Contains extension information for property 'valueUri'.
     */
    _valueUri?: Element;
    /**
     * Response to an offer clause or question text,  which enables selection of values to be agreed to, e.g., the period of participation, the date of occupancy of a rental, warrently duration, or whether biospecimen may be used for further research.
     */
    valueAttachment: Attachment;
    /**
     * Response to an offer clause or question text,  which enables selection of values to be agreed to, e.g., the period of participation, the date of occupancy of a rental, warrently duration, or whether biospecimen may be used for further research.
     */
    valueCoding: Coding;
    /**
     * Response to an offer clause or question text,  which enables selection of values to be agreed to, e.g., the period of participation, the date of occupancy of a rental, warrently duration, or whether biospecimen may be used for further research.
     */
    valueQuantity: Quantity;
    /**
     * Response to an offer clause or question text,  which enables selection of values to be agreed to, e.g., the period of participation, the date of occupancy of a rental, warrently duration, or whether biospecimen may be used for further research.
     */
    valueReference: Reference;
}
/**
 * Contract Term Asset List.
 */
export interface ContractTermAsset {
    /**
     * Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
     */
    id?: string;
    /**
     * Contains extension information for property 'id'.
     */
    _id?: Element;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * Differentiates the kind of the asset .
     */
    scope?: CodeableConcept;
    /**
     * Target entity type about which the term may be concerned.
     */
    type?: CodeableConcept[];
    /**
     * Associated entities.
     */
    typeReference?: Reference[];
    /**
     * May be a subtype or part of an offered asset.
     */
    subtype?: CodeableConcept[];
    /**
     * Specifies the applicability of the term to an asset resource instance, and instances it refers to orinstances that refer to it, and/or are owned by the offeree.
     */
    relationship?: Coding;
    /**
     * Circumstance of the asset.
     */
    context?: ContractTermAssetContext[];
    /**
     * Description of the quality and completeness of the asset that imay be a factor in its valuation.
     */
    condition?: string;
    /**
     * Contains extension information for property 'condition'.
     */
    _condition?: Element;
    /**
     * Type of Asset availability for use or ownership.
     */
    periodType?: CodeableConcept[];
    /**
     * Asset relevant contractual time period.
     */
    period?: Period[];
    /**
     * Time period of asset use.
     */
    usePeriod?: Period[];
    /**
     * Clause or question text (Prose Object) concerning the asset in a linked form, such as a QuestionnaireResponse used in the formation of the contract.
     */
    text?: string;
    /**
     * Contains extension information for property 'text'.
     */
    _text?: Element;
    /**
     * Id [identifier??] of the clause or question text about the asset in the referenced form or QuestionnaireResponse.
     */
    linkId?: string[];
    /**
     * Contains extension information for property 'linkId'.
     */
    _linkId?: Element[];
    /**
     * Response to assets.
     */
    answer?: ContractTermOfferAnswer[];
    /**
     * Security labels that protects the asset.
     */
    securityLabelNumber?: unsignedInt[];
    /**
     * Contains extension information for property 'securityLabelNumber'.
     */
    _securityLabelNumber?: Element[];
    /**
     * Contract Valued Item List.
     */
    valuedItem?: ContractTermAssetValuedItem[];
}
/**
 * Circumstance of the asset.
 */
export interface ContractTermAssetContext {
    /**
     * Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
     */
    id?: string;
    /**
     * Contains extension information for property 'id'.
     */
    _id?: Element;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * Asset context reference may include the creator, custodian, or owning Person or Organization (e.g., bank, repository),  location held, e.g., building,  jurisdiction.
     */
    reference?: Reference;
    /**
     * Coded representation of the context generally or of the Referenced entity, such as the asset holder type or location.
     */
    code?: CodeableConcept[];
    /**
     * Context description.
     */
    text?: string;
    /**
     * Contains extension information for property 'text'.
     */
    _text?: Element;
}
/**
 * Contract Valued Item List.
 */
export interface ContractTermAssetValuedItem {
    /**
     * Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
     */
    id?: string;
    /**
     * Contains extension information for property 'id'.
     */
    _id?: Element;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * Specific type of Contract Valued Item that may be priced.
     */
    entityCodeableConcept?: CodeableConcept;
    /**
     * Specific type of Contract Valued Item that may be priced.
     */
    entityReference?: Reference;
    /**
     * Identifies a Contract Valued Item instance.
     */
    identifier?: Identifier;
    /**
     * Indicates the time during which this Contract ValuedItem information is effective.
     */
    effectiveTime?: dateTime;
    /**
     * Contains extension information for property 'effectiveTime'.
     */
    _effectiveTime?: Element;
    /**
     * Specifies the units by which the Contract Valued Item is measured or counted, and quantifies the countable or measurable Contract Valued Item instances.
     */
    quantity?: Quantity;
    /**
     * A Contract Valued Item unit valuation measure.
     */
    unitPrice?: Money;
    /**
     * A real number that represents a multiplier used in determining the overall value of the Contract Valued Item delivered. The concept of a Factor allows for a discount or surcharge multiplier to be applied to a monetary amount.
     */
    factor?: decimal;
    /**
     * Contains extension information for property 'factor'.
     */
    _factor?: Element;
    /**
     * An amount that expresses the weighting (based on difficulty, cost and/or resource intensiveness) associated with the Contract Valued Item delivered. The concept of Points allows for assignment of point values for a Contract Valued Item, such that a monetary amount can be assigned to each point.
     */
    points?: decimal;
    /**
     * Contains extension information for property 'points'.
     */
    _points?: Element;
    /**
     * Expresses the product of the Contract Valued Item unitQuantity and the unitPriceAmt. For example, the formula: unit Quantity * unit Price (Cost per Point) * factor Number  * points = net Amount. Quantity, factor and points are assumed to be 1 if not supplied.
     */
    net?: Money;
    /**
     * Terms of valuation.
     */
    payment?: string;
    /**
     * Contains extension information for property 'payment'.
     */
    _payment?: Element;
    /**
     * When payment is due.
     */
    paymentDate?: dateTime;
    /**
     * Contains extension information for property 'paymentDate'.
     */
    _paymentDate?: Element;
    /**
     * Who will make payment.
     */
    responsible?: Reference;
    /**
     * Who will receive payment.
     */
    recipient?: Reference;
    /**
     * Id  of the clause or question text related to the context of this valuedItem in the referenced form or QuestionnaireResponse.
     */
    linkId?: string[];
    /**
     * Contains extension information for property 'linkId'.
     */
    _linkId?: Element[];
    /**
     * A set of security labels that define which terms are controlled by this condition.
     */
    securityLabelNumber?: unsignedInt[];
    /**
     * Contains extension information for property 'securityLabelNumber'.
     */
    _securityLabelNumber?: Element[];
}
/**
 * An actor taking a role in an activity for which it can be assigned some degree of responsibility for the activity taking place.
 */
export interface ContractTermAction {
    /**
     * Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
     */
    id?: string;
    /**
     * Contains extension information for property 'id'.
     */
    _id?: Element;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * True if the term prohibits the  action.
     */
    doNotPerform?: boolean;
    /**
     * Contains extension information for property 'doNotPerform'.
     */
    _doNotPerform?: Element;
    /**
     * Activity or service obligation to be done or not done, performed or not performed, effectuated or not by this Contract term.
     */
    type: CodeableConcept;
    /**
     * Entity of the action.
     */
    subject?: ContractTermActionSubject[];
    /**
     * Reason or purpose for the action stipulated by this Contract Provision.
     */
    intent: CodeableConcept;
    /**
     * Id [identifier??] of the clause or question text related to this action in the referenced form or QuestionnaireResponse.
     */
    linkId?: string[];
    /**
     * Contains extension information for property 'linkId'.
     */
    _linkId?: Element[];
    /**
     * Current state of the term action.
     */
    status: CodeableConcept;
    /**
     * Encounter or Episode with primary association to specified term activity.
     */
    context?: Reference;
    /**
     * Id [identifier??] of the clause or question text related to the requester of this action in the referenced form or QuestionnaireResponse.
     */
    contextLinkId?: string[];
    /**
     * Contains extension information for property 'contextLinkId'.
     */
    _contextLinkId?: Element[];
    /**
     * When action happens.
     */
    occurrenceDateTime?: dateTime;
    /**
     * Contains extension information for property 'occurrenceDateTime'.
     */
    _occurrenceDateTime?: Element;
    /**
     * When action happens.
     */
    occurrencePeriod?: Period;
    /**
     * When action happens.
     */
    occurrenceTiming?: Timing;
    /**
     * Who or what initiated the action and has responsibility for its activation.
     */
    requester?: Reference[];
    /**
     * Id [identifier??] of the clause or question text related to the requester of this action in the referenced form or QuestionnaireResponse.
     */
    requesterLinkId?: string[];
    /**
     * Contains extension information for property 'requesterLinkId'.
     */
    _requesterLinkId?: Element[];
    /**
     * The type of individual that is desired or required to perform or not perform the action.
     */
    performerType?: CodeableConcept[];
    /**
     * The type of role or competency of an individual desired or required to perform or not perform the action.
     */
    performerRole?: CodeableConcept;
    /**
     * Indicates who or what is being asked to perform (or not perform) the ction.
     */
    performer?: Reference;
    /**
     * Id [identifier??] of the clause or question text related to the reason type or reference of this  action in the referenced form or QuestionnaireResponse.
     */
    performerLinkId?: string[];
    /**
     * Contains extension information for property 'performerLinkId'.
     */
    _performerLinkId?: Element[];
    /**
     * Rationale for the action to be performed or not performed. Describes why the action is permitted or prohibited.
     */
    reasonCode?: CodeableConcept[];
    /**
     * Indicates another resource whose existence justifies permitting or not permitting this action.
     */
    reasonReference?: Reference[];
    /**
     * Describes why the action is to be performed or not performed in textual form.
     */
    reason?: string[];
    /**
     * Contains extension information for property 'reason'.
     */
    _reason?: Element[];
    /**
     * Id [identifier??] of the clause or question text related to the reason type or reference of this  action in the referenced form or QuestionnaireResponse.
     */
    reasonLinkId?: string[];
    /**
     * Contains extension information for property 'reasonLinkId'.
     */
    _reasonLinkId?: Element[];
    /**
     * Comments made about the term action made by the requester, performer, subject or other participants.
     */
    note?: Annotation[];
    /**
     * Security labels that protects the action.
     */
    securityLabelNumber?: unsignedInt[];
    /**
     * Contains extension information for property 'securityLabelNumber'.
     */
    _securityLabelNumber?: Element[];
}
/**
 * Entity of the action.
 */
export interface ContractTermActionSubject {
    /**
     * Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
     */
    id?: string;
    /**
     * Contains extension information for property 'id'.
     */
    _id?: Element;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * The entity the action is performed or not performed on or for.
     */
    reference: Reference[];
    /**
     * Role type of agent assigned roles in this Contract.
     */
    role?: CodeableConcept;
}
/**
 * Parties with legal standing in the Contract, including the principal parties, the grantor(s) and grantee(s), which are any person or organization bound by the contract, and any ancillary parties, which facilitate the execution of the contract such as a notary or witness.
 */
export interface ContractSigner {
    /**
     * Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
     */
    id?: string;
    /**
     * Contains extension information for property 'id'.
     */
    _id?: Element;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * Role of this Contract signer, e.g. notary, grantee.
     */
    type: Coding;
    /**
     * Party which is a signator to this Contract.
     */
    party: Reference;
    /**
     * Legally binding Contract DSIG signature contents in Base64.
     */
    signature: Signature[];
}
/**
 * The "patient friendly language" versionof the Contract in whole or in parts. "Patient friendly language" means the representation of the Contract and Contract Provisions in a manner that is readily accessible and understandable by a layperson in accordance with best practices for communication styles that ensure that those agreeing to or signing the Contract understand the roles, actions, obligations, responsibilities, and implication of the agreement.
 */
export interface ContractFriendly {
    /**
     * Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
     */
    id?: string;
    /**
     * Contains extension information for property 'id'.
     */
    _id?: Element;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * Human readable rendering of this Contract in a format and representation intended to enhance comprehension and ensure understandability.
     */
    contentAttachment: Attachment;
    /**
     * Human readable rendering of this Contract in a format and representation intended to enhance comprehension and ensure understandability.
     */
    contentReference: Reference;
}
/**
 * List of Legal expressions or representations of this Contract.
 */
export interface ContractLegal {
    /**
     * Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
     */
    id?: string;
    /**
     * Contains extension information for property 'id'.
     */
    _id?: Element;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * Contract legal text in human renderable form.
     */
    contentAttachment: Attachment;
    /**
     * Contract legal text in human renderable form.
     */
    contentReference: Reference;
}
/**
 * List of Computable Policy Rule Language Representations of this Contract.
 */
export interface ContractRule {
    /**
     * Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
     */
    id?: string;
    /**
     * Contains extension information for property 'id'.
     */
    _id?: Element;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * Computable Contract conveyed using a policy rule language (e.g. XACML, DKAL, SecPal).
     */
    contentAttachment: Attachment;
    /**
     * Computable Contract conveyed using a policy rule language (e.g. XACML, DKAL, SecPal).
     */
    contentReference: Reference;
}
/**
 * A contributor to the content of a knowledge asset, including authors, editors, reviewers, and endorsers.
 */
export interface Contributor {
    /**
     * Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
     */
    id?: string;
    /**
     * Contains extension information for property 'id'.
     */
    _id?: Element;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * The type of contributor.
     */
    type: code;
    /**
     * Contains extension information for property 'type'.
     */
    _type?: Element;
    /**
     * The name of the individual or organization responsible for the contribution.
     */
    name: string;
    /**
     * Contains extension information for property 'name'.
     */
    _name?: Element;
    /**
     * Contact details to assist a user in finding and communicating with the contributor.
     */
    contact?: ContactDetail[];
}
/**
 * A measured amount (or an amount that can potentially be measured). Note that measured amounts include amounts that are not precisely quantified, including amounts involving arbitrary units and floating currencies.
 */
export interface Count {
    /**
     * Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
     */
    id?: string;
    /**
     * Contains extension information for property 'id'.
     */
    _id?: Element;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * The value of the measured amount. The value includes an implicit precision in the presentation of the value.
     */
    value?: decimal;
    /**
     * Contains extension information for property 'value'.
     */
    _value?: Element;
    /**
     * How the value should be understood and represented - whether the actual value is greater or less than the stated value due to measurement issues; e.g. if the comparator is "<" , then the real value is < stated value.
     */
    comparator?: code;
    /**
     * Contains extension information for property 'comparator'.
     */
    _comparator?: Element;
    /**
     * A human-readable form of the unit.
     */
    unit?: string;
    /**
     * Contains extension information for property 'unit'.
     */
    _unit?: Element;
    /**
     * The identification of the system that provides the coded form of the unit.
     */
    system?: uri;
    /**
     * Contains extension information for property 'system'.
     */
    _system?: Element;
    /**
     * A computer processable form of the unit in some unit representation system.
     */
    code?: code;
    /**
     * Contains extension information for property 'code'.
     */
    _code?: Element;
}
/**
 * Financial instrument which may be used to reimburse or pay for health care products and services. Includes both insurance and self-payment.
 */
export interface Coverage {
    /**
     * The type of the resource.
     */
    resourceType: string;
    /**
     * The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes.
     */
    id?: id;
    /**
     * Contains extension information for property 'id'.
     */
    _id?: Element;
    /**
     * The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource.
     */
    meta?: Meta;
    /**
     * A reference to a set of rules that were followed when the resource was constructed, and which must be understood when processing the content. Often, this is a reference to an implementation guide that defines the special rules along with other profiles etc.
     */
    implicitRules?: uri;
    /**
     * Contains extension information for property 'implicitRules'.
     */
    _implicitRules?: Element;
    /**
     * The base language in which the resource is written.
     */
    language?: code;
    /**
     * Contains extension information for property 'language'.
     */
    _language?: Element;
    /**
     * A human-readable narrative that contains a summary of the resource and can be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it "clinically safe" for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety.
     */
    text?: Narrative;
    /**
     * These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, and nor can they have their own independent transaction scope.
     */
    contained?: Resource[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * A unique identifier assigned to this coverage.
     */
    identifier?: Identifier[];
    /**
     * The status of the resource instance.
     */
    status: code;
    /**
     * Contains extension information for property 'status'.
     */
    _status?: Element;
    /**
     * The type of coverage: social program, medical plan, accident coverage (workers compensation, auto), group health or payment by an individual or organization.
     */
    type?: CodeableConcept;
    /**
     * The party who 'owns' the insurance policy.
     */
    policyHolder?: Reference;
    /**
     * The party who has signed-up for or 'owns' the contractual relationship to the policy or to whom the benefit of the policy for services rendered to them or their family is due.
     */
    subscriber?: Reference;
    /**
     * The insurer assigned ID for the Subscriber.
     */
    subscriberId?: string;
    /**
     * Contains extension information for property 'subscriberId'.
     */
    _subscriberId?: Element;
    /**
     * The party who benefits from the insurance coverage; the patient when products and/or services are provided.
     */
    beneficiary: Reference;
    /**
     * A unique identifier for a dependent under the coverage.
     */
    dependent?: string;
    /**
     * Contains extension information for property 'dependent'.
     */
    _dependent?: Element;
    /**
     * The relationship of beneficiary (patient) to the subscriber.
     */
    relationship?: CodeableConcept;
    /**
     * Time period during which the coverage is in force. A missing start date indicates the start date isn't known, a missing end date means the coverage is continuing to be in force.
     */
    period?: Period;
    /**
     * The program or plan underwriter or payor including both insurance and non-insurance agreements, such as patient-pay agreements.
     */
    payor: Reference[];
    /**
     * A suite of underwriter specific classifiers.
     */
    class?: CoverageClass[];
    /**
     * The order of applicability of this coverage relative to other coverages which are currently in force. Note, there may be gaps in the numbering and this does not imply primary, secondary etc. as the specific positioning of coverages depends upon the episode of care.
     */
    order?: positiveInt;
    /**
     * Contains extension information for property 'order'.
     */
    _order?: Element;
    /**
     * The insurer-specific identifier for the insurer-defined network of providers to which the beneficiary may seek treatment which will be covered at the 'in-network' rate, otherwise 'out of network' terms and conditions apply.
     */
    network?: string;
    /**
     * Contains extension information for property 'network'.
     */
    _network?: Element;
    /**
     * A suite of codes indicating the cost category and associated amount which have been detailed in the policy and may have been  included on the health card.
     */
    costToBeneficiary?: CoverageCostToBeneficiary[];
    /**
     * When 'subrogation=true' this insurance instance has been included not for adjudication but to provide insurers with the details to recover costs.
     */
    subrogation?: boolean;
    /**
     * Contains extension information for property 'subrogation'.
     */
    _subrogation?: Element;
    /**
     * The policy(s) which constitute this insurance coverage.
     */
    contract?: Reference[];
}
/**
 * A suite of underwriter specific classifiers.
 */
export interface CoverageClass {
    /**
     * Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
     */
    id?: string;
    /**
     * Contains extension information for property 'id'.
     */
    _id?: Element;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * The type of classification for which an insurer-specific class label or number and optional name is provided, for example may be used to identify a class of coverage or employer group, Policy, Plan.
     */
    type: CodeableConcept;
    /**
     * The alphanumeric string value associated with the insurer issued label.
     */
    value: string;
    /**
     * Contains extension information for property 'value'.
     */
    _value?: Element;
    /**
     * A short description for the class.
     */
    name?: string;
    /**
     * Contains extension information for property 'name'.
     */
    _name?: Element;
}
/**
 * A suite of codes indicating the cost category and associated amount which have been detailed in the policy and may have been  included on the health card.
 */
export interface CoverageCostToBeneficiary {
    /**
     * Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
     */
    id?: string;
    /**
     * Contains extension information for property 'id'.
     */
    _id?: Element;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * The category of patient centric costs associated with treatment.
     */
    type?: CodeableConcept;
    /**
     * The amount due from the patient for the cost category.
     */
    valueQuantity: Quantity;
    /**
     * The amount due from the patient for the cost category.
     */
    valueMoney: Money;
    /**
     * A suite of codes indicating exceptions or reductions to patient costs and their effective periods.
     */
    exception?: CoverageCostToBeneficiaryException[];
}
/**
 * A suite of codes indicating exceptions or reductions to patient costs and their effective periods.
 */
export interface CoverageCostToBeneficiaryException {
    /**
     * Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
     */
    id?: string;
    /**
     * Contains extension information for property 'id'.
     */
    _id?: Element;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * The code for the specific exception.
     */
    type: CodeableConcept;
    /**
     * The timeframe during when the exception is in force.
     */
    period?: Period;
}
/**
 * The CoverageEligibilityRequest provides patient and insurance coverage information to an insurer for them to respond, in the form of an CoverageEligibilityResponse, with information regarding whether the stated coverage is valid and in-force and optionally to provide the insurance details of the policy.
 */
export interface CoverageEligibilityRequest {
    /**
     * The type of the resource.
     */
    resourceType: string;
    /**
     * The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes.
     */
    id?: id;
    /**
     * Contains extension information for property 'id'.
     */
    _id?: Element;
    /**
     * The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource.
     */
    meta?: Meta;
    /**
     * A reference to a set of rules that were followed when the resource was constructed, and which must be understood when processing the content. Often, this is a reference to an implementation guide that defines the special rules along with other profiles etc.
     */
    implicitRules?: uri;
    /**
     * Contains extension information for property 'implicitRules'.
     */
    _implicitRules?: Element;
    /**
     * The base language in which the resource is written.
     */
    language?: code;
    /**
     * Contains extension information for property 'language'.
     */
    _language?: Element;
    /**
     * A human-readable narrative that contains a summary of the resource and can be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it "clinically safe" for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety.
     */
    text?: Narrative;
    /**
     * These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, and nor can they have their own independent transaction scope.
     */
    contained?: Resource[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * A unique identifier assigned to this coverage eligiblity request.
     */
    identifier?: Identifier[];
    /**
     * The status of the resource instance.
     */
    status: code;
    /**
     * Contains extension information for property 'status'.
     */
    _status?: Element;
    /**
     * When the requestor expects the processor to complete processing.
     */
    priority?: CodeableConcept;
    /**
     * Code to specify whether requesting: prior authorization requirements for some service categories or billing codes; benefits for coverages specified or discovered; discovery and return of coverages for the patient; and/or validation that the specified coverage is in-force at the date/period specified or 'now' if not specified.
     */
    purpose: code[];
    /**
     * Contains extension information for property 'purpose'.
     */
    _purpose?: Element[];
    /**
     * The party who is the beneficiary of the supplied coverage and for whom eligibility is sought.
     */
    patient: Reference;
    /**
     * The date or dates when the enclosed suite of services were performed or completed.
     */
    servicedDate?: date;
    /**
     * Contains extension information for property 'servicedDate'.
     */
    _servicedDate?: Element;
    /**
     * The date or dates when the enclosed suite of services were performed or completed.
     */
    servicedPeriod?: Period;
    /**
     * The date when this resource was created.
     */
    created: dateTime;
    /**
     * Contains extension information for property 'created'.
     */
    _created?: Element;
    /**
     * Person who created the request.
     */
    enterer?: Reference;
    /**
     * The provider which is responsible for the request.
     */
    provider?: Reference;
    /**
     * The Insurer who issued the coverage in question and is the recipient of the request.
     */
    insurer: Reference;
    /**
     * Facility where the services are intended to be provided.
     */
    facility?: Reference;
    /**
     * Additional information codes regarding exceptions, special considerations, the condition, situation, prior or concurrent issues.
     */
    supportingInfo?: CoverageEligibilityRequestSupportingInfo[];
    /**
     * Financial instruments for reimbursement for the health care products and services.
     */
    insurance?: CoverageEligibilityRequestInsurance[];
    /**
     * Service categories or billable services for which benefit details and/or an authorization prior to service delivery may be required by the payor.
     */
    item?: CoverageEligibilityRequestItem[];
}
/**
 * Additional information codes regarding exceptions, special considerations, the condition, situation, prior or concurrent issues.
 */
export interface CoverageEligibilityRequestSupportingInfo {
    /**
     * Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
     */
    id?: string;
    /**
     * Contains extension information for property 'id'.
     */
    _id?: Element;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * A number to uniquely identify supporting information entries.
     */
    sequence: positiveInt;
    /**
     * Contains extension information for property 'sequence'.
     */
    _sequence?: Element;
    /**
     * Additional data or information such as resources, documents, images etc. including references to the data or the actual inclusion of the data.
     */
    information: Reference;
    /**
     * The supporting materials are applicable for all detail items, product/servce categories and specific billing codes.
     */
    appliesToAll?: boolean;
    /**
     * Contains extension information for property 'appliesToAll'.
     */
    _appliesToAll?: Element;
}
/**
 * Financial instruments for reimbursement for the health care products and services.
 */
export interface CoverageEligibilityRequestInsurance {
    /**
     * Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
     */
    id?: string;
    /**
     * Contains extension information for property 'id'.
     */
    _id?: Element;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * A flag to indicate that this Coverage is to be used for evaluation of this request when set to true.
     */
    focal?: boolean;
    /**
     * Contains extension information for property 'focal'.
     */
    _focal?: Element;
    /**
     * Reference to the insurance card level information contained in the Coverage resource. The coverage issuing insurer will use these details to locate the patient's actual coverage within the insurer's information system.
     */
    coverage: Reference;
    /**
     * A business agreement number established between the provider and the insurer for special business processing purposes.
     */
    businessArrangement?: string;
    /**
     * Contains extension information for property 'businessArrangement'.
     */
    _businessArrangement?: Element;
}
/**
 * Service categories or billable services for which benefit details and/or an authorization prior to service delivery may be required by the payor.
 */
export interface CoverageEligibilityRequestItem {
    /**
     * Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
     */
    id?: string;
    /**
     * Contains extension information for property 'id'.
     */
    _id?: Element;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * Exceptions, special conditions and supporting information applicable for this service or product line.
     */
    supportingInfoSequence?: positiveInt[];
    /**
     * Contains extension information for property 'supportingInfoSequence'.
     */
    _supportingInfoSequence?: Element[];
    /**
     * Code to identify the general type of benefits under which products and services are provided.
     */
    category?: CodeableConcept;
    /**
     * This contains the product, service, drug or other billing code for the item.
     */
    productOrService?: CodeableConcept;
    /**
     * Item typification or modifiers codes to convey additional context for the product or service.
     */
    modifier?: CodeableConcept[];
    /**
     * The practitioner who is responsible for the product or service to be rendered to the patient.
     */
    provider?: Reference;
    /**
     * The number of repetitions of a service or product.
     */
    quantity?: Quantity;
    /**
     * The amount charged to the patient by the provider for a single unit.
     */
    unitPrice?: Money;
    /**
     * Facility where the services will be provided.
     */
    facility?: Reference;
    /**
     * Patient diagnosis for which care is sought.
     */
    diagnosis?: CoverageEligibilityRequestItemDiagnosis[];
    /**
     * The plan/proposal/order describing the proposed service in detail.
     */
    detail?: Reference[];
}
/**
 * Patient diagnosis for which care is sought.
 */
export interface CoverageEligibilityRequestItemDiagnosis {
    /**
     * Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
     */
    id?: string;
    /**
     * Contains extension information for property 'id'.
     */
    _id?: Element;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * The nature of illness or problem in a coded form or as a reference to an external defined Condition.
     */
    diagnosisCodeableConcept?: CodeableConcept;
    /**
     * The nature of illness or problem in a coded form or as a reference to an external defined Condition.
     */
    diagnosisReference?: Reference;
}
/**
 * This resource provides eligibility and plan details from the processing of an CoverageEligibilityRequest resource.
 */
export interface CoverageEligibilityResponse {
    /**
     * The type of the resource.
     */
    resourceType: string;
    /**
     * The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes.
     */
    id?: id;
    /**
     * Contains extension information for property 'id'.
     */
    _id?: Element;
    /**
     * The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource.
     */
    meta?: Meta;
    /**
     * A reference to a set of rules that were followed when the resource was constructed, and which must be understood when processing the content. Often, this is a reference to an implementation guide that defines the special rules along with other profiles etc.
     */
    implicitRules?: uri;
    /**
     * Contains extension information for property 'implicitRules'.
     */
    _implicitRules?: Element;
    /**
     * The base language in which the resource is written.
     */
    language?: code;
    /**
     * Contains extension information for property 'language'.
     */
    _language?: Element;
    /**
     * A human-readable narrative that contains a summary of the resource and can be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it "clinically safe" for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety.
     */
    text?: Narrative;
    /**
     * These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, and nor can they have their own independent transaction scope.
     */
    contained?: Resource[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * A unique identifier assigned to this coverage eligiblity request.
     */
    identifier?: Identifier[];
    /**
     * The status of the resource instance.
     */
    status: code;
    /**
     * Contains extension information for property 'status'.
     */
    _status?: Element;
    /**
     * Code to specify whether requesting: prior authorization requirements for some service categories or billing codes; benefits for coverages specified or discovered; discovery and return of coverages for the patient; and/or validation that the specified coverage is in-force at the date/period specified or 'now' if not specified.
     */
    purpose: code[];
    /**
     * Contains extension information for property 'purpose'.
     */
    _purpose?: Element[];
    /**
     * The party who is the beneficiary of the supplied coverage and for whom eligibility is sought.
     */
    patient: Reference;
    /**
     * The date or dates when the enclosed suite of services were performed or completed.
     */
    servicedDate?: date;
    /**
     * Contains extension information for property 'servicedDate'.
     */
    _servicedDate?: Element;
    /**
     * The date or dates when the enclosed suite of services were performed or completed.
     */
    servicedPeriod?: Period;
    /**
     * The date this resource was created.
     */
    created: dateTime;
    /**
     * Contains extension information for property 'created'.
     */
    _created?: Element;
    /**
     * The provider which is responsible for the request.
     */
    requestor?: Reference;
    /**
     * Reference to the original request resource.
     */
    request: Reference;
    /**
     * The outcome of the request processing.
     */
    outcome: code;
    /**
     * Contains extension information for property 'outcome'.
     */
    _outcome?: Element;
    /**
     * A human readable description of the status of the adjudication.
     */
    disposition?: string;
    /**
     * Contains extension information for property 'disposition'.
     */
    _disposition?: Element;
    /**
     * The Insurer who issued the coverage in question and is the author of the response.
     */
    insurer: Reference;
    /**
     * Financial instruments for reimbursement for the health care products and services.
     */
    insurance?: CoverageEligibilityResponseInsurance[];
    /**
     * A reference from the Insurer to which these services pertain to be used on further communication and as proof that the request occurred.
     */
    preAuthRef?: string;
    /**
     * Contains extension information for property 'preAuthRef'.
     */
    _preAuthRef?: Element;
    /**
     * A code for the form to be used for printing the content.
     */
    form?: CodeableConcept;
    /**
     * Errors encountered during the processing of the request.
     */
    error?: CoverageEligibilityResponseError[];
}
/**
 * Financial instruments for reimbursement for the health care products and services.
 */
export interface CoverageEligibilityResponseInsurance {
    /**
     * Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
     */
    id?: string;
    /**
     * Contains extension information for property 'id'.
     */
    _id?: Element;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * Reference to the insurance card level information contained in the Coverage resource. The coverage issuing insurer will use these details to locate the patient's actual coverage within the insurer's information system.
     */
    coverage: Reference;
    /**
     * Flag indicating if the coverage provided is inforce currently if no service date(s) specified or for the whole duration of the service dates.
     */
    inforce?: boolean;
    /**
     * Contains extension information for property 'inforce'.
     */
    _inforce?: Element;
    /**
     * The term of the benefits documented in this response.
     */
    benefitPeriod?: Period;
    /**
     * Benefits and optionally current balances, and authorization details by category or service.
     */
    item?: CoverageEligibilityResponseInsuranceItem[];
}
/**
 * Benefits and optionally current balances, and authorization details by category or service.
 */
export interface CoverageEligibilityResponseInsuranceItem {
    /**
     * Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
     */
    id?: string;
    /**
     * Contains extension information for property 'id'.
     */
    _id?: Element;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * Code to identify the general type of benefits under which products and services are provided.
     */
    category?: CodeableConcept;
    /**
     * This contains the product, service, drug or other billing code for the item.
     */
    productOrService?: CodeableConcept;
    /**
     * Item typification or modifiers codes to convey additional context for the product or service.
     */
    modifier?: CodeableConcept[];
    /**
     * The practitioner who is eligible for the provision of the product or service.
     */
    provider?: Reference;
    /**
     * True if the indicated class of service is excluded from the plan, missing or False indicates the product or service is included in the coverage.
     */
    excluded?: boolean;
    /**
     * Contains extension information for property 'excluded'.
     */
    _excluded?: Element;
    /**
     * A short name or tag for the benefit.
     */
    name?: string;
    /**
     * Contains extension information for property 'name'.
     */
    _name?: Element;
    /**
     * A richer description of the benefit or services covered.
     */
    description?: string;
    /**
     * Contains extension information for property 'description'.
     */
    _description?: Element;
    /**
     * Is a flag to indicate whether the benefits refer to in-network providers or out-of-network providers.
     */
    network?: CodeableConcept;
    /**
     * Indicates if the benefits apply to an individual or to the family.
     */
    unit?: CodeableConcept;
    /**
     * The term or period of the values such as 'maximum lifetime benefit' or 'maximum annual visits'.
     */
    term?: CodeableConcept;
    /**
     * Benefits used to date.
     */
    benefit?: CoverageEligibilityResponseInsuranceItemBenefit[];
    /**
     * A boolean flag indicating whether a preauthorization is required prior to actual service delivery.
     */
    authorizationRequired?: boolean;
    /**
     * Contains extension information for property 'authorizationRequired'.
     */
    _authorizationRequired?: Element;
    /**
     * Codes or comments regarding information or actions associated with the preauthorization.
     */
    authorizationSupporting?: CodeableConcept[];
    /**
     * A web location for obtaining requirements or descriptive information regarding the preauthorization.
     */
    authorizationUrl?: uri;
    /**
     * Contains extension information for property 'authorizationUrl'.
     */
    _authorizationUrl?: Element;
}
/**
 * Benefits used to date.
 */
export interface CoverageEligibilityResponseInsuranceItemBenefit {
    /**
     * Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
     */
    id?: string;
    /**
     * Contains extension information for property 'id'.
     */
    _id?: Element;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * Classification of benefit being provided.
     */
    type: CodeableConcept;
    /**
     * The quantity of the benefit which is permitted under the coverage.
     */
    allowedUnsignedInt?: unsignedInt;
    /**
     * Contains extension information for property 'allowedUnsignedInt'.
     */
    _allowedUnsignedInt?: Element;
    /**
     * The quantity of the benefit which is permitted under the coverage.
     */
    allowedString?: string;
    /**
     * Contains extension information for property 'allowedString'.
     */
    _allowedString?: Element;
    /**
     * The quantity of the benefit which is permitted under the coverage.
     */
    allowedMoney?: Money;
    /**
     * The quantity of the benefit which have been consumed to date.
     */
    usedUnsignedInt?: unsignedInt;
    /**
     * Contains extension information for property 'usedUnsignedInt'.
     */
    _usedUnsignedInt?: Element;
    /**
     * The quantity of the benefit which have been consumed to date.
     */
    usedString?: string;
    /**
     * Contains extension information for property 'usedString'.
     */
    _usedString?: Element;
    /**
     * The quantity of the benefit which have been consumed to date.
     */
    usedMoney?: Money;
}
/**
 * Errors encountered during the processing of the request.
 */
export interface CoverageEligibilityResponseError {
    /**
     * Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
     */
    id?: string;
    /**
     * Contains extension information for property 'id'.
     */
    _id?: Element;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * An error code,from a specified code system, which details why the eligibility check could not be performed.
     */
    code: CodeableConcept;
}
/**
 * Describes a required data item for evaluation in terms of the type of data, and optional code or date-based filters of the data.
 */
export interface DataRequirement {
    /**
     * Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
     */
    id?: string;
    /**
     * Contains extension information for property 'id'.
     */
    _id?: Element;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * The type of the required data, specified as the type name of a resource. For profiles, this value is set to the type of the base resource of the profile.
     */
    type: code;
    /**
     * Contains extension information for property 'type'.
     */
    _type?: Element;
    /**
     * The profile of the required data, specified as the uri of the profile definition.
     */
    profile?: canonical[];
    /**
     * The intended subjects of the data requirement. If this element is not provided, a Patient subject is assumed.
     */
    subjectCodeableConcept?: CodeableConcept;
    /**
     * The intended subjects of the data requirement. If this element is not provided, a Patient subject is assumed.
     */
    subjectReference?: Reference;
    /**
     * Indicates that specific elements of the type are referenced by the knowledge module and must be supported by the consumer in order to obtain an effective evaluation. This does not mean that a value is required for this element, only that the consuming system must understand the element and be able to provide values for it if they are available. The value of mustSupport SHALL be a FHIRPath resolveable on the type of the DataRequirement. The path SHALL consist only of identifiers, constant indexers, and .resolve() (see the [Simple FHIRPath Profile](fhirpath.html#simple) for full details).
     */
    mustSupport?: string[];
    /**
     * Contains extension information for property 'mustSupport'.
     */
    _mustSupport?: Element[];
    /**
     * Code filters specify additional constraints on the data, specifying the value set of interest for a particular element of the data. Each code filter defines an additional constraint on the data, i.e. code filters are AND'ed, not OR'ed.
     */
    codeFilter?: Element[];
    /**
     * Date filters specify additional constraints on the data in terms of the applicable date range for specific elements. Each date filter specifies an additional constraint on the data, i.e. date filters are AND'ed, not OR'ed.
     */
    dateFilter?: Element[];
    /**
     * Specifies a maximum number of results that are required (uses the _count search parameter).
     */
    limit?: positiveInt;
    /**
     * Contains extension information for property 'limit'.
     */
    _limit?: Element;
    /**
     * Specifies the order of the results to be returned.
     */
    sort?: Element[];
}
export interface DataRequirementCodeFilter {
    /**
     * Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
     */
    id?: string;
    /**
     * Contains extension information for property 'id'.
     */
    _id?: Element;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * The code-valued attribute of the filter. The specified path SHALL be a FHIRPath resolveable on the specified type of the DataRequirement, and SHALL consist only of identifiers, constant indexers, and .resolve(). The path is allowed to contain qualifiers (.) to traverse sub-elements, as well as indexers ([x]) to traverse multiple-cardinality sub-elements (see the [Simple FHIRPath Profile](fhirpath.html#simple) for full details). Note that the index must be an integer constant. The path must resolve to an element of type code, Coding, or CodeableConcept.
     */
    path?: string;
    /**
     * Contains extension information for property 'path'.
     */
    _path?: Element;
    /**
     * A token parameter that refers to a search parameter defined on the specified type of the DataRequirement, and which searches on elements of type code, Coding, or CodeableConcept.
     */
    searchParam?: string;
    /**
     * Contains extension information for property 'searchParam'.
     */
    _searchParam?: Element;
    /**
     * The valueset for the code filter. The valueSet and code elements are additive. If valueSet is specified, the filter will return only those data items for which the value of the code-valued element specified in the path is a member of the specified valueset.
     */
    valueSet?: canonical;
    /**
     * The codes for the code filter. If values are given, the filter will return only those data items for which the code-valued attribute specified by the path has a value that is one of the specified codes. If codes are specified in addition to a value set, the filter returns items matching a code in the value set or one of the specified codes.
     */
    code?: Coding[];
}
export interface DataRequirementDateFilter {
    /**
     * Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
     */
    id?: string;
    /**
     * Contains extension information for property 'id'.
     */
    _id?: Element;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * The date-valued attribute of the filter. The specified path SHALL be a FHIRPath resolveable on the specified type of the DataRequirement, and SHALL consist only of identifiers, constant indexers, and .resolve(). The path is allowed to contain qualifiers (.) to traverse sub-elements, as well as indexers ([x]) to traverse multiple-cardinality sub-elements (see the [Simple FHIRPath Profile](fhirpath.html#simple) for full details). Note that the index must be an integer constant. The path must resolve to an element of type date, dateTime, Period, Schedule, or Timing.
     */
    path?: string;
    /**
     * Contains extension information for property 'path'.
     */
    _path?: Element;
    /**
     * A date parameter that refers to a search parameter defined on the specified type of the DataRequirement, and which searches on elements of type date, dateTime, Period, Schedule, or Timing.
     */
    searchParam?: string;
    /**
     * Contains extension information for property 'searchParam'.
     */
    _searchParam?: Element;
    /**
     * The value of the filter. If period is specified, the filter will return only those data items that fall within the bounds determined by the Period, inclusive of the period boundaries. If dateTime is specified, the filter will return only those data items that are equal to the specified dateTime. If a Duration is specified, the filter will return only those data items that fall within Duration before now.
     */
    valueDateTime?: dateTime;
    /**
     * Contains extension information for property 'valueDateTime'.
     */
    _valueDateTime?: Element;
    /**
     * The value of the filter. If period is specified, the filter will return only those data items that fall within the bounds determined by the Period, inclusive of the period boundaries. If dateTime is specified, the filter will return only those data items that are equal to the specified dateTime. If a Duration is specified, the filter will return only those data items that fall within Duration before now.
     */
    valuePeriod?: Period;
    /**
     * The value of the filter. If period is specified, the filter will return only those data items that fall within the bounds determined by the Period, inclusive of the period boundaries. If dateTime is specified, the filter will return only those data items that are equal to the specified dateTime. If a Duration is specified, the filter will return only those data items that fall within Duration before now.
     */
    valueDuration?: Duration;
}
export interface DataRequirementSort {
    /**
     * Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
     */
    id?: string;
    /**
     * Contains extension information for property 'id'.
     */
    _id?: Element;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * The attribute of the sort. The specified path must be resolvable from the type of the required data. The path is allowed to contain qualifiers (.) to traverse sub-elements, as well as indexers ([x]) to traverse multiple-cardinality sub-elements. Note that the index must be an integer constant.
     */
    path: string;
    /**
     * Contains extension information for property 'path'.
     */
    _path?: Element;
    /**
     * The direction of the sort, ascending or descending.
     */
    direction: code;
    /**
     * Contains extension information for property 'direction'.
     */
    _direction?: Element;
}
/**
 * Indicates an actual or potential clinical issue with or between one or more active or proposed clinical actions for a patient; e.g. Drug-drug interaction, Ineffective treatment frequency, Procedure-condition conflict, etc.
 */
export interface DetectedIssue {
    /**
     * The type of the resource.
     */
    resourceType: string;
    /**
     * The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes.
     */
    id?: id;
    /**
     * Contains extension information for property 'id'.
     */
    _id?: Element;
    /**
     * The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource.
     */
    meta?: Meta;
    /**
     * A reference to a set of rules that were followed when the resource was constructed, and which must be understood when processing the content. Often, this is a reference to an implementation guide that defines the special rules along with other profiles etc.
     */
    implicitRules?: uri;
    /**
     * Contains extension information for property 'implicitRules'.
     */
    _implicitRules?: Element;
    /**
     * The base language in which the resource is written.
     */
    language?: code;
    /**
     * Contains extension information for property 'language'.
     */
    _language?: Element;
    /**
     * A human-readable narrative that contains a summary of the resource and can be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it "clinically safe" for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety.
     */
    text?: Narrative;
    /**
     * These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, and nor can they have their own independent transaction scope.
     */
    contained?: Resource[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * Business identifier associated with the detected issue record.
     */
    identifier?: Identifier[];
    /**
     * Indicates the status of the detected issue.
     */
    status: code;
    /**
     * Contains extension information for property 'status'.
     */
    _status?: Element;
    /**
     * Identifies the general type of issue identified.
     */
    code?: CodeableConcept;
    /**
     * Indicates the degree of importance associated with the identified issue based on the potential impact on the patient.
     */
    severity?: code;
    /**
     * Contains extension information for property 'severity'.
     */
    _severity?: Element;
    /**
     * Indicates the patient whose record the detected issue is associated with.
     */
    patient?: Reference;
    /**
     * The date or period when the detected issue was initially identified.
     */
    identifiedDateTime?: dateTime;
    /**
     * Contains extension information for property 'identifiedDateTime'.
     */
    _identifiedDateTime?: Element;
    /**
     * The date or period when the detected issue was initially identified.
     */
    identifiedPeriod?: Period;
    /**
     * Individual or device responsible for the issue being raised.  For example, a decision support application or a pharmacist conducting a medication review.
     */
    author?: Reference;
    /**
     * Indicates the resource representing the current activity or proposed activity that is potentially problematic.
     */
    implicated?: Reference[];
    /**
     * Supporting evidence or manifestations that provide the basis for identifying the detected issue such as a GuidanceResponse or MeasureReport.
     */
    evidence?: DetectedIssueEvidence[];
    /**
     * A textual explanation of the detected issue.
     */
    detail?: string;
    /**
     * Contains extension information for property 'detail'.
     */
    _detail?: Element;
    /**
     * The literature, knowledge-base or similar reference that describes the propensity for the detected issue identified.
     */
    reference?: uri;
    /**
     * Contains extension information for property 'reference'.
     */
    _reference?: Element;
    /**
     * Indicates an action that has been taken or is committed to reduce or eliminate the likelihood of the risk identified by the detected issue from manifesting.  Can also reflect an observation of known mitigating factors that may reduce/eliminate the need for any action.
     */
    mitigation?: DetectedIssueMitigation[];
}
/**
 * Supporting evidence or manifestations that provide the basis for identifying the detected issue such as a GuidanceResponse or MeasureReport.
 */
export interface DetectedIssueEvidence {
    /**
     * Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
     */
    id?: string;
    /**
     * Contains extension information for property 'id'.
     */
    _id?: Element;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * A manifestation that led to the recording of this detected issue.
     */
    code?: CodeableConcept[];
    /**
     * Links to resources that constitute evidence for the detected issue such as a GuidanceResponse or MeasureReport.
     */
    detail?: Reference[];
}
/**
 * Indicates an action that has been taken or is committed to reduce or eliminate the likelihood of the risk identified by the detected issue from manifesting.  Can also reflect an observation of known mitigating factors that may reduce/eliminate the need for any action.
 */
export interface DetectedIssueMitigation {
    /**
     * Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
     */
    id?: string;
    /**
     * Contains extension information for property 'id'.
     */
    _id?: Element;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * Describes the action that was taken or the observation that was made that reduces/eliminates the risk associated with the identified issue.
     */
    action: CodeableConcept;
    /**
     * Indicates when the mitigating action was documented.
     */
    date?: dateTime;
    /**
     * Contains extension information for property 'date'.
     */
    _date?: Element;
    /**
     * Identifies the practitioner who determined the mitigation and takes responsibility for the mitigation step occurring.
     */
    author?: Reference;
}
/**
 * A type of a manufactured item that is used in the provision of healthcare without being substantially changed through that activity. The device may be a medical or non-medical device.
 */
export interface Device {
    /**
     * The type of the resource.
     */
    resourceType: string;
    /**
     * The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes.
     */
    id?: id;
    /**
     * Contains extension information for property 'id'.
     */
    _id?: Element;
    /**
     * The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource.
     */
    meta?: Meta;
    /**
     * A reference to a set of rules that were followed when the resource was constructed, and which must be understood when processing the content. Often, this is a reference to an implementation guide that defines the special rules along with other profiles etc.
     */
    implicitRules?: uri;
    /**
     * Contains extension information for property 'implicitRules'.
     */
    _implicitRules?: Element;
    /**
     * The base language in which the resource is written.
     */
    language?: code;
    /**
     * Contains extension information for property 'language'.
     */
    _language?: Element;
    /**
     * A human-readable narrative that contains a summary of the resource and can be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it "clinically safe" for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety.
     */
    text?: Narrative;
    /**
     * These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, and nor can they have their own independent transaction scope.
     */
    contained?: Resource[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * Unique instance identifiers assigned to a device by manufacturers other organizations or owners.
     */
    identifier?: Identifier[];
    /**
     * The reference to the definition for the device.
     */
    definition?: Reference;
    /**
     * Unique device identifier (UDI) assigned to device label or package.  Note that the Device may include multiple udiCarriers as it either may include just the udiCarrier for the jurisdiction it is sold, or for multiple jurisdictions it could have been sold.
     */
    udiCarrier?: DeviceUdiCarrier[];
    /**
     * Status of the Device availability.
     */
    status?: code;
    /**
     * Contains extension information for property 'status'.
     */
    _status?: Element;
    /**
     * Reason for the dtatus of the Device availability.
     */
    statusReason?: CodeableConcept[];
    /**
     * The distinct identification string as required by regulation for a human cell, tissue, or cellular and tissue-based product.
     */
    distinctIdentifier?: string;
    /**
     * Contains extension information for property 'distinctIdentifier'.
     */
    _distinctIdentifier?: Element;
    /**
     * A name of the manufacturer.
     */
    manufacturer?: string;
    /**
     * Contains extension information for property 'manufacturer'.
     */
    _manufacturer?: Element;
    /**
     * The date and time when the device was manufactured.
     */
    manufactureDate?: dateTime;
    /**
     * Contains extension information for property 'manufactureDate'.
     */
    _manufactureDate?: Element;
    /**
     * The date and time beyond which this device is no longer valid or should not be used (if applicable).
     */
    expirationDate?: dateTime;
    /**
     * Contains extension information for property 'expirationDate'.
     */
    _expirationDate?: Element;
    /**
     * Lot number assigned by the manufacturer.
     */
    lotNumber?: string;
    /**
     * Contains extension information for property 'lotNumber'.
     */
    _lotNumber?: Element;
    /**
     * The serial number assigned by the organization when the device was manufactured.
     */
    serialNumber?: string;
    /**
     * Contains extension information for property 'serialNumber'.
     */
    _serialNumber?: Element;
    /**
     * This represents the manufacturer's name of the device as provided by the device, from a UDI label, or by a person describing the Device.  This typically would be used when a person provides the name(s) or when the device represents one of the names available from DeviceDefinition.
     */
    deviceName?: DeviceDeviceName[];
    /**
     * The model number for the device.
     */
    modelNumber?: string;
    /**
     * Contains extension information for property 'modelNumber'.
     */
    _modelNumber?: Element;
    /**
     * The part number of the device.
     */
    partNumber?: string;
    /**
     * Contains extension information for property 'partNumber'.
     */
    _partNumber?: Element;
    /**
     * The kind or type of device.
     */
    type?: CodeableConcept;
    /**
     * The capabilities supported on a  device, the standards to which the device conforms for a particular purpose, and used for the communication.
     */
    specialization?: DeviceSpecialization[];
    /**
     * The actual design of the device or software version running on the device.
     */
    version?: DeviceVersion[];
    /**
     * The actual configuration settings of a device as it actually operates, e.g., regulation status, time properties.
     */
    property?: DeviceProperty[];
    /**
     * Patient information, If the device is affixed to a person.
     */
    patient?: Reference;
    /**
     * An organization that is responsible for the provision and ongoing maintenance of the device.
     */
    owner?: Reference;
    /**
     * Contact details for an organization or a particular human that is responsible for the device.
     */
    contact?: ContactPoint[];
    /**
     * The place where the device can be found.
     */
    location?: Reference;
    /**
     * A network address on which the device may be contacted directly.
     */
    url?: uri;
    /**
     * Contains extension information for property 'url'.
     */
    _url?: Element;
    /**
     * Descriptive information, usage information or implantation information that is not captured in an existing element.
     */
    note?: Annotation[];
    /**
     * Provides additional safety characteristics about a medical device.  For example devices containing latex.
     */
    safety?: CodeableConcept[];
    /**
     * The parent device.
     */
    parent?: Reference;
}
/**
 * Unique device identifier (UDI) assigned to device label or package.  Note that the Device may include multiple udiCarriers as it either may include just the udiCarrier for the jurisdiction it is sold, or for multiple jurisdictions it could have been sold.
 */
export interface DeviceUdiCarrier {
    /**
     * Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
     */
    id?: string;
    /**
     * Contains extension information for property 'id'.
     */
    _id?: Element;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * The device identifier (DI) is a mandatory, fixed portion of a UDI that identifies the labeler and the specific version or model of a device.
     */
    deviceIdentifier?: string;
    /**
     * Contains extension information for property 'deviceIdentifier'.
     */
    _deviceIdentifier?: Element;
    /**
     * Organization that is charged with issuing UDIs for devices.  For example, the US FDA issuers include :1) GS1: http://hl7.org/fhir/NamingSystem/gs1-di, 2) HIBCC:http://hl7.org/fhir/NamingSystem/hibcc-dI, 3) ICCBBA for blood containers:http://hl7.org/fhir/NamingSystem/iccbba-blood-di, 4) ICCBA for other devices:http://hl7.org/fhir/NamingSystem/iccbba-other-di.
     */
    issuer?: uri;
    /**
     * Contains extension information for property 'issuer'.
     */
    _issuer?: Element;
    /**
     * The identity of the authoritative source for UDI generation within a  jurisdiction.  All UDIs are globally unique within a single namespace with the appropriate repository uri as the system.  For example,  UDIs of devices managed in the U.S. by the FDA, the value is  http://hl7.org/fhir/NamingSystem/fda-udi.
     */
    jurisdiction?: uri;
    /**
     * Contains extension information for property 'jurisdiction'.
     */
    _jurisdiction?: Element;
    /**
     * The full UDI carrier of the Automatic Identification and Data Capture (AIDC) technology representation of the barcode string as printed on the packaging of the device - e.g., a barcode or RFID.   Because of limitations on character sets in XML and the need to round-trip JSON data through XML, AIDC Formats *SHALL* be base64 encoded.
     */
    carrierAIDC?: base64Binary;
    /**
     * Contains extension information for property 'carrierAIDC'.
     */
    _carrierAIDC?: Element;
    /**
     * The full UDI carrier as the human readable form (HRF) representation of the barcode string as printed on the packaging of the device.
     */
    carrierHRF?: string;
    /**
     * Contains extension information for property 'carrierHRF'.
     */
    _carrierHRF?: Element;
    /**
     * A coded entry to indicate how the data was entered.
     */
    entryType?: code;
    /**
     * Contains extension information for property 'entryType'.
     */
    _entryType?: Element;
}
/**
 * This represents the manufacturer's name of the device as provided by the device, from a UDI label, or by a person describing the Device.  This typically would be used when a person provides the name(s) or when the device represents one of the names available from DeviceDefinition.
 */
export interface DeviceDeviceName {
    /**
     * Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
     */
    id?: string;
    /**
     * Contains extension information for property 'id'.
     */
    _id?: Element;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * The name of the device.
     */
    name: string;
    /**
     * Contains extension information for property 'name'.
     */
    _name?: Element;
    /**
     * The type of deviceName.UDILabelName | UserFriendlyName | PatientReportedName | ManufactureDeviceName | ModelName.
     */
    type: code;
    /**
     * Contains extension information for property 'type'.
     */
    _type?: Element;
}
/**
 * The capabilities supported on a  device, the standards to which the device conforms for a particular purpose, and used for the communication.
 */
export interface DeviceSpecialization {
    /**
     * Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
     */
    id?: string;
    /**
     * Contains extension information for property 'id'.
     */
    _id?: Element;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * The standard that is used to operate and communicate.
     */
    systemType: CodeableConcept;
    /**
     * The version of the standard that is used to operate and communicate.
     */
    version?: string;
    /**
     * Contains extension information for property 'version'.
     */
    _version?: Element;
}
/**
 * The actual design of the device or software version running on the device.
 */
export interface DeviceVersion {
    /**
     * Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
     */
    id?: string;
    /**
     * Contains extension information for property 'id'.
     */
    _id?: Element;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * The type of the device version.
     */
    type?: CodeableConcept;
    /**
     * A single component of the device version.
     */
    component?: Identifier;
    /**
     * The version text.
     */
    value: string;
    /**
     * Contains extension information for property 'value'.
     */
    _value?: Element;
}
/**
 * The actual configuration settings of a device as it actually operates, e.g., regulation status, time properties.
 */
export interface DeviceProperty {
    /**
     * Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
     */
    id?: string;
    /**
     * Contains extension information for property 'id'.
     */
    _id?: Element;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * Code that specifies the property DeviceDefinitionPropetyCode (Extensible).
     */
    type: CodeableConcept;
    /**
     * Property value as a quantity.
     */
    valueQuantity?: Quantity[];
    /**
     * Property value as a code, e.g., NTP4 (synced to NTP).
     */
    valueCode?: CodeableConcept[];
}
/**
 * The characteristics, operational status and capabilities of a medical-related component of a medical device.
 */
export interface DeviceDefinition {
    /**
     * The type of the resource.
     */
    resourceType: string;
    /**
     * The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes.
     */
    id?: id;
    /**
     * Contains extension information for property 'id'.
     */
    _id?: Element;
    /**
     * The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource.
     */
    meta?: Meta;
    /**
     * A reference to a set of rules that were followed when the resource was constructed, and which must be understood when processing the content. Often, this is a reference to an implementation guide that defines the special rules along with other profiles etc.
     */
    implicitRules?: uri;
    /**
     * Contains extension information for property 'implicitRules'.
     */
    _implicitRules?: Element;
    /**
     * The base language in which the resource is written.
     */
    language?: code;
    /**
     * Contains extension information for property 'language'.
     */
    _language?: Element;
    /**
     * A human-readable narrative that contains a summary of the resource and can be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it "clinically safe" for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety.
     */
    text?: Narrative;
    /**
     * These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, and nor can they have their own independent transaction scope.
     */
    contained?: Resource[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * Unique instance identifiers assigned to a device by the software, manufacturers, other organizations or owners. For example: handle ID.
     */
    identifier?: Identifier[];
    /**
     * Unique device identifier (UDI) assigned to device label or package.  Note that the Device may include multiple udiCarriers as it either may include just the udiCarrier for the jurisdiction it is sold, or for multiple jurisdictions it could have been sold.
     */
    udiDeviceIdentifier?: DeviceDefinitionUdiDeviceIdentifier[];
    /**
     * A name of the manufacturer.
     */
    manufacturerString?: string;
    /**
     * Contains extension information for property 'manufacturerString'.
     */
    _manufacturerString?: Element;
    /**
     * A name of the manufacturer.
     */
    manufacturerReference?: Reference;
    /**
     * A name given to the device to identify it.
     */
    deviceName?: DeviceDefinitionDeviceName[];
    /**
     * The model number for the device.
     */
    modelNumber?: string;
    /**
     * Contains extension information for property 'modelNumber'.
     */
    _modelNumber?: Element;
    /**
     * What kind of device or device system this is.
     */
    type?: CodeableConcept;
    /**
     * The capabilities supported on a  device, the standards to which the device conforms for a particular purpose, and used for the communication.
     */
    specialization?: DeviceDefinitionSpecialization[];
    /**
     * The available versions of the device, e.g., software versions.
     */
    version?: string[];
    /**
     * Contains extension information for property 'version'.
     */
    _version?: Element[];
    /**
     * Safety characteristics of the device.
     */
    safety?: CodeableConcept[];
    /**
     * Shelf Life and storage information.
     */
    shelfLifeStorage?: ProductShelfLife[];
    /**
     * Dimensions, color etc.
     */
    physicalCharacteristics?: ProdCharacteristic;
    /**
     * Language code for the human-readable text strings produced by the device (all supported).
     */
    languageCode?: CodeableConcept[];
    /**
     * Device capabilities.
     */
    capability?: DeviceDefinitionCapability[];
    /**
     * The actual configuration settings of a device as it actually operates, e.g., regulation status, time properties.
     */
    property?: DeviceDefinitionProperty[];
    /**
     * An organization that is responsible for the provision and ongoing maintenance of the device.
     */
    owner?: Reference;
    /**
     * Contact details for an organization or a particular human that is responsible for the device.
     */
    contact?: ContactPoint[];
    /**
     * A network address on which the device may be contacted directly.
     */
    url?: uri;
    /**
     * Contains extension information for property 'url'.
     */
    _url?: Element;
    /**
     * Access to on-line information about the device.
     */
    onlineInformation?: uri;
    /**
     * Contains extension information for property 'onlineInformation'.
     */
    _onlineInformation?: Element;
    /**
     * Descriptive information, usage information or implantation information that is not captured in an existing element.
     */
    note?: Annotation[];
    /**
     * The quantity of the device present in the packaging (e.g. the number of devices present in a pack, or the number of devices in the same package of the medicinal product).
     */
    quantity?: Quantity;
    /**
     * The parent device it can be part of.
     */
    parentDevice?: Reference;
    /**
     * A substance used to create the material(s) of which the device is made.
     */
    material?: DeviceDefinitionMaterial[];
}
/**
 * Unique device identifier (UDI) assigned to device label or package.  Note that the Device may include multiple udiCarriers as it either may include just the udiCarrier for the jurisdiction it is sold, or for multiple jurisdictions it could have been sold.
 */
export interface DeviceDefinitionUdiDeviceIdentifier {
    /**
     * Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
     */
    id?: string;
    /**
     * Contains extension information for property 'id'.
     */
    _id?: Element;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * The identifier that is to be associated with every Device that references this DeviceDefintiion for the issuer and jurisdication porvided in the DeviceDefinition.udiDeviceIdentifier.
     */
    deviceIdentifier: string;
    /**
     * Contains extension information for property 'deviceIdentifier'.
     */
    _deviceIdentifier?: Element;
    /**
     * The organization that assigns the identifier algorithm.
     */
    issuer: uri;
    /**
     * Contains extension information for property 'issuer'.
     */
    _issuer?: Element;
    /**
     * The jurisdiction to which the deviceIdentifier applies.
     */
    jurisdiction: uri;
    /**
     * Contains extension information for property 'jurisdiction'.
     */
    _jurisdiction?: Element;
}
/**
 * A name given to the device to identify it.
 */
export interface DeviceDefinitionDeviceName {
    /**
     * Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
     */
    id?: string;
    /**
     * Contains extension information for property 'id'.
     */
    _id?: Element;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * The name of the device.
     */
    name: string;
    /**
     * Contains extension information for property 'name'.
     */
    _name?: Element;
    /**
     * The type of deviceName.UDILabelName | UserFriendlyName | PatientReportedName | ManufactureDeviceName | ModelName.
     */
    type: code;
    /**
     * Contains extension information for property 'type'.
     */
    _type?: Element;
}
/**
 * The capabilities supported on a  device, the standards to which the device conforms for a particular purpose, and used for the communication.
 */
export interface DeviceDefinitionSpecialization {
    /**
     * Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
     */
    id?: string;
    /**
     * Contains extension information for property 'id'.
     */
    _id?: Element;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * The standard that is used to operate and communicate.
     */
    systemType: string;
    /**
     * Contains extension information for property 'systemType'.
     */
    _systemType?: Element;
    /**
     * The version of the standard that is used to operate and communicate.
     */
    version?: string;
    /**
     * Contains extension information for property 'version'.
     */
    _version?: Element;
}
/**
 * Device capabilities.
 */
export interface DeviceDefinitionCapability {
    /**
     * Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
     */
    id?: string;
    /**
     * Contains extension information for property 'id'.
     */
    _id?: Element;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * Type of capability.
     */
    type: CodeableConcept;
    /**
     * Description of capability.
     */
    description?: CodeableConcept[];
}
/**
 * The actual configuration settings of a device as it actually operates, e.g., regulation status, time properties.
 */
export interface DeviceDefinitionProperty {
    /**
     * Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
     */
    id?: string;
    /**
     * Contains extension information for property 'id'.
     */
    _id?: Element;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * Code that specifies the property DeviceDefinitionPropetyCode (Extensible).
     */
    type: CodeableConcept;
    /**
     * Property value as a quantity.
     */
    valueQuantity?: Quantity[];
    /**
     * Property value as a code, e.g., NTP4 (synced to NTP).
     */
    valueCode?: CodeableConcept[];
}
/**
 * A substance used to create the material(s) of which the device is made.
 */
export interface DeviceDefinitionMaterial {
    /**
     * Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
     */
    id?: string;
    /**
     * Contains extension information for property 'id'.
     */
    _id?: Element;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * The substance.
     */
    substance: CodeableConcept;
    /**
     * Indicates an alternative material of the device.
     */
    alternate?: boolean;
    /**
     * Contains extension information for property 'alternate'.
     */
    _alternate?: Element;
    /**
     * Whether the substance is a known or suspected allergen.
     */
    allergenicIndicator?: boolean;
    /**
     * Contains extension information for property 'allergenicIndicator'.
     */
    _allergenicIndicator?: Element;
}
/**
 * Describes a measurement, calculation or setting capability of a medical device.
 */
export interface DeviceMetric {
    /**
     * The type of the resource.
     */
    resourceType: string;
    /**
     * The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes.
     */
    id?: id;
    /**
     * Contains extension information for property 'id'.
     */
    _id?: Element;
    /**
     * The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource.
     */
    meta?: Meta;
    /**
     * A reference to a set of rules that were followed when the resource was constructed, and which must be understood when processing the content. Often, this is a reference to an implementation guide that defines the special rules along with other profiles etc.
     */
    implicitRules?: uri;
    /**
     * Contains extension information for property 'implicitRules'.
     */
    _implicitRules?: Element;
    /**
     * The base language in which the resource is written.
     */
    language?: code;
    /**
     * Contains extension information for property 'language'.
     */
    _language?: Element;
    /**
     * A human-readable narrative that contains a summary of the resource and can be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it "clinically safe" for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety.
     */
    text?: Narrative;
    /**
     * These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, and nor can they have their own independent transaction scope.
     */
    contained?: Resource[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * Unique instance identifiers assigned to a device by the device or gateway software, manufacturers, other organizations or owners. For example: handle ID.
     */
    identifier?: Identifier[];
    /**
     * Describes the type of the metric. For example: Heart Rate, PEEP Setting, etc.
     */
    type: CodeableConcept;
    /**
     * Describes the unit that an observed value determined for this metric will have. For example: Percent, Seconds, etc.
     */
    unit?: CodeableConcept;
    /**
     * Describes the link to the  Device that this DeviceMetric belongs to and that contains administrative device information such as manufacturer, serial number, etc.
     */
    source?: Reference;
    /**
     * Describes the link to the  Device that this DeviceMetric belongs to and that provide information about the location of this DeviceMetric in the containment structure of the parent Device. An example would be a Device that represents a Channel. This reference can be used by a client application to distinguish DeviceMetrics that have the same type, but should be interpreted based on their containment location.
     */
    parent?: Reference;
    /**
     * Indicates current operational state of the device. For example: On, Off, Standby, etc.
     */
    operationalStatus?: code;
    /**
     * Contains extension information for property 'operationalStatus'.
     */
    _operationalStatus?: Element;
    /**
     * Describes the color representation for the metric. This is often used to aid clinicians to track and identify parameter types by color. In practice, consider a Patient Monitor that has ECG/HR and Pleth for example; the parameters are displayed in different characteristic colors, such as HR-blue, BP-green, and PR and SpO2- magenta.
     */
    color?: code;
    /**
     * Contains extension information for property 'color'.
     */
    _color?: Element;
    /**
     * Indicates the category of the observation generation process. A DeviceMetric can be for example a setting, measurement, or calculation.
     */
    category: code;
    /**
     * Contains extension information for property 'category'.
     */
    _category?: Element;
    /**
     * Describes the measurement repetition time. This is not necessarily the same as the update period. The measurement repetition time can range from milliseconds up to hours. An example for a measurement repetition time in the range of milliseconds is the sampling rate of an ECG. An example for a measurement repetition time in the range of hours is a NIBP that is triggered automatically every hour. The update period may be different than the measurement repetition time, if the device does not update the published observed value with the same frequency as it was measured.
     */
    measurementPeriod?: Timing;
    /**
     * Describes the calibrations that have been performed or that are required to be performed.
     */
    calibration?: DeviceMetricCalibration[];
}
/**
 * Describes the calibrations that have been performed or that are required to be performed.
 */
export interface DeviceMetricCalibration {
    /**
     * Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
     */
    id?: string;
    /**
     * Contains extension information for property 'id'.
     */
    _id?: Element;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * Describes the type of the calibration method.
     */
    type?: code;
    /**
     * Contains extension information for property 'type'.
     */
    _type?: Element;
    /**
     * Describes the state of the calibration.
     */
    state?: code;
    /**
     * Contains extension information for property 'state'.
     */
    _state?: Element;
    /**
     * Describes the time last calibration has been performed.
     */
    time?: instant;
    /**
     * Contains extension information for property 'time'.
     */
    _time?: Element;
}
/**
 * Represents a request for a patient to employ a medical device. The device may be an implantable device, or an external assistive device, such as a walker.
 */
export interface DeviceRequest {
    /**
     * The type of the resource.
     */
    resourceType: string;
    /**
     * The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes.
     */
    id?: id;
    /**
     * Contains extension information for property 'id'.
     */
    _id?: Element;
    /**
     * The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource.
     */
    meta?: Meta;
    /**
     * A reference to a set of rules that were followed when the resource was constructed, and which must be understood when processing the content. Often, this is a reference to an implementation guide that defines the special rules along with other profiles etc.
     */
    implicitRules?: uri;
    /**
     * Contains extension information for property 'implicitRules'.
     */
    _implicitRules?: Element;
    /**
     * The base language in which the resource is written.
     */
    language?: code;
    /**
     * Contains extension information for property 'language'.
     */
    _language?: Element;
    /**
     * A human-readable narrative that contains a summary of the resource and can be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it "clinically safe" for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety.
     */
    text?: Narrative;
    /**
     * These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, and nor can they have their own independent transaction scope.
     */
    contained?: Resource[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * Identifiers assigned to this order by the orderer or by the receiver.
     */
    identifier?: Identifier[];
    /**
     * The URL pointing to a FHIR-defined protocol, guideline, orderset or other definition that is adhered to in whole or in part by this DeviceRequest.
     */
    instantiatesCanonical?: canonical[];
    /**
     * The URL pointing to an externally maintained protocol, guideline, orderset or other definition that is adhered to in whole or in part by this DeviceRequest.
     */
    instantiatesUri?: uri[];
    /**
     * Contains extension information for property 'instantiatesUri'.
     */
    _instantiatesUri?: Element[];
    /**
     * Plan/proposal/order fulfilled by this request.
     */
    basedOn?: Reference[];
    /**
     * The request takes the place of the referenced completed or terminated request(s).
     */
    priorRequest?: Reference[];
    /**
     * Composite request this is part of.
     */
    groupIdentifier?: Identifier;
    /**
     * The status of the request.
     */
    status?: code;
    /**
     * Contains extension information for property 'status'.
     */
    _status?: Element;
    /**
     * Whether the request is a proposal, plan, an original order or a reflex order.
     */
    intent: code;
    /**
     * Contains extension information for property 'intent'.
     */
    _intent?: Element;
    /**
     * Indicates how quickly the {{title}} should be addressed with respect to other requests.
     */
    priority?: code;
    /**
     * Contains extension information for property 'priority'.
     */
    _priority?: Element;
    /**
     * The details of the device to be used.
     */
    codeReference: Reference;
    /**
     * The details of the device to be used.
     */
    codeCodeableConcept: CodeableConcept;
    /**
     * Specific parameters for the ordered item.  For example, the prism value for lenses.
     */
    parameter?: DeviceRequestParameter[];
    /**
     * The patient who will use the device.
     */
    subject: Reference;
    /**
     * An encounter that provides additional context in which this request is made.
     */
    encounter?: Reference;
    /**
     * The timing schedule for the use of the device. The Schedule data type allows many different expressions, for example. "Every 8 hours"; "Three times a day"; "1/2 an hour before breakfast for 10 days from 23-Dec 2011:"; "15 Oct 2013, 17 Oct 2013 and 1 Nov 2013".
     */
    occurrenceDateTime?: dateTime;
    /**
     * Contains extension information for property 'occurrenceDateTime'.
     */
    _occurrenceDateTime?: Element;
    /**
     * The timing schedule for the use of the device. The Schedule data type allows many different expressions, for example. "Every 8 hours"; "Three times a day"; "1/2 an hour before breakfast for 10 days from 23-Dec 2011:"; "15 Oct 2013, 17 Oct 2013 and 1 Nov 2013".
     */
    occurrencePeriod?: Period;
    /**
     * The timing schedule for the use of the device. The Schedule data type allows many different expressions, for example. "Every 8 hours"; "Three times a day"; "1/2 an hour before breakfast for 10 days from 23-Dec 2011:"; "15 Oct 2013, 17 Oct 2013 and 1 Nov 2013".
     */
    occurrenceTiming?: Timing;
    /**
     * When the request transitioned to being actionable.
     */
    authoredOn?: dateTime;
    /**
     * Contains extension information for property 'authoredOn'.
     */
    _authoredOn?: Element;
    /**
     * The individual who initiated the request and has responsibility for its activation.
     */
    requester?: Reference;
    /**
     * Desired type of performer for doing the diagnostic testing.
     */
    performerType?: CodeableConcept;
    /**
     * The desired performer for doing the diagnostic testing.
     */
    performer?: Reference;
    /**
     * Reason or justification for the use of this device.
     */
    reasonCode?: CodeableConcept[];
    /**
     * Reason or justification for the use of this device.
     */
    reasonReference?: Reference[];
    /**
     * Insurance plans, coverage extensions, pre-authorizations and/or pre-determinations that may be required for delivering the requested service.
     */
    insurance?: Reference[];
    /**
     * Additional clinical information about the patient that may influence the request fulfilment.  For example, this may include where on the subject's body the device will be used (i.e. the target site).
     */
    supportingInfo?: Reference[];
    /**
     * Details about this request that were not represented at all or sufficiently in one of the attributes provided in a class. These may include for example a comment, an instruction, or a note associated with the statement.
     */
    note?: Annotation[];
    /**
     * Key events in the history of the request.
     */
    relevantHistory?: Reference[];
}
/**
 * Specific parameters for the ordered item.  For example, the prism value for lenses.
 */
export interface DeviceRequestParameter {
    /**
     * Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
     */
    id?: string;
    /**
     * Contains extension information for property 'id'.
     */
    _id?: Element;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * A code or string that identifies the device detail being asserted.
     */
    code?: CodeableConcept;
    /**
     * The value of the device detail.
     */
    valueCodeableConcept?: CodeableConcept;
    /**
     * The value of the device detail.
     */
    valueQuantity?: Quantity;
    /**
     * The value of the device detail.
     */
    valueRange?: Range;
    /**
     * The value of the device detail.
     */
    valueBoolean?: boolean;
    /**
     * Contains extension information for property 'valueBoolean'.
     */
    _valueBoolean?: Element;
}
/**
 * A record of a device being used by a patient where the record is the result of a report from the patient or another clinician.
 */
export interface DeviceUseStatement {
    /**
     * The type of the resource.
     */
    resourceType: string;
    /**
     * The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes.
     */
    id?: id;
    /**
     * Contains extension information for property 'id'.
     */
    _id?: Element;
    /**
     * The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource.
     */
    meta?: Meta;
    /**
     * A reference to a set of rules that were followed when the resource was constructed, and which must be understood when processing the content. Often, this is a reference to an implementation guide that defines the special rules along with other profiles etc.
     */
    implicitRules?: uri;
    /**
     * Contains extension information for property 'implicitRules'.
     */
    _implicitRules?: Element;
    /**
     * The base language in which the resource is written.
     */
    language?: code;
    /**
     * Contains extension information for property 'language'.
     */
    _language?: Element;
    /**
     * A human-readable narrative that contains a summary of the resource and can be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it "clinically safe" for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety.
     */
    text?: Narrative;
    /**
     * These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, and nor can they have their own independent transaction scope.
     */
    contained?: Resource[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * An external identifier for this statement such as an IRI.
     */
    identifier?: Identifier[];
    /**
     * A plan, proposal or order that is fulfilled in whole or in part by this DeviceUseStatement.
     */
    basedOn?: Reference[];
    /**
     * A code representing the patient or other source's judgment about the state of the device used that this statement is about.  Generally this will be active or completed.
     */
    status: code;
    /**
     * Contains extension information for property 'status'.
     */
    _status?: Element;
    /**
     * The patient who used the device.
     */
    subject: Reference;
    /**
     * Allows linking the DeviceUseStatement to the underlying Request, or to other information that supports or is used to derive the DeviceUseStatement.
     */
    derivedFrom?: Reference[];
    /**
     * How often the device was used.
     */
    timingTiming?: Timing;
    /**
     * How often the device was used.
     */
    timingPeriod?: Period;
    /**
     * How often the device was used.
     */
    timingDateTime?: dateTime;
    /**
     * Contains extension information for property 'timingDateTime'.
     */
    _timingDateTime?: Element;
    /**
     * The time at which the statement was made/recorded.
     */
    recordedOn?: dateTime;
    /**
     * Contains extension information for property 'recordedOn'.
     */
    _recordedOn?: Element;
    /**
     * Who reported the device was being used by the patient.
     */
    source?: Reference;
    /**
     * The details of the device used.
     */
    device: Reference;
    /**
     * Reason or justification for the use of the device.
     */
    reasonCode?: CodeableConcept[];
    /**
     * Indicates another resource whose existence justifies this DeviceUseStatement.
     */
    reasonReference?: Reference[];
    /**
     * Indicates the anotomic location on the subject's body where the device was used ( i.e. the target).
     */
    bodySite?: CodeableConcept;
    /**
     * Details about the device statement that were not represented at all or sufficiently in one of the attributes provided in a class. These may include for example a comment, an instruction, or a note associated with the statement.
     */
    note?: Annotation[];
}
/**
 * The findings and interpretation of diagnostic  tests performed on patients, groups of patients, devices, and locations, and/or specimens derived from these. The report includes clinical context such as requesting and provider information, and some mix of atomic results, images, textual and coded interpretations, and formatted representation of diagnostic reports.
 */
export interface DiagnosticReport {
    /**
     * The type of the resource.
     */
    resourceType: string;
    /**
     * The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes.
     */
    id?: id;
    /**
     * Contains extension information for property 'id'.
     */
    _id?: Element;
    /**
     * The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource.
     */
    meta?: Meta;
    /**
     * A reference to a set of rules that were followed when the resource was constructed, and which must be understood when processing the content. Often, this is a reference to an implementation guide that defines the special rules along with other profiles etc.
     */
    implicitRules?: uri;
    /**
     * Contains extension information for property 'implicitRules'.
     */
    _implicitRules?: Element;
    /**
     * The base language in which the resource is written.
     */
    language?: code;
    /**
     * Contains extension information for property 'language'.
     */
    _language?: Element;
    /**
     * A human-readable narrative that contains a summary of the resource and can be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it "clinically safe" for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety.
     */
    text?: Narrative;
    /**
     * These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, and nor can they have their own independent transaction scope.
     */
    contained?: Resource[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * Identifiers assigned to this report by the performer or other systems.
     */
    identifier?: Identifier[];
    /**
     * Details concerning a service requested.
     */
    basedOn?: Reference[];
    /**
     * The status of the diagnostic report.
     */
    status: code;
    /**
     * Contains extension information for property 'status'.
     */
    _status?: Element;
    /**
     * A code that classifies the clinical discipline, department or diagnostic service that created the report (e.g. cardiology, biochemistry, hematology, MRI). This is used for searching, sorting and display purposes.
     */
    category?: CodeableConcept[];
    /**
     * A code or name that describes this diagnostic report.
     */
    code: CodeableConcept;
    /**
     * The subject of the report. Usually, but not always, this is a patient. However, diagnostic services also perform analyses on specimens collected from a variety of other sources.
     */
    subject?: Reference;
    /**
     * The healthcare event  (e.g. a patient and healthcare provider interaction) which this DiagnosticReport is about.
     */
    encounter?: Reference;
    /**
     * The time or time-period the observed values are related to. When the subject of the report is a patient, this is usually either the time of the procedure or of specimen collection(s), but very often the source of the date/time is not known, only the date/time itself.
     */
    effectiveDateTime?: dateTime;
    /**
     * Contains extension information for property 'effectiveDateTime'.
     */
    _effectiveDateTime?: Element;
    /**
     * The time or time-period the observed values are related to. When the subject of the report is a patient, this is usually either the time of the procedure or of specimen collection(s), but very often the source of the date/time is not known, only the date/time itself.
     */
    effectivePeriod?: Period;
    /**
     * The date and time that this version of the report was made available to providers, typically after the report was reviewed and verified.
     */
    issued?: instant;
    /**
     * Contains extension information for property 'issued'.
     */
    _issued?: Element;
    /**
     * The diagnostic service that is responsible for issuing the report.
     */
    performer?: Reference[];
    /**
     * The practitioner or organization that is responsible for the report's conclusions and interpretations.
     */
    resultsInterpreter?: Reference[];
    /**
     * Details about the specimens on which this diagnostic report is based.
     */
    specimen?: Reference[];
    /**
     * [Observations](observation.html)  that are part of this diagnostic report.
     */
    result?: Reference[];
    /**
     * One or more links to full details of any imaging performed during the diagnostic investigation. Typically, this is imaging performed by DICOM enabled modalities, but this is not required. A fully enabled PACS viewer can use this information to provide views of the source images.
     */
    imagingStudy?: Reference[];
    /**
     * A list of key images associated with this report. The images are generally created during the diagnostic process, and may be directly of the patient, or of treated specimens (i.e. slides of interest).
     */
    media?: DiagnosticReportMedia[];
    /**
     * Concise and clinically contextualized summary conclusion (interpretation/impression) of the diagnostic report.
     */
    conclusion?: string;
    /**
     * Contains extension information for property 'conclusion'.
     */
    _conclusion?: Element;
    /**
     * One or more codes that represent the summary conclusion (interpretation/impression) of the diagnostic report.
     */
    conclusionCode?: CodeableConcept[];
    /**
     * Rich text representation of the entire result as issued by the diagnostic service. Multiple formats are allowed but they SHALL be semantically equivalent.
     */
    presentedForm?: Attachment[];
}
/**
 * A list of key images associated with this report. The images are generally created during the diagnostic process, and may be directly of the patient, or of treated specimens (i.e. slides of interest).
 */
export interface DiagnosticReportMedia {
    /**
     * Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
     */
    id?: string;
    /**
     * Contains extension information for property 'id'.
     */
    _id?: Element;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * A comment about the image. Typically, this is used to provide an explanation for why the image is included, or to draw the viewer's attention to important features.
     */
    comment?: string;
    /**
     * Contains extension information for property 'comment'.
     */
    _comment?: Element;
    /**
     * Reference to the image source.
     */
    link: Reference;
}
/**
 * A length - a value with a unit that is a physical distance.
 */
export interface Distance {
    /**
     * Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
     */
    id?: string;
    /**
     * Contains extension information for property 'id'.
     */
    _id?: Element;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * The value of the measured amount. The value includes an implicit precision in the presentation of the value.
     */
    value?: decimal;
    /**
     * Contains extension information for property 'value'.
     */
    _value?: Element;
    /**
     * How the value should be understood and represented - whether the actual value is greater or less than the stated value due to measurement issues; e.g. if the comparator is "<" , then the real value is < stated value.
     */
    comparator?: code;
    /**
     * Contains extension information for property 'comparator'.
     */
    _comparator?: Element;
    /**
     * A human-readable form of the unit.
     */
    unit?: string;
    /**
     * Contains extension information for property 'unit'.
     */
    _unit?: Element;
    /**
     * The identification of the system that provides the coded form of the unit.
     */
    system?: uri;
    /**
     * Contains extension information for property 'system'.
     */
    _system?: Element;
    /**
     * A computer processable form of the unit in some unit representation system.
     */
    code?: code;
    /**
     * Contains extension information for property 'code'.
     */
    _code?: Element;
}
/**
 * A collection of documents compiled for a purpose together with metadata that applies to the collection.
 */
export interface DocumentManifest {
    /**
     * The type of the resource.
     */
    resourceType: string;
    /**
     * The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes.
     */
    id?: id;
    /**
     * Contains extension information for property 'id'.
     */
    _id?: Element;
    /**
     * The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource.
     */
    meta?: Meta;
    /**
     * A reference to a set of rules that were followed when the resource was constructed, and which must be understood when processing the content. Often, this is a reference to an implementation guide that defines the special rules along with other profiles etc.
     */
    implicitRules?: uri;
    /**
     * Contains extension information for property 'implicitRules'.
     */
    _implicitRules?: Element;
    /**
     * The base language in which the resource is written.
     */
    language?: code;
    /**
     * Contains extension information for property 'language'.
     */
    _language?: Element;
    /**
     * A human-readable narrative that contains a summary of the resource and can be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it "clinically safe" for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety.
     */
    text?: Narrative;
    /**
     * These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, and nor can they have their own independent transaction scope.
     */
    contained?: Resource[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * A single identifier that uniquely identifies this manifest. Principally used to refer to the manifest in non-FHIR contexts.
     */
    masterIdentifier?: Identifier;
    /**
     * Other identifiers associated with the document manifest, including version independent  identifiers.
     */
    identifier?: Identifier[];
    /**
     * The status of this document manifest.
     */
    status: code;
    /**
     * Contains extension information for property 'status'.
     */
    _status?: Element;
    /**
     * The code specifying the type of clinical activity that resulted in placing the associated content into the DocumentManifest.
     */
    type?: CodeableConcept;
    /**
     * Who or what the set of documents is about. The documents can be about a person, (patient or healthcare practitioner), a device (i.e. machine) or even a group of subjects (such as a document about a herd of farm animals, or a set of patients that share a common exposure). If the documents cross more than one subject, then more than one subject is allowed here (unusual use case).
     */
    subject?: Reference;
    /**
     * When the document manifest was created for submission to the server (not necessarily the same thing as the actual resource last modified time, since it may be modified, replicated, etc.).
     */
    created?: dateTime;
    /**
     * Contains extension information for property 'created'.
     */
    _created?: Element;
    /**
     * Identifies who is the author of the manifest. Manifest author is not necessarly the author of the references included.
     */
    author?: Reference[];
    /**
     * A patient, practitioner, or organization for which this set of documents is intended.
     */
    recipient?: Reference[];
    /**
     * Identifies the source system, application, or software that produced the document manifest.
     */
    source?: uri;
    /**
     * Contains extension information for property 'source'.
     */
    _source?: Element;
    /**
     * Human-readable description of the source document. This is sometimes known as the "title".
     */
    description?: string;
    /**
     * Contains extension information for property 'description'.
     */
    _description?: Element;
    /**
     * The list of Resources that consist of the parts of this manifest.
     */
    content: Reference[];
    /**
     * Related identifiers or resources associated with the DocumentManifest.
     */
    related?: DocumentManifestRelated[];
}
/**
 * Related identifiers or resources associated with the DocumentManifest.
 */
export interface DocumentManifestRelated {
    /**
     * Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
     */
    id?: string;
    /**
     * Contains extension information for property 'id'.
     */
    _id?: Element;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * Related identifier to this DocumentManifest.  For example, Order numbers, accession numbers, XDW workflow numbers.
     */
    identifier?: Identifier;
    /**
     * Related Resource to this DocumentManifest. For example, Order, ServiceRequest,  Procedure, EligibilityRequest, etc.
     */
    ref?: Reference;
}
/**
 * A reference to a document of any kind for any purpose. Provides metadata about the document so that the document can be discovered and managed. The scope of a document is any seralized object with a mime-type, so includes formal patient centric documents (CDA), cliical notes, scanned paper, and non-patient specific documents like policy text.
 */
export interface DocumentReference {
    /**
     * The type of the resource.
     */
    resourceType: string;
    /**
     * The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes.
     */
    id?: id;
    /**
     * Contains extension information for property 'id'.
     */
    _id?: Element;
    /**
     * The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource.
     */
    meta?: Meta;
    /**
     * A reference to a set of rules that were followed when the resource was constructed, and which must be understood when processing the content. Often, this is a reference to an implementation guide that defines the special rules along with other profiles etc.
     */
    implicitRules?: uri;
    /**
     * Contains extension information for property 'implicitRules'.
     */
    _implicitRules?: Element;
    /**
     * The base language in which the resource is written.
     */
    language?: code;
    /**
     * Contains extension information for property 'language'.
     */
    _language?: Element;
    /**
     * A human-readable narrative that contains a summary of the resource and can be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it "clinically safe" for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety.
     */
    text?: Narrative;
    /**
     * These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, and nor can they have their own independent transaction scope.
     */
    contained?: Resource[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * Document identifier as assigned by the source of the document. This identifier is specific to this version of the document. This unique identifier may be used elsewhere to identify this version of the document.
     */
    masterIdentifier?: Identifier;
    /**
     * Other identifiers associated with the document, including version independent identifiers.
     */
    identifier?: Identifier[];
    /**
     * The status of this document reference.
     */
    status: code;
    /**
     * Contains extension information for property 'status'.
     */
    _status?: Element;
    /**
     * The status of the underlying document.
     */
    docStatus?: code;
    /**
     * Contains extension information for property 'docStatus'.
     */
    _docStatus?: Element;
    /**
     * Specifies the particular kind of document referenced  (e.g. History and Physical, Discharge Summary, Progress Note). This usually equates to the purpose of making the document referenced.
     */
    type?: CodeableConcept;
    /**
     * A categorization for the type of document referenced - helps for indexing and searching. This may be implied by or derived from the code specified in the DocumentReference.type.
     */
    category?: CodeableConcept[];
    /**
     * Who or what the document is about. The document can be about a person, (patient or healthcare practitioner), a device (e.g. a machine) or even a group of subjects (such as a document about a herd of farm animals, or a set of patients that share a common exposure).
     */
    subject?: Reference;
    /**
     * When the document reference was created.
     */
    date?: instant;
    /**
     * Contains extension information for property 'date'.
     */
    _date?: Element;
    /**
     * Identifies who is responsible for adding the information to the document.
     */
    author?: Reference[];
    /**
     * Which person or organization authenticates that this document is valid.
     */
    authenticator?: Reference;
    /**
     * Identifies the organization or group who is responsible for ongoing maintenance of and access to the document.
     */
    custodian?: Reference;
    /**
     * Relationships that this document has with other document references that already exist.
     */
    relatesTo?: DocumentReferenceRelatesTo[];
    /**
     * Human-readable description of the source document.
     */
    description?: string;
    /**
     * Contains extension information for property 'description'.
     */
    _description?: Element;
    /**
     * A set of Security-Tag codes specifying the level of privacy/security of the Document. Note that DocumentReference.meta.security contains the security labels of the "reference" to the document, while DocumentReference.securityLabel contains a snapshot of the security labels on the document the reference refers to.
     */
    securityLabel?: CodeableConcept[];
    /**
     * The document and format referenced. There may be multiple content element repetitions, each with a different format.
     */
    content: DocumentReferenceContent[];
    /**
     * The clinical context in which the document was prepared.
     */
    context?: DocumentReferenceContext;
}
/**
 * Relationships that this document has with other document references that already exist.
 */
export interface DocumentReferenceRelatesTo {
    /**
     * Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
     */
    id?: string;
    /**
     * Contains extension information for property 'id'.
     */
    _id?: Element;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * The type of relationship that this document has with anther document.
     */
    code: code;
    /**
     * Contains extension information for property 'code'.
     */
    _code?: Element;
    /**
     * The target document of this relationship.
     */
    target: Reference;
}
/**
 * The document and format referenced. There may be multiple content element repetitions, each with a different format.
 */
export interface DocumentReferenceContent {
    /**
     * Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
     */
    id?: string;
    /**
     * Contains extension information for property 'id'.
     */
    _id?: Element;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * The document or URL of the document along with critical metadata to prove content has integrity.
     */
    attachment: Attachment;
    /**
     * An identifier of the document encoding, structure, and template that the document conforms to beyond the base format indicated in the mimeType.
     */
    format?: Coding;
}
/**
 * The clinical context in which the document was prepared.
 */
export interface DocumentReferenceContext {
    /**
     * Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
     */
    id?: string;
    /**
     * Contains extension information for property 'id'.
     */
    _id?: Element;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * Describes the clinical encounter or type of care that the document content is associated with.
     */
    encounter?: Reference[];
    /**
     * This list of codes represents the main clinical acts, such as a colonoscopy or an appendectomy, being documented. In some cases, the event is inherent in the type Code, such as a "History and Physical Report" in which the procedure being documented is necessarily a "History and Physical" act.
     */
    event?: CodeableConcept[];
    /**
     * The time period over which the service that is described by the document was provided.
     */
    period?: Period;
    /**
     * The kind of facility where the patient was seen.
     */
    facilityType?: CodeableConcept;
    /**
     * This property may convey specifics about the practice setting where the content was created, often reflecting the clinical specialty.
     */
    practiceSetting?: CodeableConcept;
    /**
     * The Patient Information as known when the document was published. May be a reference to a version specific, or contained.
     */
    sourcePatientInfo?: Reference;
    /**
     * Related identifiers or resources associated with the DocumentReference.
     */
    related?: Reference[];
}
/**
 * Indicates how the medication is/was taken or should be taken by the patient.
 */
export interface Dosage {
    /**
     * Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
     */
    id?: string;
    /**
     * Contains extension information for property 'id'.
     */
    _id?: Element;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * Indicates the order in which the dosage instructions should be applied or interpreted.
     */
    sequence?: integer;
    /**
     * Contains extension information for property 'sequence'.
     */
    _sequence?: Element;
    /**
     * Free text dosage instructions e.g. SIG.
     */
    text?: string;
    /**
     * Contains extension information for property 'text'.
     */
    _text?: Element;
    /**
     * Supplemental instructions to the patient on how to take the medication  (e.g. "with meals" or"take half to one hour before food") or warnings for the patient about the medication (e.g. "may cause drowsiness" or "avoid exposure of skin to direct sunlight or sunlamps").
     */
    additionalInstruction?: CodeableConcept[];
    /**
     * Instructions in terms that are understood by the patient or consumer.
     */
    patientInstruction?: string;
    /**
     * Contains extension information for property 'patientInstruction'.
     */
    _patientInstruction?: Element;
    /**
     * When medication should be administered.
     */
    timing?: Timing;
    /**
     * Indicates whether the Medication is only taken when needed within a specific dosing schedule (Boolean option), or it indicates the precondition for taking the Medication (CodeableConcept).
     */
    asneededBoolean?: boolean;
    /**
     * Contains extension information for property 'asneededBoolean'.
     */
    _asneededBoolean?: Element;
    /**
     * Indicates whether the Medication is only taken when needed within a specific dosing schedule (Boolean option), or it indicates the precondition for taking the Medication (CodeableConcept).
     */
    asneededCodeableConcept?: CodeableConcept;
    /**
     * Body site to administer to.
     */
    site?: CodeableConcept;
    /**
     * How drug should enter body.
     */
    route?: CodeableConcept;
    /**
     * Technique for administering medication.
     */
    method?: CodeableConcept;
    /**
     * The amount of medication administered.
     */
    doseAndRate?: Element[];
    /**
     * Upper limit on medication per unit of time.
     */
    maxDosePerPeriod?: Ratio;
    /**
     * Upper limit on medication per administration.
     */
    maxDosePerAdministration?: Quantity;
    /**
     * Upper limit on medication per lifetime of the patient.
     */
    maxDosePerLifetime?: Quantity;
}
export interface DosageDoseAndRate {
    /**
     * Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
     */
    id?: string;
    /**
     * Contains extension information for property 'id'.
     */
    _id?: Element;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * The kind of dose or rate specified, for example, ordered or calculated.
     */
    type?: CodeableConcept;
    /**
     * Amount of medication per dose.
     */
    doseRange?: Range;
    /**
     * Amount of medication per dose.
     */
    doseQuantity?: Quantity;
    /**
     * Amount of medication per unit of time.
     */
    rateRatio?: Ratio;
    /**
     * Amount of medication per unit of time.
     */
    rateRange?: Range;
    /**
     * Amount of medication per unit of time.
     */
    rateQuantity?: Quantity;
}
/**
 * A length of time.
 */
export interface Duration {
    /**
     * Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
     */
    id?: string;
    /**
     * Contains extension information for property 'id'.
     */
    _id?: Element;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * The value of the measured amount. The value includes an implicit precision in the presentation of the value.
     */
    value?: decimal;
    /**
     * Contains extension information for property 'value'.
     */
    _value?: Element;
    /**
     * How the value should be understood and represented - whether the actual value is greater or less than the stated value due to measurement issues; e.g. if the comparator is "<" , then the real value is < stated value.
     */
    comparator?: code;
    /**
     * Contains extension information for property 'comparator'.
     */
    _comparator?: Element;
    /**
     * A human-readable form of the unit.
     */
    unit?: string;
    /**
     * Contains extension information for property 'unit'.
     */
    _unit?: Element;
    /**
     * The identification of the system that provides the coded form of the unit.
     */
    system?: uri;
    /**
     * Contains extension information for property 'system'.
     */
    _system?: Element;
    /**
     * A computer processable form of the unit in some unit representation system.
     */
    code?: code;
    /**
     * Contains extension information for property 'code'.
     */
    _code?: Element;
}
/**
 * The EffectEvidenceSynthesis resource describes the difference in an outcome between exposures states in a population where the effect estimate is derived from a combination of research studies.
 */
export interface EffectEvidenceSynthesis {
    /**
     * The type of the resource.
     */
    resourceType: string;
    /**
     * The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes.
     */
    id?: id;
    /**
     * Contains extension information for property 'id'.
     */
    _id?: Element;
    /**
     * The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource.
     */
    meta?: Meta;
    /**
     * A reference to a set of rules that were followed when the resource was constructed, and which must be understood when processing the content. Often, this is a reference to an implementation guide that defines the special rules along with other profiles etc.
     */
    implicitRules?: uri;
    /**
     * Contains extension information for property 'implicitRules'.
     */
    _implicitRules?: Element;
    /**
     * The base language in which the resource is written.
     */
    language?: code;
    /**
     * Contains extension information for property 'language'.
     */
    _language?: Element;
    /**
     * A human-readable narrative that contains a summary of the resource and can be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it "clinically safe" for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety.
     */
    text?: Narrative;
    /**
     * These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, and nor can they have their own independent transaction scope.
     */
    contained?: Resource[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * An absolute URI that is used to identify this effect evidence synthesis when it is referenced in a specification, model, design or an instance; also called its canonical identifier. This SHOULD be globally unique and SHOULD be a literal address at which at which an authoritative instance of this effect evidence synthesis is (or will be) published. This URL can be the target of a canonical reference. It SHALL remain the same when the effect evidence synthesis is stored on different servers.
     */
    url?: uri;
    /**
     * Contains extension information for property 'url'.
     */
    _url?: Element;
    /**
     * A formal identifier that is used to identify this effect evidence synthesis when it is represented in other formats, or referenced in a specification, model, design or an instance.
     */
    identifier?: Identifier[];
    /**
     * The identifier that is used to identify this version of the effect evidence synthesis when it is referenced in a specification, model, design or instance. This is an arbitrary value managed by the effect evidence synthesis author and is not expected to be globally unique. For example, it might be a timestamp (e.g. yyyymmdd) if a managed version is not available. There is also no expectation that versions can be placed in a lexicographical sequence.
     */
    version?: string;
    /**
     * Contains extension information for property 'version'.
     */
    _version?: Element;
    /**
     * A natural language name identifying the effect evidence synthesis. This name should be usable as an identifier for the module by machine processing applications such as code generation.
     */
    name?: string;
    /**
     * Contains extension information for property 'name'.
     */
    _name?: Element;
    /**
     * A short, descriptive, user-friendly title for the effect evidence synthesis.
     */
    title?: string;
    /**
     * Contains extension information for property 'title'.
     */
    _title?: Element;
    /**
     * The status of this effect evidence synthesis. Enables tracking the life-cycle of the content.
     */
    status: code;
    /**
     * Contains extension information for property 'status'.
     */
    _status?: Element;
    /**
     * The date  (and optionally time) when the effect evidence synthesis was published. The date must change when the business version changes and it must change if the status code changes. In addition, it should change when the substantive content of the effect evidence synthesis changes.
     */
    date?: dateTime;
    /**
     * Contains extension information for property 'date'.
     */
    _date?: Element;
    /**
     * The name of the organization or individual that published the effect evidence synthesis.
     */
    publisher?: string;
    /**
     * Contains extension information for property 'publisher'.
     */
    _publisher?: Element;
    /**
     * Contact details to assist a user in finding and communicating with the publisher.
     */
    contact?: ContactDetail[];
    /**
     * A free text natural language description of the effect evidence synthesis from a consumer's perspective.
     */
    description?: markdown;
    /**
     * Contains extension information for property 'description'.
     */
    _description?: Element;
    /**
     * A human-readable string to clarify or explain concepts about the resource.
     */
    note?: Annotation[];
    /**
     * The content was developed with a focus and intent of supporting the contexts that are listed. These contexts may be general categories (gender, age, ...) or may be references to specific programs (insurance plans, studies, ...) and may be used to assist with indexing and searching for appropriate effect evidence synthesis instances.
     */
    useContext?: UsageContext[];
    /**
     * A legal or geographic region in which the effect evidence synthesis is intended to be used.
     */
    jurisdiction?: CodeableConcept[];
    /**
     * A copyright statement relating to the effect evidence synthesis and/or its contents. Copyright statements are generally legal restrictions on the use and publishing of the effect evidence synthesis.
     */
    copyright?: markdown;
    /**
     * Contains extension information for property 'copyright'.
     */
    _copyright?: Element;
    /**
     * The date on which the resource content was approved by the publisher. Approval happens once when the content is officially approved for usage.
     */
    approvalDate?: date;
    /**
     * Contains extension information for property 'approvalDate'.
     */
    _approvalDate?: Element;
    /**
     * The date on which the resource content was last reviewed. Review happens periodically after approval but does not change the original approval date.
     */
    lastReviewDate?: date;
    /**
     * Contains extension information for property 'lastReviewDate'.
     */
    _lastReviewDate?: Element;
    /**
     * The period during which the effect evidence synthesis content was or is planned to be in active use.
     */
    effectivePeriod?: Period;
    /**
     * Descriptive topics related to the content of the EffectEvidenceSynthesis. Topics provide a high-level categorization grouping types of EffectEvidenceSynthesiss that can be useful for filtering and searching.
     */
    topic?: CodeableConcept[];
    /**
     * An individiual or organization primarily involved in the creation and maintenance of the content.
     */
    author?: ContactDetail[];
    /**
     * An individual or organization primarily responsible for internal coherence of the content.
     */
    editor?: ContactDetail[];
    /**
     * An individual or organization primarily responsible for review of some aspect of the content.
     */
    reviewer?: ContactDetail[];
    /**
     * An individual or organization responsible for officially endorsing the content for use in some setting.
     */
    endorser?: ContactDetail[];
    /**
     * Related artifacts such as additional documentation, justification, or bibliographic references.
     */
    relatedArtifact?: RelatedArtifact[];
    /**
     * Type of synthesis eg meta-analysis.
     */
    synthesisType?: CodeableConcept;
    /**
     * Type of study eg randomized trial.
     */
    studyType?: CodeableConcept;
    /**
     * A reference to a EvidenceVariable resource that defines the population for the research.
     */
    population: Reference;
    /**
     * A reference to a EvidenceVariable resource that defines the exposure for the research.
     */
    exposure: Reference;
    /**
     * A reference to a EvidenceVariable resource that defines the comparison exposure for the research.
     */
    exposureAlternative: Reference;
    /**
     * A reference to a EvidenceVariable resomece that defines the outcome for the research.
     */
    outcome: Reference;
    /**
     * A description of the size of the sample involved in the synthesis.
     */
    sampleSize?: EffectEvidenceSynthesisSampleSize;
    /**
     * A description of the results for each exposure considered in the effect estimate.
     */
    resultsByExposure?: EffectEvidenceSynthesisResultsByExposure[];
    /**
     * The estimated effect of the exposure variant.
     */
    effectEstimate?: EffectEvidenceSynthesisEffectEstimate[];
    /**
     * A description of the certainty of the effect estimate.
     */
    certainty?: EffectEvidenceSynthesisCertainty[];
}
/**
 * A description of the size of the sample involved in the synthesis.
 */
export interface EffectEvidenceSynthesisSampleSize {
    /**
     * Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
     */
    id?: string;
    /**
     * Contains extension information for property 'id'.
     */
    _id?: Element;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * Human-readable summary of sample size.
     */
    description?: string;
    /**
     * Contains extension information for property 'description'.
     */
    _description?: Element;
    /**
     * Number of studies included in this evidence synthesis.
     */
    numberOfStudies?: integer;
    /**
     * Contains extension information for property 'numberOfStudies'.
     */
    _numberOfStudies?: Element;
    /**
     * Number of participants included in this evidence synthesis.
     */
    numberOfParticipants?: integer;
    /**
     * Contains extension information for property 'numberOfParticipants'.
     */
    _numberOfParticipants?: Element;
}
/**
 * A description of the results for each exposure considered in the effect estimate.
 */
export interface EffectEvidenceSynthesisResultsByExposure {
    /**
     * Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
     */
    id?: string;
    /**
     * Contains extension information for property 'id'.
     */
    _id?: Element;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * Human-readable summary of results by exposure state.
     */
    description?: string;
    /**
     * Contains extension information for property 'description'.
     */
    _description?: Element;
    /**
     * Whether these results are for the exposure state or alternative exposure state.
     */
    exposureState?: code;
    /**
     * Contains extension information for property 'exposureState'.
     */
    _exposureState?: Element;
    /**
     * Used to define variant exposure states such as low-risk state.
     */
    variantState?: CodeableConcept;
    /**
     * Reference to a RiskEvidenceSynthesis resource.
     */
    riskEvidenceSynthesis: Reference;
}
/**
 * The estimated effect of the exposure variant.
 */
export interface EffectEvidenceSynthesisEffectEstimate {
    /**
     * Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
     */
    id?: string;
    /**
     * Contains extension information for property 'id'.
     */
    _id?: Element;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * Human-readable summary of effect estimate.
     */
    description?: string;
    /**
     * Contains extension information for property 'description'.
     */
    _description?: Element;
    /**
     * Examples include relative risk and mean difference.
     */
    type?: CodeableConcept;
    /**
     * Used to define variant exposure states such as low-risk state.
     */
    variantState?: CodeableConcept;
    /**
     * The point estimate of the effect estimate.
     */
    value?: decimal;
    /**
     * Contains extension information for property 'value'.
     */
    _value?: Element;
    /**
     * Specifies the UCUM unit for the outcome.
     */
    unitOfMeasure?: CodeableConcept;
    /**
     * A description of the precision of the estimate for the effect.
     */
    precisionEstimate?: EffectEvidenceSynthesisEffectEstimatePrecisionEstimate[];
}
/**
 * A description of the precision of the estimate for the effect.
 */
export interface EffectEvidenceSynthesisEffectEstimatePrecisionEstimate {
    /**
     * Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
     */
    id?: string;
    /**
     * Contains extension information for property 'id'.
     */
    _id?: Element;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * Examples include confidence interval and interquartile range.
     */
    type?: CodeableConcept;
    /**
     * Use 95 for a 95% confidence interval.
     */
    level?: decimal;
    /**
     * Contains extension information for property 'level'.
     */
    _level?: Element;
    /**
     * Lower bound of confidence interval.
     */
    from?: decimal;
    /**
     * Contains extension information for property 'from'.
     */
    _from?: Element;
    /**
     * Upper bound of confidence interval.
     */
    to?: decimal;
    /**
     * Contains extension information for property 'to'.
     */
    _to?: Element;
}
/**
 * A description of the certainty of the effect estimate.
 */
export interface EffectEvidenceSynthesisCertainty {
    /**
     * Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
     */
    id?: string;
    /**
     * Contains extension information for property 'id'.
     */
    _id?: Element;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * A rating of the certainty of the effect estimate.
     */
    rating?: CodeableConcept[];
    /**
     * A human-readable string to clarify or explain concepts about the resource.
     */
    note?: Annotation[];
    /**
     * A description of a component of the overall certainty.
     */
    certaintySubcomponent?: EffectEvidenceSynthesisCertaintyCertaintySubcomponent[];
}
/**
 * A description of a component of the overall certainty.
 */
export interface EffectEvidenceSynthesisCertaintyCertaintySubcomponent {
    /**
     * Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
     */
    id?: string;
    /**
     * Contains extension information for property 'id'.
     */
    _id?: Element;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * Type of subcomponent of certainty rating.
     */
    type?: CodeableConcept;
    /**
     * A rating of a subcomponent of rating certainty.
     */
    rating?: CodeableConcept[];
    /**
     * A human-readable string to clarify or explain concepts about the resource.
     */
    note?: Annotation[];
}
/**
 * Base definition for all elements in a resource.
 */
export interface Element {
    /**
     * Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
     */
    id?: undefined;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
}
/**
 * Captures constraints on each element within the resource, profile, or extension.
 */
export interface ElementDefinition {
    /**
     * Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
     */
    id?: string;
    /**
     * Contains extension information for property 'id'.
     */
    _id?: Element;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * The path identifies the element and is expressed as a "."-separated list of ancestor elements, beginning with the name of the resource or extension.
     */
    path: string;
    /**
     * Contains extension information for property 'path'.
     */
    _path?: Element;
    /**
     * Codes that define how this element is represented in instances, when the deviation varies from the normal case.
     */
    representation?: code[];
    /**
     * Contains extension information for property 'representation'.
     */
    _representation?: Element[];
    /**
     * The name of this element definition slice, when slicing is working. The name must be a token with no dots or spaces. This is a unique name referring to a specific set of constraints applied to this element, used to provide a name to different slices of the same element.
     */
    sliceName?: string;
    /**
     * Contains extension information for property 'sliceName'.
     */
    _sliceName?: Element;
    /**
     * If true, indicates that this slice definition is constraining a slice definition with the same name in an inherited profile. If false, the slice is not overriding any slice in an inherited profile. If missing, the slice might or might not be overriding a slice in an inherited profile, depending on the sliceName.
     */
    sliceIsConstraining?: boolean;
    /**
     * Contains extension information for property 'sliceIsConstraining'.
     */
    _sliceIsConstraining?: Element;
    /**
     * A single preferred label which is the text to display beside the element indicating its meaning or to use to prompt for the element in a user display or form.
     */
    label?: string;
    /**
     * Contains extension information for property 'label'.
     */
    _label?: Element;
    /**
     * A code that has the same meaning as the element in a particular terminology.
     */
    code?: Coding[];
    /**
     * Indicates that the element is sliced into a set of alternative definitions (i.e. in a structure definition, there are multiple different constraints on a single element in the base resource). Slicing can be used in any resource that has cardinality ..* on the base resource, or any resource with a choice of types. The set of slices is any elements that come after this in the element sequence that have the same path, until a shorter path occurs (the shorter path terminates the set).
     */
    slicing?: Element;
    /**
     * A concise description of what this element means (e.g. for use in autogenerated summaries).
     */
    short?: string;
    /**
     * Contains extension information for property 'short'.
     */
    _short?: Element;
    /**
     * Provides a complete explanation of the meaning of the data element for human readability.  For the case of elements derived from existing elements (e.g. constraints), the definition SHALL be consistent with the base definition, but convey the meaning of the element in the particular context of use of the resource. (Note: The text you are reading is specified in ElementDefinition.definition).
     */
    definition?: markdown;
    /**
     * Contains extension information for property 'definition'.
     */
    _definition?: Element;
    /**
     * Explanatory notes and implementation guidance about the data element, including notes about how to use the data properly, exceptions to proper use, etc. (Note: The text you are reading is specified in ElementDefinition.comment).
     */
    comment?: markdown;
    /**
     * Contains extension information for property 'comment'.
     */
    _comment?: Element;
    /**
     * This element is for traceability of why the element was created and why the constraints exist as they do. This may be used to point to source materials or specifications that drove the structure of this element.
     */
    requirements?: markdown;
    /**
     * Contains extension information for property 'requirements'.
     */
    _requirements?: Element;
    /**
     * Identifies additional names by which this element might also be known.
     */
    alias?: string[];
    /**
     * Contains extension information for property 'alias'.
     */
    _alias?: Element[];
    /**
     * The minimum number of times this element SHALL appear in the instance.
     */
    min?: unsignedInt;
    /**
     * Contains extension information for property 'min'.
     */
    _min?: Element;
    /**
     * The maximum number of times this element is permitted to appear in the instance.
     */
    max?: string;
    /**
     * Contains extension information for property 'max'.
     */
    _max?: Element;
    /**
     * Information about the base definition of the element, provided to make it unnecessary for tools to trace the deviation of the element through the derived and related profiles. When the element definition is not the original definition of an element - i.g. either in a constraint on another type, or for elements from a super type in a snap shot - then the information in provided in the element definition may be different to the base definition. On the original definition of the element, it will be same.
     */
    base?: Element;
    /**
     * Identifies an element defined elsewhere in the definition whose content rules should be applied to the current element. ContentReferences bring across all the rules that are in the ElementDefinition for the element, including definitions, cardinality constraints, bindings, invariants etc.
     */
    contentReference?: uri;
    /**
     * Contains extension information for property 'contentReference'.
     */
    _contentReference?: Element;
    /**
     * The data type or resource that the value of this element is permitted to be.
     */
    type?: Element[];
    /**
     * The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').
     */
    defaultvalueBase64Binary?: base64Binary;
    /**
     * Contains extension information for property 'defaultvalueBase64Binary'.
     */
    _defaultvalueBase64Binary?: Element;
    /**
     * The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').
     */
    defaultvalueBoolean?: boolean;
    /**
     * Contains extension information for property 'defaultvalueBoolean'.
     */
    _defaultvalueBoolean?: Element;
    /**
     * The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').
     */
    defaultvalueCanonical?: canonical;
    /**
     * The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').
     */
    defaultvalueCode?: code;
    /**
     * Contains extension information for property 'defaultvalueCode'.
     */
    _defaultvalueCode?: Element;
    /**
     * The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').
     */
    defaultvalueDate?: date;
    /**
     * Contains extension information for property 'defaultvalueDate'.
     */
    _defaultvalueDate?: Element;
    /**
     * The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').
     */
    defaultvalueDateTime?: dateTime;
    /**
     * Contains extension information for property 'defaultvalueDateTime'.
     */
    _defaultvalueDateTime?: Element;
    /**
     * The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').
     */
    defaultvalueDecimal?: decimal;
    /**
     * Contains extension information for property 'defaultvalueDecimal'.
     */
    _defaultvalueDecimal?: Element;
    /**
     * The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').
     */
    defaultvalueId?: id;
    /**
     * Contains extension information for property 'defaultvalueId'.
     */
    _defaultvalueId?: Element;
    /**
     * The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').
     */
    defaultvalueInstant?: instant;
    /**
     * Contains extension information for property 'defaultvalueInstant'.
     */
    _defaultvalueInstant?: Element;
    /**
     * The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').
     */
    defaultvalueInteger?: integer;
    /**
     * Contains extension information for property 'defaultvalueInteger'.
     */
    _defaultvalueInteger?: Element;
    /**
     * The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').
     */
    defaultvalueMarkdown?: markdown;
    /**
     * Contains extension information for property 'defaultvalueMarkdown'.
     */
    _defaultvalueMarkdown?: Element;
    /**
     * The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').
     */
    defaultvalueOid?: oid;
    /**
     * Contains extension information for property 'defaultvalueOid'.
     */
    _defaultvalueOid?: Element;
    /**
     * The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').
     */
    defaultvaluePositiveInt?: positiveInt;
    /**
     * Contains extension information for property 'defaultvaluePositiveInt'.
     */
    _defaultvaluePositiveInt?: Element;
    /**
     * The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').
     */
    defaultvalueString?: string;
    /**
     * Contains extension information for property 'defaultvalueString'.
     */
    _defaultvalueString?: Element;
    /**
     * The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').
     */
    defaultvalueTime?: time;
    /**
     * Contains extension information for property 'defaultvalueTime'.
     */
    _defaultvalueTime?: Element;
    /**
     * The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').
     */
    defaultvalueUnsignedInt?: unsignedInt;
    /**
     * Contains extension information for property 'defaultvalueUnsignedInt'.
     */
    _defaultvalueUnsignedInt?: Element;
    /**
     * The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').
     */
    defaultvalueUri?: uri;
    /**
     * Contains extension information for property 'defaultvalueUri'.
     */
    _defaultvalueUri?: Element;
    /**
     * The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').
     */
    defaultvalueUrl?: url;
    /**
     * The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').
     */
    defaultvalueUuid?: uuid;
    /**
     * The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').
     */
    defaultvalueAddress?: Address;
    /**
     * The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').
     */
    defaultvalueAge?: Age;
    /**
     * The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').
     */
    defaultvalueAnnotation?: Annotation;
    /**
     * The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').
     */
    defaultvalueAttachment?: Attachment;
    /**
     * The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').
     */
    defaultvalueCodeableConcept?: CodeableConcept;
    /**
     * The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').
     */
    defaultvalueCoding?: Coding;
    /**
     * The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').
     */
    defaultvalueContactPoint?: ContactPoint;
    /**
     * The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').
     */
    defaultvalueCount?: Count;
    /**
     * The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').
     */
    defaultvalueDistance?: Distance;
    /**
     * The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').
     */
    defaultvalueDuration?: Duration;
    /**
     * The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').
     */
    defaultvalueHumanName?: HumanName;
    /**
     * The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').
     */
    defaultvalueIdentifier?: Identifier;
    /**
     * The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').
     */
    defaultvalueMoney?: Money;
    /**
     * The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').
     */
    defaultvaluePeriod?: Period;
    /**
     * The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').
     */
    defaultvalueQuantity?: Quantity;
    /**
     * The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').
     */
    defaultvalueRange?: Range;
    /**
     * The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').
     */
    defaultvalueRatio?: Ratio;
    /**
     * The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').
     */
    defaultvalueReference?: Reference;
    /**
     * The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').
     */
    defaultvalueSampledData?: SampledData;
    /**
     * The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').
     */
    defaultvalueSignature?: Signature;
    /**
     * The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').
     */
    defaultvalueTiming?: Timing;
    /**
     * The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').
     */
    defaultvalueContactDetail?: ContactDetail;
    /**
     * The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').
     */
    defaultvalueContributor?: Contributor;
    /**
     * The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').
     */
    defaultvalueDataRequirement?: DataRequirement;
    /**
     * The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').
     */
    defaultvalueExpression?: Expression;
    /**
     * The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').
     */
    defaultvalueParameterDefinition?: ParameterDefinition;
    /**
     * The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').
     */
    defaultvalueRelatedArtifact?: RelatedArtifact;
    /**
     * The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').
     */
    defaultvalueTriggerDefinition?: TriggerDefinition;
    /**
     * The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').
     */
    defaultvalueUsageContext?: UsageContext;
    /**
     * The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').
     */
    defaultvalueDosage?: Dosage;
    /**
     * The Implicit meaning that is to be understood when this element is missing (e.g. 'when this element is missing, the period is ongoing').
     */
    meaningWhenMissing?: markdown;
    /**
     * Contains extension information for property 'meaningWhenMissing'.
     */
    _meaningWhenMissing?: Element;
    /**
     * If present, indicates that the order of the repeating element has meaning and describes what that meaning is.  If absent, it means that the order of the element has no meaning.
     */
    orderMeaning?: string;
    /**
     * Contains extension information for property 'orderMeaning'.
     */
    _orderMeaning?: Element;
    /**
     * Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.
     */
    fixedBase64Binary?: base64Binary;
    /**
     * Contains extension information for property 'fixedBase64Binary'.
     */
    _fixedBase64Binary?: Element;
    /**
     * Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.
     */
    fixedBoolean?: boolean;
    /**
     * Contains extension information for property 'fixedBoolean'.
     */
    _fixedBoolean?: Element;
    /**
     * Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.
     */
    fixedCanonical?: canonical;
    /**
     * Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.
     */
    fixedCode?: code;
    /**
     * Contains extension information for property 'fixedCode'.
     */
    _fixedCode?: Element;
    /**
     * Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.
     */
    fixedDate?: date;
    /**
     * Contains extension information for property 'fixedDate'.
     */
    _fixedDate?: Element;
    /**
     * Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.
     */
    fixedDateTime?: dateTime;
    /**
     * Contains extension information for property 'fixedDateTime'.
     */
    _fixedDateTime?: Element;
    /**
     * Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.
     */
    fixedDecimal?: decimal;
    /**
     * Contains extension information for property 'fixedDecimal'.
     */
    _fixedDecimal?: Element;
    /**
     * Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.
     */
    fixedId?: id;
    /**
     * Contains extension information for property 'fixedId'.
     */
    _fixedId?: Element;
    /**
     * Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.
     */
    fixedInstant?: instant;
    /**
     * Contains extension information for property 'fixedInstant'.
     */
    _fixedInstant?: Element;
    /**
     * Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.
     */
    fixedInteger?: integer;
    /**
     * Contains extension information for property 'fixedInteger'.
     */
    _fixedInteger?: Element;
    /**
     * Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.
     */
    fixedMarkdown?: markdown;
    /**
     * Contains extension information for property 'fixedMarkdown'.
     */
    _fixedMarkdown?: Element;
    /**
     * Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.
     */
    fixedOid?: oid;
    /**
     * Contains extension information for property 'fixedOid'.
     */
    _fixedOid?: Element;
    /**
     * Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.
     */
    fixedPositiveInt?: positiveInt;
    /**
     * Contains extension information for property 'fixedPositiveInt'.
     */
    _fixedPositiveInt?: Element;
    /**
     * Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.
     */
    fixedString?: string;
    /**
     * Contains extension information for property 'fixedString'.
     */
    _fixedString?: Element;
    /**
     * Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.
     */
    fixedTime?: time;
    /**
     * Contains extension information for property 'fixedTime'.
     */
    _fixedTime?: Element;
    /**
     * Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.
     */
    fixedUnsignedInt?: unsignedInt;
    /**
     * Contains extension information for property 'fixedUnsignedInt'.
     */
    _fixedUnsignedInt?: Element;
    /**
     * Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.
     */
    fixedUri?: uri;
    /**
     * Contains extension information for property 'fixedUri'.
     */
    _fixedUri?: Element;
    /**
     * Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.
     */
    fixedUrl?: url;
    /**
     * Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.
     */
    fixedUuid?: uuid;
    /**
     * Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.
     */
    fixedAddress?: Address;
    /**
     * Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.
     */
    fixedAge?: Age;
    /**
     * Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.
     */
    fixedAnnotation?: Annotation;
    /**
     * Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.
     */
    fixedAttachment?: Attachment;
    /**
     * Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.
     */
    fixedCodeableConcept?: CodeableConcept;
    /**
     * Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.
     */
    fixedCoding?: Coding;
    /**
     * Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.
     */
    fixedContactPoint?: ContactPoint;
    /**
     * Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.
     */
    fixedCount?: Count;
    /**
     * Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.
     */
    fixedDistance?: Distance;
    /**
     * Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.
     */
    fixedDuration?: Duration;
    /**
     * Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.
     */
    fixedHumanName?: HumanName;
    /**
     * Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.
     */
    fixedIdentifier?: Identifier;
    /**
     * Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.
     */
    fixedMoney?: Money;
    /**
     * Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.
     */
    fixedPeriod?: Period;
    /**
     * Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.
     */
    fixedQuantity?: Quantity;
    /**
     * Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.
     */
    fixedRange?: Range;
    /**
     * Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.
     */
    fixedRatio?: Ratio;
    /**
     * Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.
     */
    fixedReference?: Reference;
    /**
     * Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.
     */
    fixedSampledData?: SampledData;
    /**
     * Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.
     */
    fixedSignature?: Signature;
    /**
     * Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.
     */
    fixedTiming?: Timing;
    /**
     * Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.
     */
    fixedContactDetail?: ContactDetail;
    /**
     * Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.
     */
    fixedContributor?: Contributor;
    /**
     * Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.
     */
    fixedDataRequirement?: DataRequirement;
    /**
     * Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.
     */
    fixedExpression?: Expression;
    /**
     * Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.
     */
    fixedParameterDefinition?: ParameterDefinition;
    /**
     * Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.
     */
    fixedRelatedArtifact?: RelatedArtifact;
    /**
     * Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.
     */
    fixedTriggerDefinition?: TriggerDefinition;
    /**
     * Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.
     */
    fixedUsageContext?: UsageContext;
    /**
     * Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.
     */
    fixedDosage?: Dosage;
    /**
     * Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  When pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.When pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] array must (recursively) match at least one element from the instance array.When pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match -- i.e.,1. If primitive: it must match exactly the pattern value2. If a complex object: it must match (recursively) the pattern value3. If an array: it must match (recursively) the pattern value.
     */
    patternBase64Binary?: base64Binary;
    /**
     * Contains extension information for property 'patternBase64Binary'.
     */
    _patternBase64Binary?: Element;
    /**
     * Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  When pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.When pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] array must (recursively) match at least one element from the instance array.When pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match -- i.e.,1. If primitive: it must match exactly the pattern value2. If a complex object: it must match (recursively) the pattern value3. If an array: it must match (recursively) the pattern value.
     */
    patternBoolean?: boolean;
    /**
     * Contains extension information for property 'patternBoolean'.
     */
    _patternBoolean?: Element;
    /**
     * Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  When pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.When pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] array must (recursively) match at least one element from the instance array.When pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match -- i.e.,1. If primitive: it must match exactly the pattern value2. If a complex object: it must match (recursively) the pattern value3. If an array: it must match (recursively) the pattern value.
     */
    patternCanonical?: canonical;
    /**
     * Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  When pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.When pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] array must (recursively) match at least one element from the instance array.When pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match -- i.e.,1. If primitive: it must match exactly the pattern value2. If a complex object: it must match (recursively) the pattern value3. If an array: it must match (recursively) the pattern value.
     */
    patternCode?: code;
    /**
     * Contains extension information for property 'patternCode'.
     */
    _patternCode?: Element;
    /**
     * Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  When pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.When pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] array must (recursively) match at least one element from the instance array.When pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match -- i.e.,1. If primitive: it must match exactly the pattern value2. If a complex object: it must match (recursively) the pattern value3. If an array: it must match (recursively) the pattern value.
     */
    patternDate?: date;
    /**
     * Contains extension information for property 'patternDate'.
     */
    _patternDate?: Element;
    /**
     * Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  When pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.When pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] array must (recursively) match at least one element from the instance array.When pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match -- i.e.,1. If primitive: it must match exactly the pattern value2. If a complex object: it must match (recursively) the pattern value3. If an array: it must match (recursively) the pattern value.
     */
    patternDateTime?: dateTime;
    /**
     * Contains extension information for property 'patternDateTime'.
     */
    _patternDateTime?: Element;
    /**
     * Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  When pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.When pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] array must (recursively) match at least one element from the instance array.When pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match -- i.e.,1. If primitive: it must match exactly the pattern value2. If a complex object: it must match (recursively) the pattern value3. If an array: it must match (recursively) the pattern value.
     */
    patternDecimal?: decimal;
    /**
     * Contains extension information for property 'patternDecimal'.
     */
    _patternDecimal?: Element;
    /**
     * Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  When pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.When pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] array must (recursively) match at least one element from the instance array.When pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match -- i.e.,1. If primitive: it must match exactly the pattern value2. If a complex object: it must match (recursively) the pattern value3. If an array: it must match (recursively) the pattern value.
     */
    patternId?: id;
    /**
     * Contains extension information for property 'patternId'.
     */
    _patternId?: Element;
    /**
     * Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  When pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.When pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] array must (recursively) match at least one element from the instance array.When pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match -- i.e.,1. If primitive: it must match exactly the pattern value2. If a complex object: it must match (recursively) the pattern value3. If an array: it must match (recursively) the pattern value.
     */
    patternInstant?: instant;
    /**
     * Contains extension information for property 'patternInstant'.
     */
    _patternInstant?: Element;
    /**
     * Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  When pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.When pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] array must (recursively) match at least one element from the instance array.When pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match -- i.e.,1. If primitive: it must match exactly the pattern value2. If a complex object: it must match (recursively) the pattern value3. If an array: it must match (recursively) the pattern value.
     */
    patternInteger?: integer;
    /**
     * Contains extension information for property 'patternInteger'.
     */
    _patternInteger?: Element;
    /**
     * Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  When pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.When pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] array must (recursively) match at least one element from the instance array.When pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match -- i.e.,1. If primitive: it must match exactly the pattern value2. If a complex object: it must match (recursively) the pattern value3. If an array: it must match (recursively) the pattern value.
     */
    patternMarkdown?: markdown;
    /**
     * Contains extension information for property 'patternMarkdown'.
     */
    _patternMarkdown?: Element;
    /**
     * Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  When pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.When pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] array must (recursively) match at least one element from the instance array.When pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match -- i.e.,1. If primitive: it must match exactly the pattern value2. If a complex object: it must match (recursively) the pattern value3. If an array: it must match (recursively) the pattern value.
     */
    patternOid?: oid;
    /**
     * Contains extension information for property 'patternOid'.
     */
    _patternOid?: Element;
    /**
     * Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  When pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.When pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] array must (recursively) match at least one element from the instance array.When pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match -- i.e.,1. If primitive: it must match exactly the pattern value2. If a complex object: it must match (recursively) the pattern value3. If an array: it must match (recursively) the pattern value.
     */
    patternPositiveInt?: positiveInt;
    /**
     * Contains extension information for property 'patternPositiveInt'.
     */
    _patternPositiveInt?: Element;
    /**
     * Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  When pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.When pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] array must (recursively) match at least one element from the instance array.When pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match -- i.e.,1. If primitive: it must match exactly the pattern value2. If a complex object: it must match (recursively) the pattern value3. If an array: it must match (recursively) the pattern value.
     */
    patternString?: string;
    /**
     * Contains extension information for property 'patternString'.
     */
    _patternString?: Element;
    /**
     * Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  When pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.When pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] array must (recursively) match at least one element from the instance array.When pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match -- i.e.,1. If primitive: it must match exactly the pattern value2. If a complex object: it must match (recursively) the pattern value3. If an array: it must match (recursively) the pattern value.
     */
    patternTime?: time;
    /**
     * Contains extension information for property 'patternTime'.
     */
    _patternTime?: Element;
    /**
     * Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  When pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.When pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] array must (recursively) match at least one element from the instance array.When pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match -- i.e.,1. If primitive: it must match exactly the pattern value2. If a complex object: it must match (recursively) the pattern value3. If an array: it must match (recursively) the pattern value.
     */
    patternUnsignedInt?: unsignedInt;
    /**
     * Contains extension information for property 'patternUnsignedInt'.
     */
    _patternUnsignedInt?: Element;
    /**
     * Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  When pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.When pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] array must (recursively) match at least one element from the instance array.When pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match -- i.e.,1. If primitive: it must match exactly the pattern value2. If a complex object: it must match (recursively) the pattern value3. If an array: it must match (recursively) the pattern value.
     */
    patternUri?: uri;
    /**
     * Contains extension information for property 'patternUri'.
     */
    _patternUri?: Element;
    /**
     * Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  When pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.When pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] array must (recursively) match at least one element from the instance array.When pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match -- i.e.,1. If primitive: it must match exactly the pattern value2. If a complex object: it must match (recursively) the pattern value3. If an array: it must match (recursively) the pattern value.
     */
    patternUrl?: url;
    /**
     * Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  When pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.When pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] array must (recursively) match at least one element from the instance array.When pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match -- i.e.,1. If primitive: it must match exactly the pattern value2. If a complex object: it must match (recursively) the pattern value3. If an array: it must match (recursively) the pattern value.
     */
    patternUuid?: uuid;
    /**
     * Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  When pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.When pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] array must (recursively) match at least one element from the instance array.When pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match -- i.e.,1. If primitive: it must match exactly the pattern value2. If a complex object: it must match (recursively) the pattern value3. If an array: it must match (recursively) the pattern value.
     */
    patternAddress?: Address;
    /**
     * Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  When pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.When pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] array must (recursively) match at least one element from the instance array.When pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match -- i.e.,1. If primitive: it must match exactly the pattern value2. If a complex object: it must match (recursively) the pattern value3. If an array: it must match (recursively) the pattern value.
     */
    patternAge?: Age;
    /**
     * Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  When pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.When pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] array must (recursively) match at least one element from the instance array.When pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match -- i.e.,1. If primitive: it must match exactly the pattern value2. If a complex object: it must match (recursively) the pattern value3. If an array: it must match (recursively) the pattern value.
     */
    patternAnnotation?: Annotation;
    /**
     * Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  When pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.When pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] array must (recursively) match at least one element from the instance array.When pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match -- i.e.,1. If primitive: it must match exactly the pattern value2. If a complex object: it must match (recursively) the pattern value3. If an array: it must match (recursively) the pattern value.
     */
    patternAttachment?: Attachment;
    /**
     * Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  When pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.When pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] array must (recursively) match at least one element from the instance array.When pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match -- i.e.,1. If primitive: it must match exactly the pattern value2. If a complex object: it must match (recursively) the pattern value3. If an array: it must match (recursively) the pattern value.
     */
    patternCodeableConcept?: CodeableConcept;
    /**
     * Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  When pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.When pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] array must (recursively) match at least one element from the instance array.When pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match -- i.e.,1. If primitive: it must match exactly the pattern value2. If a complex object: it must match (recursively) the pattern value3. If an array: it must match (recursively) the pattern value.
     */
    patternCoding?: Coding;
    /**
     * Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  When pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.When pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] array must (recursively) match at least one element from the instance array.When pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match -- i.e.,1. If primitive: it must match exactly the pattern value2. If a complex object: it must match (recursively) the pattern value3. If an array: it must match (recursively) the pattern value.
     */
    patternContactPoint?: ContactPoint;
    /**
     * Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  When pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.When pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] array must (recursively) match at least one element from the instance array.When pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match -- i.e.,1. If primitive: it must match exactly the pattern value2. If a complex object: it must match (recursively) the pattern value3. If an array: it must match (recursively) the pattern value.
     */
    patternCount?: Count;
    /**
     * Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  When pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.When pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] array must (recursively) match at least one element from the instance array.When pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match -- i.e.,1. If primitive: it must match exactly the pattern value2. If a complex object: it must match (recursively) the pattern value3. If an array: it must match (recursively) the pattern value.
     */
    patternDistance?: Distance;
    /**
     * Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  When pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.When pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] array must (recursively) match at least one element from the instance array.When pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match -- i.e.,1. If primitive: it must match exactly the pattern value2. If a complex object: it must match (recursively) the pattern value3. If an array: it must match (recursively) the pattern value.
     */
    patternDuration?: Duration;
    /**
     * Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  When pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.When pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] array must (recursively) match at least one element from the instance array.When pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match -- i.e.,1. If primitive: it must match exactly the pattern value2. If a complex object: it must match (recursively) the pattern value3. If an array: it must match (recursively) the pattern value.
     */
    patternHumanName?: HumanName;
    /**
     * Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  When pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.When pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] array must (recursively) match at least one element from the instance array.When pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match -- i.e.,1. If primitive: it must match exactly the pattern value2. If a complex object: it must match (recursively) the pattern value3. If an array: it must match (recursively) the pattern value.
     */
    patternIdentifier?: Identifier;
    /**
     * Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  When pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.When pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] array must (recursively) match at least one element from the instance array.When pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match -- i.e.,1. If primitive: it must match exactly the pattern value2. If a complex object: it must match (recursively) the pattern value3. If an array: it must match (recursively) the pattern value.
     */
    patternMoney?: Money;
    /**
     * Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  When pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.When pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] array must (recursively) match at least one element from the instance array.When pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match -- i.e.,1. If primitive: it must match exactly the pattern value2. If a complex object: it must match (recursively) the pattern value3. If an array: it must match (recursively) the pattern value.
     */
    patternPeriod?: Period;
    /**
     * Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  When pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.When pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] array must (recursively) match at least one element from the instance array.When pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match -- i.e.,1. If primitive: it must match exactly the pattern value2. If a complex object: it must match (recursively) the pattern value3. If an array: it must match (recursively) the pattern value.
     */
    patternQuantity?: Quantity;
    /**
     * Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  When pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.When pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] array must (recursively) match at least one element from the instance array.When pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match -- i.e.,1. If primitive: it must match exactly the pattern value2. If a complex object: it must match (recursively) the pattern value3. If an array: it must match (recursively) the pattern value.
     */
    patternRange?: Range;
    /**
     * Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  When pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.When pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] array must (recursively) match at least one element from the instance array.When pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match -- i.e.,1. If primitive: it must match exactly the pattern value2. If a complex object: it must match (recursively) the pattern value3. If an array: it must match (recursively) the pattern value.
     */
    patternRatio?: Ratio;
    /**
     * Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  When pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.When pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] array must (recursively) match at least one element from the instance array.When pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match -- i.e.,1. If primitive: it must match exactly the pattern value2. If a complex object: it must match (recursively) the pattern value3. If an array: it must match (recursively) the pattern value.
     */
    patternReference?: Reference;
    /**
     * Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  When pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.When pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] array must (recursively) match at least one element from the instance array.When pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match -- i.e.,1. If primitive: it must match exactly the pattern value2. If a complex object: it must match (recursively) the pattern value3. If an array: it must match (recursively) the pattern value.
     */
    patternSampledData?: SampledData;
    /**
     * Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  When pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.When pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] array must (recursively) match at least one element from the instance array.When pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match -- i.e.,1. If primitive: it must match exactly the pattern value2. If a complex object: it must match (recursively) the pattern value3. If an array: it must match (recursively) the pattern value.
     */
    patternSignature?: Signature;
    /**
     * Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  When pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.When pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] array must (recursively) match at least one element from the instance array.When pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match -- i.e.,1. If primitive: it must match exactly the pattern value2. If a complex object: it must match (recursively) the pattern value3. If an array: it must match (recursively) the pattern value.
     */
    patternTiming?: Timing;
    /**
     * Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  When pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.When pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] array must (recursively) match at least one element from the instance array.When pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match -- i.e.,1. If primitive: it must match exactly the pattern value2. If a complex object: it must match (recursively) the pattern value3. If an array: it must match (recursively) the pattern value.
     */
    patternContactDetail?: ContactDetail;
    /**
     * Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  When pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.When pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] array must (recursively) match at least one element from the instance array.When pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match -- i.e.,1. If primitive: it must match exactly the pattern value2. If a complex object: it must match (recursively) the pattern value3. If an array: it must match (recursively) the pattern value.
     */
    patternContributor?: Contributor;
    /**
     * Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  When pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.When pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] array must (recursively) match at least one element from the instance array.When pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match -- i.e.,1. If primitive: it must match exactly the pattern value2. If a complex object: it must match (recursively) the pattern value3. If an array: it must match (recursively) the pattern value.
     */
    patternDataRequirement?: DataRequirement;
    /**
     * Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  When pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.When pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] array must (recursively) match at least one element from the instance array.When pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match -- i.e.,1. If primitive: it must match exactly the pattern value2. If a complex object: it must match (recursively) the pattern value3. If an array: it must match (recursively) the pattern value.
     */
    patternExpression?: Expression;
    /**
     * Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  When pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.When pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] array must (recursively) match at least one element from the instance array.When pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match -- i.e.,1. If primitive: it must match exactly the pattern value2. If a complex object: it must match (recursively) the pattern value3. If an array: it must match (recursively) the pattern value.
     */
    patternParameterDefinition?: ParameterDefinition;
    /**
     * Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  When pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.When pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] array must (recursively) match at least one element from the instance array.When pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match -- i.e.,1. If primitive: it must match exactly the pattern value2. If a complex object: it must match (recursively) the pattern value3. If an array: it must match (recursively) the pattern value.
     */
    patternRelatedArtifact?: RelatedArtifact;
    /**
     * Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  When pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.When pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] array must (recursively) match at least one element from the instance array.When pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match -- i.e.,1. If primitive: it must match exactly the pattern value2. If a complex object: it must match (recursively) the pattern value3. If an array: it must match (recursively) the pattern value.
     */
    patternTriggerDefinition?: TriggerDefinition;
    /**
     * Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  When pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.When pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] array must (recursively) match at least one element from the instance array.When pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match -- i.e.,1. If primitive: it must match exactly the pattern value2. If a complex object: it must match (recursively) the pattern value3. If an array: it must match (recursively) the pattern value.
     */
    patternUsageContext?: UsageContext;
    /**
     * Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  When pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.When pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] array must (recursively) match at least one element from the instance array.When pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match -- i.e.,1. If primitive: it must match exactly the pattern value2. If a complex object: it must match (recursively) the pattern value3. If an array: it must match (recursively) the pattern value.
     */
    patternDosage?: Dosage;
    /**
     * A sample value for this element demonstrating the type of information that would typically be found in the element.
     */
    example?: Element[];
    /**
     * The minimum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity.
     */
    minvalueDate?: date;
    /**
     * Contains extension information for property 'minvalueDate'.
     */
    _minvalueDate?: Element;
    /**
     * The minimum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity.
     */
    minvalueDateTime?: dateTime;
    /**
     * Contains extension information for property 'minvalueDateTime'.
     */
    _minvalueDateTime?: Element;
    /**
     * The minimum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity.
     */
    minvalueInstant?: instant;
    /**
     * Contains extension information for property 'minvalueInstant'.
     */
    _minvalueInstant?: Element;
    /**
     * The minimum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity.
     */
    minvalueTime?: time;
    /**
     * Contains extension information for property 'minvalueTime'.
     */
    _minvalueTime?: Element;
    /**
     * The minimum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity.
     */
    minvalueDecimal?: decimal;
    /**
     * Contains extension information for property 'minvalueDecimal'.
     */
    _minvalueDecimal?: Element;
    /**
     * The minimum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity.
     */
    minvalueInteger?: integer;
    /**
     * Contains extension information for property 'minvalueInteger'.
     */
    _minvalueInteger?: Element;
    /**
     * The minimum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity.
     */
    minvaluePositiveInt?: positiveInt;
    /**
     * Contains extension information for property 'minvaluePositiveInt'.
     */
    _minvaluePositiveInt?: Element;
    /**
     * The minimum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity.
     */
    minvalueUnsignedInt?: unsignedInt;
    /**
     * Contains extension information for property 'minvalueUnsignedInt'.
     */
    _minvalueUnsignedInt?: Element;
    /**
     * The minimum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity.
     */
    minvalueQuantity?: Quantity;
    /**
     * The maximum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity.
     */
    maxvalueDate?: date;
    /**
     * Contains extension information for property 'maxvalueDate'.
     */
    _maxvalueDate?: Element;
    /**
     * The maximum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity.
     */
    maxvalueDateTime?: dateTime;
    /**
     * Contains extension information for property 'maxvalueDateTime'.
     */
    _maxvalueDateTime?: Element;
    /**
     * The maximum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity.
     */
    maxvalueInstant?: instant;
    /**
     * Contains extension information for property 'maxvalueInstant'.
     */
    _maxvalueInstant?: Element;
    /**
     * The maximum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity.
     */
    maxvalueTime?: time;
    /**
     * Contains extension information for property 'maxvalueTime'.
     */
    _maxvalueTime?: Element;
    /**
     * The maximum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity.
     */
    maxvalueDecimal?: decimal;
    /**
     * Contains extension information for property 'maxvalueDecimal'.
     */
    _maxvalueDecimal?: Element;
    /**
     * The maximum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity.
     */
    maxvalueInteger?: integer;
    /**
     * Contains extension information for property 'maxvalueInteger'.
     */
    _maxvalueInteger?: Element;
    /**
     * The maximum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity.
     */
    maxvaluePositiveInt?: positiveInt;
    /**
     * Contains extension information for property 'maxvaluePositiveInt'.
     */
    _maxvaluePositiveInt?: Element;
    /**
     * The maximum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity.
     */
    maxvalueUnsignedInt?: unsignedInt;
    /**
     * Contains extension information for property 'maxvalueUnsignedInt'.
     */
    _maxvalueUnsignedInt?: Element;
    /**
     * The maximum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity.
     */
    maxvalueQuantity?: Quantity;
    /**
     * Indicates the maximum length in characters that is permitted to be present in conformant instances and which is expected to be supported by conformant consumers that support the element.
     */
    maxLength?: integer;
    /**
     * Contains extension information for property 'maxLength'.
     */
    _maxLength?: Element;
    /**
     * A reference to an invariant that may make additional statements about the cardinality or value in the instance.
     */
    condition?: id[];
    /**
     * Contains extension information for property 'condition'.
     */
    _condition?: Element[];
    /**
     * Formal constraints such as co-occurrence and other constraints that can be computationally evaluated within the context of the instance.
     */
    constraint?: Element[];
    /**
     * If true, implementations that produce or consume resources SHALL provide "support" for the element in some meaningful way.  If false, the element may be ignored and not supported. If false, whether to populate or use the data element in any way is at the discretion of the implementation.
     */
    mustSupport?: boolean;
    /**
     * Contains extension information for property 'mustSupport'.
     */
    _mustSupport?: Element;
    /**
     * If true, the value of this element affects the interpretation of the element or resource that contains it, and the value of the element cannot be ignored. Typically, this is used for status, negation and qualification codes. The effect of this is that the element cannot be ignored by systems: they SHALL either recognize the element and process it, and/or a pre-determination has been made that it is not relevant to their particular system.
     */
    isModifier?: boolean;
    /**
     * Contains extension information for property 'isModifier'.
     */
    _isModifier?: Element;
    /**
     * Explains how that element affects the interpretation of the resource or element that contains it.
     */
    isModifierReason?: string;
    /**
     * Contains extension information for property 'isModifierReason'.
     */
    _isModifierReason?: Element;
    /**
     * Whether the element should be included if a client requests a search with the parameter _summary=true.
     */
    isSummary?: boolean;
    /**
     * Contains extension information for property 'isSummary'.
     */
    _isSummary?: Element;
    /**
     * Binds to a value set if this element is coded (code, Coding, CodeableConcept, Quantity), or the data types (string, uri).
     */
    binding?: Element;
    /**
     * Identifies a concept from an external specification that roughly corresponds to this element.
     */
    mapping?: Element[];
}
export interface ElementDefinitionSlicing {
    /**
     * Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
     */
    id?: string;
    /**
     * Contains extension information for property 'id'.
     */
    _id?: Element;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * Designates which child elements are used to discriminate between the slices when processing an instance. If one or more discriminators are provided, the value of the child elements in the instance data SHALL completely distinguish which slice the element in the resource matches based on the allowed values for those elements in each of the slices.
     */
    discriminator?: Element[];
    /**
     * A human-readable text description of how the slicing works. If there is no discriminator, this is required to be present to provide whatever information is possible about how the slices can be differentiated.
     */
    description?: string;
    /**
     * Contains extension information for property 'description'.
     */
    _description?: Element;
    /**
     * If the matching elements have to occur in the same order as defined in the profile.
     */
    ordered?: boolean;
    /**
     * Contains extension information for property 'ordered'.
     */
    _ordered?: Element;
    /**
     * Whether additional slices are allowed or not. When the slices are ordered, profile authors can also say that additional slices are only allowed at the end.
     */
    rules: code;
    /**
     * Contains extension information for property 'rules'.
     */
    _rules?: Element;
}
export interface ElementDefinitionSlicingDiscriminator {
    /**
     * Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
     */
    id?: string;
    /**
     * Contains extension information for property 'id'.
     */
    _id?: Element;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * How the element value is interpreted when discrimination is evaluated.
     */
    type: code;
    /**
     * Contains extension information for property 'type'.
     */
    _type?: Element;
    /**
     * A FHIRPath expression, using [the simple subset of FHIRPath](fhirpath.html#simple), that is used to identify the element on which discrimination is based.
     */
    path: string;
    /**
     * Contains extension information for property 'path'.
     */
    _path?: Element;
}
export interface ElementDefinitionBase {
    /**
     * Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
     */
    id?: string;
    /**
     * Contains extension information for property 'id'.
     */
    _id?: Element;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * The Path that identifies the base element - this matches the ElementDefinition.path for that element. Across FHIR, there is only one base definition of any element - that is, an element definition on a [StructureDefinition](structuredefinition.html#) without a StructureDefinition.base.
     */
    path: string;
    /**
     * Contains extension information for property 'path'.
     */
    _path?: Element;
    /**
     * Minimum cardinality of the base element identified by the path.
     */
    min: unsignedInt;
    /**
     * Contains extension information for property 'min'.
     */
    _min?: Element;
    /**
     * Maximum cardinality of the base element identified by the path.
     */
    max: string;
    /**
     * Contains extension information for property 'max'.
     */
    _max?: Element;
}
export interface ElementDefinitionType {
    /**
     * Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
     */
    id?: string;
    /**
     * Contains extension information for property 'id'.
     */
    _id?: Element;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * URL of Data type or Resource that is a(or the) type used for this element. References are URLs that are relative to http://hl7.org/fhir/StructureDefinition e.g. "string" is a reference to http://hl7.org/fhir/StructureDefinition/string. Absolute URLs are only allowed in logical models.
     */
    code: uri;
    /**
     * Contains extension information for property 'code'.
     */
    _code?: Element;
    /**
     * Identifies a profile structure or implementation Guide that applies to the datatype this element refers to. If any profiles are specified, then the content must conform to at least one of them. The URL can be a local reference - to a contained StructureDefinition, or a reference to another StructureDefinition or Implementation Guide by a canonical URL. When an implementation guide is specified, the type SHALL conform to at least one profile defined in the implementation guide.
     */
    profile?: canonical[];
    /**
     * Used when the type is "Reference" or "canonical", and identifies a profile structure or implementation Guide that applies to the target of the reference this element refers to. If any profiles are specified, then the content must conform to at least one of them. The URL can be a local reference - to a contained StructureDefinition, or a reference to another StructureDefinition or Implementation Guide by a canonical URL. When an implementation guide is specified, the target resource SHALL conform to at least one profile defined in the implementation guide.
     */
    targetProfile?: canonical[];
    /**
     * If the type is a reference to another resource, how the resource is or can be aggregated - is it a contained resource, or a reference, and if the context is a bundle, is it included in the bundle.
     */
    aggregation?: code[];
    /**
     * Contains extension information for property 'aggregation'.
     */
    _aggregation?: Element[];
    /**
     * Whether this reference needs to be version specific or version independent, or whether either can be used.
     */
    versioning?: code;
    /**
     * Contains extension information for property 'versioning'.
     */
    _versioning?: Element;
}
export interface ElementDefinitionExample {
    /**
     * Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
     */
    id?: string;
    /**
     * Contains extension information for property 'id'.
     */
    _id?: Element;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * Describes the purpose of this example amoung the set of examples.
     */
    label: string;
    /**
     * Contains extension information for property 'label'.
     */
    _label?: Element;
    /**
     * The actual value for the element, which must be one of the types allowed for this element.
     */
    valueBase64Binary: base64Binary;
    /**
     * Contains extension information for property 'valueBase64Binary'.
     */
    _valueBase64Binary?: Element;
    /**
     * The actual value for the element, which must be one of the types allowed for this element.
     */
    valueBoolean: boolean;
    /**
     * Contains extension information for property 'valueBoolean'.
     */
    _valueBoolean?: Element;
    /**
     * The actual value for the element, which must be one of the types allowed for this element.
     */
    valueCanonical: canonical;
    /**
     * The actual value for the element, which must be one of the types allowed for this element.
     */
    valueCode: code;
    /**
     * Contains extension information for property 'valueCode'.
     */
    _valueCode?: Element;
    /**
     * The actual value for the element, which must be one of the types allowed for this element.
     */
    valueDate: date;
    /**
     * Contains extension information for property 'valueDate'.
     */
    _valueDate?: Element;
    /**
     * The actual value for the element, which must be one of the types allowed for this element.
     */
    valueDateTime: dateTime;
    /**
     * Contains extension information for property 'valueDateTime'.
     */
    _valueDateTime?: Element;
    /**
     * The actual value for the element, which must be one of the types allowed for this element.
     */
    valueDecimal: decimal;
    /**
     * Contains extension information for property 'valueDecimal'.
     */
    _valueDecimal?: Element;
    /**
     * The actual value for the element, which must be one of the types allowed for this element.
     */
    valueId: id;
    /**
     * Contains extension information for property 'valueId'.
     */
    _valueId?: Element;
    /**
     * The actual value for the element, which must be one of the types allowed for this element.
     */
    valueInstant: instant;
    /**
     * Contains extension information for property 'valueInstant'.
     */
    _valueInstant?: Element;
    /**
     * The actual value for the element, which must be one of the types allowed for this element.
     */
    valueInteger: integer;
    /**
     * Contains extension information for property 'valueInteger'.
     */
    _valueInteger?: Element;
    /**
     * The actual value for the element, which must be one of the types allowed for this element.
     */
    valueMarkdown: markdown;
    /**
     * Contains extension information for property 'valueMarkdown'.
     */
    _valueMarkdown?: Element;
    /**
     * The actual value for the element, which must be one of the types allowed for this element.
     */
    valueOid: oid;
    /**
     * Contains extension information for property 'valueOid'.
     */
    _valueOid?: Element;
    /**
     * The actual value for the element, which must be one of the types allowed for this element.
     */
    valuePositiveInt: positiveInt;
    /**
     * Contains extension information for property 'valuePositiveInt'.
     */
    _valuePositiveInt?: Element;
    /**
     * The actual value for the element, which must be one of the types allowed for this element.
     */
    valueString: string;
    /**
     * Contains extension information for property 'valueString'.
     */
    _valueString?: Element;
    /**
     * The actual value for the element, which must be one of the types allowed for this element.
     */
    valueTime: time;
    /**
     * Contains extension information for property 'valueTime'.
     */
    _valueTime?: Element;
    /**
     * The actual value for the element, which must be one of the types allowed for this element.
     */
    valueUnsignedInt: unsignedInt;
    /**
     * Contains extension information for property 'valueUnsignedInt'.
     */
    _valueUnsignedInt?: Element;
    /**
     * The actual value for the element, which must be one of the types allowed for this element.
     */
    valueUri: uri;
    /**
     * Contains extension information for property 'valueUri'.
     */
    _valueUri?: Element;
    /**
     * The actual value for the element, which must be one of the types allowed for this element.
     */
    valueUrl: url;
    /**
     * The actual value for the element, which must be one of the types allowed for this element.
     */
    valueUuid: uuid;
    /**
     * The actual value for the element, which must be one of the types allowed for this element.
     */
    valueAddress: Address;
    /**
     * The actual value for the element, which must be one of the types allowed for this element.
     */
    valueAge: Age;
    /**
     * The actual value for the element, which must be one of the types allowed for this element.
     */
    valueAnnotation: Annotation;
    /**
     * The actual value for the element, which must be one of the types allowed for this element.
     */
    valueAttachment: Attachment;
    /**
     * The actual value for the element, which must be one of the types allowed for this element.
     */
    valueCodeableConcept: CodeableConcept;
    /**
     * The actual value for the element, which must be one of the types allowed for this element.
     */
    valueCoding: Coding;
    /**
     * The actual value for the element, which must be one of the types allowed for this element.
     */
    valueContactPoint: ContactPoint;
    /**
     * The actual value for the element, which must be one of the types allowed for this element.
     */
    valueCount: Count;
    /**
     * The actual value for the element, which must be one of the types allowed for this element.
     */
    valueDistance: Distance;
    /**
     * The actual value for the element, which must be one of the types allowed for this element.
     */
    valueDuration: Duration;
    /**
     * The actual value for the element, which must be one of the types allowed for this element.
     */
    valueHumanName: HumanName;
    /**
     * The actual value for the element, which must be one of the types allowed for this element.
     */
    valueIdentifier: Identifier;
    /**
     * The actual value for the element, which must be one of the types allowed for this element.
     */
    valueMoney: Money;
    /**
     * The actual value for the element, which must be one of the types allowed for this element.
     */
    valuePeriod: Period;
    /**
     * The actual value for the element, which must be one of the types allowed for this element.
     */
    valueQuantity: Quantity;
    /**
     * The actual value for the element, which must be one of the types allowed for this element.
     */
    valueRange: Range;
    /**
     * The actual value for the element, which must be one of the types allowed for this element.
     */
    valueRatio: Ratio;
    /**
     * The actual value for the element, which must be one of the types allowed for this element.
     */
    valueReference: Reference;
    /**
     * The actual value for the element, which must be one of the types allowed for this element.
     */
    valueSampledData: SampledData;
    /**
     * The actual value for the element, which must be one of the types allowed for this element.
     */
    valueSignature: Signature;
    /**
     * The actual value for the element, which must be one of the types allowed for this element.
     */
    valueTiming: Timing;
    /**
     * The actual value for the element, which must be one of the types allowed for this element.
     */
    valueContactDetail: ContactDetail;
    /**
     * The actual value for the element, which must be one of the types allowed for this element.
     */
    valueContributor: Contributor;
    /**
     * The actual value for the element, which must be one of the types allowed for this element.
     */
    valueDataRequirement: DataRequirement;
    /**
     * The actual value for the element, which must be one of the types allowed for this element.
     */
    valueExpression: Expression;
    /**
     * The actual value for the element, which must be one of the types allowed for this element.
     */
    valueParameterDefinition: ParameterDefinition;
    /**
     * The actual value for the element, which must be one of the types allowed for this element.
     */
    valueRelatedArtifact: RelatedArtifact;
    /**
     * The actual value for the element, which must be one of the types allowed for this element.
     */
    valueTriggerDefinition: TriggerDefinition;
    /**
     * The actual value for the element, which must be one of the types allowed for this element.
     */
    valueUsageContext: UsageContext;
    /**
     * The actual value for the element, which must be one of the types allowed for this element.
     */
    valueDosage: Dosage;
}
export interface ElementDefinitionConstraint {
    /**
     * Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
     */
    id?: string;
    /**
     * Contains extension information for property 'id'.
     */
    _id?: Element;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * Allows identification of which elements have their cardinalities impacted by the constraint.  Will not be referenced for constraints that do not affect cardinality.
     */
    key: id;
    /**
     * Contains extension information for property 'key'.
     */
    _key?: Element;
    /**
     * Description of why this constraint is necessary or appropriate.
     */
    requirements?: string;
    /**
     * Contains extension information for property 'requirements'.
     */
    _requirements?: Element;
    /**
     * Identifies the impact constraint violation has on the conformance of the instance.
     */
    severity: code;
    /**
     * Contains extension information for property 'severity'.
     */
    _severity?: Element;
    /**
     * Text that can be used to describe the constraint in messages identifying that the constraint has been violated.
     */
    human: string;
    /**
     * Contains extension information for property 'human'.
     */
    _human?: Element;
    /**
     * A [FHIRPath](fhirpath.html) expression of constraint that can be executed to see if this constraint is met.
     */
    expression?: string;
    /**
     * Contains extension information for property 'expression'.
     */
    _expression?: Element;
    /**
     * An XPath expression of constraint that can be executed to see if this constraint is met.
     */
    xpath?: string;
    /**
     * Contains extension information for property 'xpath'.
     */
    _xpath?: Element;
    /**
     * A reference to the original source of the constraint, for traceability purposes.
     */
    source?: canonical;
}
export interface ElementDefinitionBinding {
    /**
     * Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
     */
    id?: string;
    /**
     * Contains extension information for property 'id'.
     */
    _id?: Element;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * Indicates the degree of conformance expectations associated with this binding - that is, the degree to which the provided value set must be adhered to in the instances.
     */
    strength: code;
    /**
     * Contains extension information for property 'strength'.
     */
    _strength?: Element;
    /**
     * Describes the intended use of this particular set of codes.
     */
    description?: string;
    /**
     * Contains extension information for property 'description'.
     */
    _description?: Element;
    /**
     * Refers to the value set that identifies the set of codes the binding refers to.
     */
    valueSet?: canonical;
}
export interface ElementDefinitionMapping {
    /**
     * Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
     */
    id?: string;
    /**
     * Contains extension information for property 'id'.
     */
    _id?: Element;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * An internal reference to the definition of a mapping.
     */
    identity: id;
    /**
     * Contains extension information for property 'identity'.
     */
    _identity?: Element;
    /**
     * Identifies the computable language in which mapping.map is expressed.
     */
    language?: code;
    /**
     * Contains extension information for property 'language'.
     */
    _language?: Element;
    /**
     * Expresses what part of the target specification corresponds to this element.
     */
    map: string;
    /**
     * Contains extension information for property 'map'.
     */
    _map?: Element;
    /**
     * Comments that provide information about the mapping or its use.
     */
    comment?: string;
    /**
     * Contains extension information for property 'comment'.
     */
    _comment?: Element;
}
/**
 * An interaction between a patient and healthcare provider(s) for the purpose of providing healthcare service(s) or assessing the health status of a patient.
 */
export interface Encounter {
    /**
     * The type of the resource.
     */
    resourceType: string;
    /**
     * The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes.
     */
    id?: id;
    /**
     * Contains extension information for property 'id'.
     */
    _id?: Element;
    /**
     * The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource.
     */
    meta?: Meta;
    /**
     * A reference to a set of rules that were followed when the resource was constructed, and which must be understood when processing the content. Often, this is a reference to an implementation guide that defines the special rules along with other profiles etc.
     */
    implicitRules?: uri;
    /**
     * Contains extension information for property 'implicitRules'.
     */
    _implicitRules?: Element;
    /**
     * The base language in which the resource is written.
     */
    language?: code;
    /**
     * Contains extension information for property 'language'.
     */
    _language?: Element;
    /**
     * A human-readable narrative that contains a summary of the resource and can be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it "clinically safe" for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety.
     */
    text?: Narrative;
    /**
     * These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, and nor can they have their own independent transaction scope.
     */
    contained?: Resource[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * Identifier(s) by which this encounter is known.
     */
    identifier?: Identifier[];
    /**
     * planned | arrived | triaged | in-progress | onleave | finished | cancelled +.
     */
    status: code;
    /**
     * Contains extension information for property 'status'.
     */
    _status?: Element;
    /**
     * The status history permits the encounter resource to contain the status history without needing to read through the historical versions of the resource, or even have the server store them.
     */
    statusHistory?: EncounterStatusHistory[];
    /**
     * Concepts representing classification of patient encounter such as ambulatory (outpatient), inpatient, emergency, home health or others due to local variations.
     */
    class: Coding;
    /**
     * The class history permits the tracking of the encounters transitions without needing to go  through the resource history.  This would be used for a case where an admission starts of as an emergency encounter, then transitions into an inpatient scenario. Doing this and not restarting a new encounter ensures that any lab/diagnostic results can more easily follow the patient and not require re-processing and not get lost or cancelled during a kind of discharge from emergency to inpatient.
     */
    classHistory?: EncounterClassHistory[];
    /**
     * Specific type of encounter (e.g. e-mail consultation, surgical day-care, skilled nursing, rehabilitation).
     */
    type?: CodeableConcept[];
    /**
     * Broad categorization of the service that is to be provided (e.g. cardiology).
     */
    serviceType?: CodeableConcept;
    /**
     * Indicates the urgency of the encounter.
     */
    priority?: CodeableConcept;
    /**
     * The patient or group present at the encounter.
     */
    subject?: Reference;
    /**
     * Where a specific encounter should be classified as a part of a specific episode(s) of care this field should be used. This association can facilitate grouping of related encounters together for a specific purpose, such as government reporting, issue tracking, association via a common problem.  The association is recorded on the encounter as these are typically created after the episode of care and grouped on entry rather than editing the episode of care to append another encounter to it (the episode of care could span years).
     */
    episodeOfCare?: Reference[];
    /**
     * The request this encounter satisfies (e.g. incoming referral or procedure request).
     */
    basedOn?: Reference[];
    /**
     * The list of people responsible for providing the service.
     */
    participant?: EncounterParticipant[];
    /**
     * The appointment that scheduled this encounter.
     */
    appointment?: Reference[];
    /**
     * The start and end time of the encounter.
     */
    period?: Period;
    /**
     * Quantity of time the encounter lasted. This excludes the time during leaves of absence.
     */
    length?: Duration;
    /**
     * Reason the encounter takes place, expressed as a code. For admissions, this can be used for a coded admission diagnosis.
     */
    reasonCode?: CodeableConcept[];
    /**
     * Reason the encounter takes place, expressed as a code. For admissions, this can be used for a coded admission diagnosis.
     */
    reasonReference?: Reference[];
    /**
     * The list of diagnosis relevant to this encounter.
     */
    diagnosis?: EncounterDiagnosis[];
    /**
     * The set of accounts that may be used for billing for this Encounter.
     */
    account?: Reference[];
    /**
     * Details about the admission to a healthcare service.
     */
    hospitalization?: EncounterHospitalization;
    /**
     * List of locations where  the patient has been during this encounter.
     */
    location?: EncounterLocation[];
    /**
     * The organization that is primarily responsible for this Encounter's services. This MAY be the same as the organization on the Patient record, however it could be different, such as if the actor performing the services was from an external organization (which may be billed seperately) for an external consultation.  Refer to the example bundle showing an abbreviated set of Encounters for a colonoscopy.
     */
    serviceProvider?: Reference;
    /**
     * Another Encounter of which this encounter is a part of (administratively or in time).
     */
    partOf?: Reference;
}
/**
 * The status history permits the encounter resource to contain the status history without needing to read through the historical versions of the resource, or even have the server store them.
 */
export interface EncounterStatusHistory {
    /**
     * Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
     */
    id?: string;
    /**
     * Contains extension information for property 'id'.
     */
    _id?: Element;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * planned | arrived | triaged | in-progress | onleave | finished | cancelled +.
     */
    status: code;
    /**
     * Contains extension information for property 'status'.
     */
    _status?: Element;
    /**
     * The time that the episode was in the specified status.
     */
    period: Period;
}
/**
 * The class history permits the tracking of the encounters transitions without needing to go  through the resource history.  This would be used for a case where an admission starts of as an emergency encounter, then transitions into an inpatient scenario. Doing this and not restarting a new encounter ensures that any lab/diagnostic results can more easily follow the patient and not require re-processing and not get lost or cancelled during a kind of discharge from emergency to inpatient.
 */
export interface EncounterClassHistory {
    /**
     * Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
     */
    id?: string;
    /**
     * Contains extension information for property 'id'.
     */
    _id?: Element;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * inpatient | outpatient | ambulatory | emergency +.
     */
    class: Coding;
    /**
     * The time that the episode was in the specified class.
     */
    period: Period;
}
/**
 * The list of people responsible for providing the service.
 */
export interface EncounterParticipant {
    /**
     * Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
     */
    id?: string;
    /**
     * Contains extension information for property 'id'.
     */
    _id?: Element;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * Role of participant in encounter.
     */
    type?: CodeableConcept[];
    /**
     * The period of time that the specified participant participated in the encounter. These can overlap or be sub-sets of the overall encounter's period.
     */
    period?: Period;
    /**
     * Persons involved in the encounter other than the patient.
     */
    individual?: Reference;
}
/**
 * The list of diagnosis relevant to this encounter.
 */
export interface EncounterDiagnosis {
    /**
     * Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
     */
    id?: string;
    /**
     * Contains extension information for property 'id'.
     */
    _id?: Element;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * Reason the encounter takes place, as specified using information from another resource. For admissions, this is the admission diagnosis. The indication will typically be a Condition (with other resources referenced in the evidence.detail), or a Procedure.
     */
    condition: Reference;
    /**
     * Role that this diagnosis has within the encounter (e.g. admission, billing, discharge …).
     */
    use?: CodeableConcept;
    /**
     * Ranking of the diagnosis (for each role type).
     */
    rank?: positiveInt;
    /**
     * Contains extension information for property 'rank'.
     */
    _rank?: Element;
}
/**
 * Details about the admission to a healthcare service.
 */
export interface EncounterHospitalization {
    /**
     * Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
     */
    id?: string;
    /**
     * Contains extension information for property 'id'.
     */
    _id?: Element;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * Pre-admission identifier.
     */
    preAdmissionIdentifier?: Identifier;
    /**
     * The location/organization from which the patient came before admission.
     */
    origin?: Reference;
    /**
     * From where patient was admitted (physician referral, transfer).
     */
    admitSource?: CodeableConcept;
    /**
     * Whether this hospitalization is a readmission and why if known.
     */
    reAdmission?: CodeableConcept;
    /**
     * Diet preferences reported by the patient.
     */
    dietPreference?: CodeableConcept[];
    /**
     * Special courtesies (VIP, board member).
     */
    specialCourtesy?: CodeableConcept[];
    /**
     * Any special requests that have been made for this hospitalization encounter, such as the provision of specific equipment or other things.
     */
    specialArrangement?: CodeableConcept[];
    /**
     * Location/organization to which the patient is discharged.
     */
    destination?: Reference;
    /**
     * Category or kind of location after discharge.
     */
    dischargeDisposition?: CodeableConcept;
}
/**
 * List of locations where  the patient has been during this encounter.
 */
export interface EncounterLocation {
    /**
     * Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
     */
    id?: string;
    /**
     * Contains extension information for property 'id'.
     */
    _id?: Element;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * The location where the encounter takes place.
     */
    location: Reference;
    /**
     * The status of the participants' presence at the specified location during the period specified. If the participant is no longer at the location, then the period will have an end date/time.
     */
    status?: code;
    /**
     * Contains extension information for property 'status'.
     */
    _status?: Element;
    /**
     * This will be used to specify the required levels (bed/ward/room/etc.) desired to be recorded to simplify either messaging or query.
     */
    physicalType?: CodeableConcept;
    /**
     * Time period during which the patient was present at the location.
     */
    period?: Period;
}
/**
 * The technical details of an endpoint that can be used for electronic services, such as for web services providing XDS.b or a REST endpoint for another FHIR server. This may include any security context information.
 */
export interface Endpoint {
    /**
     * The type of the resource.
     */
    resourceType: string;
    /**
     * The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes.
     */
    id?: id;
    /**
     * Contains extension information for property 'id'.
     */
    _id?: Element;
    /**
     * The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource.
     */
    meta?: Meta;
    /**
     * A reference to a set of rules that were followed when the resource was constructed, and which must be understood when processing the content. Often, this is a reference to an implementation guide that defines the special rules along with other profiles etc.
     */
    implicitRules?: uri;
    /**
     * Contains extension information for property 'implicitRules'.
     */
    _implicitRules?: Element;
    /**
     * The base language in which the resource is written.
     */
    language?: code;
    /**
     * Contains extension information for property 'language'.
     */
    _language?: Element;
    /**
     * A human-readable narrative that contains a summary of the resource and can be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it "clinically safe" for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety.
     */
    text?: Narrative;
    /**
     * These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, and nor can they have their own independent transaction scope.
     */
    contained?: Resource[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * Identifier for the organization that is used to identify the endpoint across multiple disparate systems.
     */
    identifier?: Identifier[];
    /**
     * active | suspended | error | off | test.
     */
    status: code;
    /**
     * Contains extension information for property 'status'.
     */
    _status?: Element;
    /**
     * A coded value that represents the technical details of the usage of this endpoint, such as what WSDLs should be used in what way. (e.g. XDS.b/DICOM/cds-hook).
     */
    connectionType: Coding;
    /**
     * A friendly name that this endpoint can be referred to with.
     */
    name?: string;
    /**
     * Contains extension information for property 'name'.
     */
    _name?: Element;
    /**
     * The organization that manages this endpoint (even if technically another organization is hosting this in the cloud, it is the organization associated with the data).
     */
    managingOrganization?: Reference;
    /**
     * Contact details for a human to contact about the subscription. The primary use of this for system administrator troubleshooting.
     */
    contact?: ContactPoint[];
    /**
     * The interval during which the endpoint is expected to be operational.
     */
    period?: Period;
    /**
     * The payload type describes the acceptable content that can be communicated on the endpoint.
     */
    payloadType: CodeableConcept[];
    /**
     * The mime type to send the payload in - e.g. application/fhir+xml, application/fhir+json. If the mime type is not specified, then the sender could send any content (including no content depending on the connectionType).
     */
    payloadMimeType?: code[];
    /**
     * Contains extension information for property 'payloadMimeType'.
     */
    _payloadMimeType?: Element[];
    /**
     * The uri that describes the actual end-point to connect to.
     */
    address: url;
    /**
     * Additional headers / information to send as part of the notification.
     */
    header?: string[];
    /**
     * Contains extension information for property 'header'.
     */
    _header?: Element[];
}
/**
 * This resource provides the insurance enrollment details to the insurer regarding a specified coverage.
 */
export interface EnrollmentRequest {
    /**
     * The type of the resource.
     */
    resourceType: string;
    /**
     * The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes.
     */
    id?: id;
    /**
     * Contains extension information for property 'id'.
     */
    _id?: Element;
    /**
     * The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource.
     */
    meta?: Meta;
    /**
     * A reference to a set of rules that were followed when the resource was constructed, and which must be understood when processing the content. Often, this is a reference to an implementation guide that defines the special rules along with other profiles etc.
     */
    implicitRules?: uri;
    /**
     * Contains extension information for property 'implicitRules'.
     */
    _implicitRules?: Element;
    /**
     * The base language in which the resource is written.
     */
    language?: code;
    /**
     * Contains extension information for property 'language'.
     */
    _language?: Element;
    /**
     * A human-readable narrative that contains a summary of the resource and can be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it "clinically safe" for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety.
     */
    text?: Narrative;
    /**
     * These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, and nor can they have their own independent transaction scope.
     */
    contained?: Resource[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * The Response business identifier.
     */
    identifier?: Identifier[];
    /**
     * The status of the resource instance.
     */
    status?: code;
    /**
     * Contains extension information for property 'status'.
     */
    _status?: Element;
    /**
     * The date when this resource was created.
     */
    created?: dateTime;
    /**
     * Contains extension information for property 'created'.
     */
    _created?: Element;
    /**
     * The Insurer who is target  of the request.
     */
    insurer?: Reference;
    /**
     * The practitioner who is responsible for the services rendered to the patient.
     */
    provider?: Reference;
    /**
     * Patient Resource.
     */
    candidate?: Reference;
    /**
     * Reference to the program or plan identification, underwriter or payor.
     */
    coverage?: Reference;
}
/**
 * This resource provides enrollment and plan details from the processing of an EnrollmentRequest resource.
 */
export interface EnrollmentResponse {
    /**
     * The type of the resource.
     */
    resourceType: string;
    /**
     * The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes.
     */
    id?: id;
    /**
     * Contains extension information for property 'id'.
     */
    _id?: Element;
    /**
     * The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource.
     */
    meta?: Meta;
    /**
     * A reference to a set of rules that were followed when the resource was constructed, and which must be understood when processing the content. Often, this is a reference to an implementation guide that defines the special rules along with other profiles etc.
     */
    implicitRules?: uri;
    /**
     * Contains extension information for property 'implicitRules'.
     */
    _implicitRules?: Element;
    /**
     * The base language in which the resource is written.
     */
    language?: code;
    /**
     * Contains extension information for property 'language'.
     */
    _language?: Element;
    /**
     * A human-readable narrative that contains a summary of the resource and can be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it "clinically safe" for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety.
     */
    text?: Narrative;
    /**
     * These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, and nor can they have their own independent transaction scope.
     */
    contained?: Resource[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * The Response business identifier.
     */
    identifier?: Identifier[];
    /**
     * The status of the resource instance.
     */
    status?: code;
    /**
     * Contains extension information for property 'status'.
     */
    _status?: Element;
    /**
     * Original request resource reference.
     */
    request?: Reference;
    /**
     * Processing status: error, complete.
     */
    outcome?: code;
    /**
     * Contains extension information for property 'outcome'.
     */
    _outcome?: Element;
    /**
     * A description of the status of the adjudication.
     */
    disposition?: string;
    /**
     * Contains extension information for property 'disposition'.
     */
    _disposition?: Element;
    /**
     * The date when the enclosed suite of services were performed or completed.
     */
    created?: dateTime;
    /**
     * Contains extension information for property 'created'.
     */
    _created?: Element;
    /**
     * The Insurer who produced this adjudicated response.
     */
    organization?: Reference;
    /**
     * The practitioner who is responsible for the services rendered to the patient.
     */
    requestProvider?: Reference;
}
/**
 * An association between a patient and an organization / healthcare provider(s) during which time encounters may occur. The managing organization assumes a level of responsibility for the patient during this time.
 */
export interface EpisodeOfCare {
    /**
     * The type of the resource.
     */
    resourceType: string;
    /**
     * The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes.
     */
    id?: id;
    /**
     * Contains extension information for property 'id'.
     */
    _id?: Element;
    /**
     * The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource.
     */
    meta?: Meta;
    /**
     * A reference to a set of rules that were followed when the resource was constructed, and which must be understood when processing the content. Often, this is a reference to an implementation guide that defines the special rules along with other profiles etc.
     */
    implicitRules?: uri;
    /**
     * Contains extension information for property 'implicitRules'.
     */
    _implicitRules?: Element;
    /**
     * The base language in which the resource is written.
     */
    language?: code;
    /**
     * Contains extension information for property 'language'.
     */
    _language?: Element;
    /**
     * A human-readable narrative that contains a summary of the resource and can be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it "clinically safe" for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety.
     */
    text?: Narrative;
    /**
     * These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, and nor can they have their own independent transaction scope.
     */
    contained?: Resource[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * The EpisodeOfCare may be known by different identifiers for different contexts of use, such as when an external agency is tracking the Episode for funding purposes.
     */
    identifier?: Identifier[];
    /**
     * planned | waitlist | active | onhold | finished | cancelled.
     */
    status: code;
    /**
     * Contains extension information for property 'status'.
     */
    _status?: Element;
    /**
     * The history of statuses that the EpisodeOfCare has been through (without requiring processing the history of the resource).
     */
    statusHistory?: EpisodeOfCareStatusHistory[];
    /**
     * A classification of the type of episode of care; e.g. specialist referral, disease management, type of funded care.
     */
    type?: CodeableConcept[];
    /**
     * The list of diagnosis relevant to this episode of care.
     */
    diagnosis?: EpisodeOfCareDiagnosis[];
    /**
     * The patient who is the focus of this episode of care.
     */
    patient: Reference;
    /**
     * The organization that has assumed the specific responsibilities for the specified duration.
     */
    managingOrganization?: Reference;
    /**
     * The interval during which the managing organization assumes the defined responsibility.
     */
    period?: Period;
    /**
     * Referral Request(s) that are fulfilled by this EpisodeOfCare, incoming referrals.
     */
    referralRequest?: Reference[];
    /**
     * The practitioner that is the care manager/care coordinator for this patient.
     */
    careManager?: Reference;
    /**
     * The list of practitioners that may be facilitating this episode of care for specific purposes.
     */
    team?: Reference[];
    /**
     * The set of accounts that may be used for billing for this EpisodeOfCare.
     */
    account?: Reference[];
}
/**
 * The history of statuses that the EpisodeOfCare has been through (without requiring processing the history of the resource).
 */
export interface EpisodeOfCareStatusHistory {
    /**
     * Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
     */
    id?: string;
    /**
     * Contains extension information for property 'id'.
     */
    _id?: Element;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * planned | waitlist | active | onhold | finished | cancelled.
     */
    status: code;
    /**
     * Contains extension information for property 'status'.
     */
    _status?: Element;
    /**
     * The period during this EpisodeOfCare that the specific status applied.
     */
    period: Period;
}
/**
 * The list of diagnosis relevant to this episode of care.
 */
export interface EpisodeOfCareDiagnosis {
    /**
     * Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
     */
    id?: string;
    /**
     * Contains extension information for property 'id'.
     */
    _id?: Element;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * A list of conditions/problems/diagnoses that this episode of care is intended to be providing care for.
     */
    condition: Reference;
    /**
     * Role that this diagnosis has within the episode of care (e.g. admission, billing, discharge …).
     */
    role?: CodeableConcept;
    /**
     * Ranking of the diagnosis (for each role type).
     */
    rank?: positiveInt;
    /**
     * Contains extension information for property 'rank'.
     */
    _rank?: Element;
}
/**
 * The EventDefinition resource provides a reusable description of when a particular event can occur.
 */
export interface EventDefinition {
    /**
     * The type of the resource.
     */
    resourceType: string;
    /**
     * The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes.
     */
    id?: id;
    /**
     * Contains extension information for property 'id'.
     */
    _id?: Element;
    /**
     * The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource.
     */
    meta?: Meta;
    /**
     * A reference to a set of rules that were followed when the resource was constructed, and which must be understood when processing the content. Often, this is a reference to an implementation guide that defines the special rules along with other profiles etc.
     */
    implicitRules?: uri;
    /**
     * Contains extension information for property 'implicitRules'.
     */
    _implicitRules?: Element;
    /**
     * The base language in which the resource is written.
     */
    language?: code;
    /**
     * Contains extension information for property 'language'.
     */
    _language?: Element;
    /**
     * A human-readable narrative that contains a summary of the resource and can be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it "clinically safe" for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety.
     */
    text?: Narrative;
    /**
     * These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, and nor can they have their own independent transaction scope.
     */
    contained?: Resource[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * An absolute URI that is used to identify this event definition when it is referenced in a specification, model, design or an instance; also called its canonical identifier. This SHOULD be globally unique and SHOULD be a literal address at which at which an authoritative instance of this event definition is (or will be) published. This URL can be the target of a canonical reference. It SHALL remain the same when the event definition is stored on different servers.
     */
    url?: uri;
    /**
     * Contains extension information for property 'url'.
     */
    _url?: Element;
    /**
     * A formal identifier that is used to identify this event definition when it is represented in other formats, or referenced in a specification, model, design or an instance.
     */
    identifier?: Identifier[];
    /**
     * The identifier that is used to identify this version of the event definition when it is referenced in a specification, model, design or instance. This is an arbitrary value managed by the event definition author and is not expected to be globally unique. For example, it might be a timestamp (e.g. yyyymmdd) if a managed version is not available. There is also no expectation that versions can be placed in a lexicographical sequence.
     */
    version?: string;
    /**
     * Contains extension information for property 'version'.
     */
    _version?: Element;
    /**
     * A natural language name identifying the event definition. This name should be usable as an identifier for the module by machine processing applications such as code generation.
     */
    name?: string;
    /**
     * Contains extension information for property 'name'.
     */
    _name?: Element;
    /**
     * A short, descriptive, user-friendly title for the event definition.
     */
    title?: string;
    /**
     * Contains extension information for property 'title'.
     */
    _title?: Element;
    /**
     * An explanatory or alternate title for the event definition giving additional information about its content.
     */
    subtitle?: string;
    /**
     * Contains extension information for property 'subtitle'.
     */
    _subtitle?: Element;
    /**
     * The status of this event definition. Enables tracking the life-cycle of the content.
     */
    status: code;
    /**
     * Contains extension information for property 'status'.
     */
    _status?: Element;
    /**
     * A Boolean value to indicate that this event definition is authored for testing purposes (or education/evaluation/marketing) and is not intended to be used for genuine usage.
     */
    experimental?: boolean;
    /**
     * Contains extension information for property 'experimental'.
     */
    _experimental?: Element;
    /**
     * A code or group definition that describes the intended subject of the event definition.
     */
    subjectCodeableConcept?: CodeableConcept;
    /**
     * A code or group definition that describes the intended subject of the event definition.
     */
    subjectReference?: Reference;
    /**
     * The date  (and optionally time) when the event definition was published. The date must change when the business version changes and it must change if the status code changes. In addition, it should change when the substantive content of the event definition changes.
     */
    date?: dateTime;
    /**
     * Contains extension information for property 'date'.
     */
    _date?: Element;
    /**
     * The name of the organization or individual that published the event definition.
     */
    publisher?: string;
    /**
     * Contains extension information for property 'publisher'.
     */
    _publisher?: Element;
    /**
     * Contact details to assist a user in finding and communicating with the publisher.
     */
    contact?: ContactDetail[];
    /**
     * A free text natural language description of the event definition from a consumer's perspective.
     */
    description?: markdown;
    /**
     * Contains extension information for property 'description'.
     */
    _description?: Element;
    /**
     * The content was developed with a focus and intent of supporting the contexts that are listed. These contexts may be general categories (gender, age, ...) or may be references to specific programs (insurance plans, studies, ...) and may be used to assist with indexing and searching for appropriate event definition instances.
     */
    useContext?: UsageContext[];
    /**
     * A legal or geographic region in which the event definition is intended to be used.
     */
    jurisdiction?: CodeableConcept[];
    /**
     * Explanation of why this event definition is needed and why it has been designed as it has.
     */
    purpose?: markdown;
    /**
     * Contains extension information for property 'purpose'.
     */
    _purpose?: Element;
    /**
     * A detailed description of how the event definition is used from a clinical perspective.
     */
    usage?: string;
    /**
     * Contains extension information for property 'usage'.
     */
    _usage?: Element;
    /**
     * A copyright statement relating to the event definition and/or its contents. Copyright statements are generally legal restrictions on the use and publishing of the event definition.
     */
    copyright?: markdown;
    /**
     * Contains extension information for property 'copyright'.
     */
    _copyright?: Element;
    /**
     * The date on which the resource content was approved by the publisher. Approval happens once when the content is officially approved for usage.
     */
    approvalDate?: date;
    /**
     * Contains extension information for property 'approvalDate'.
     */
    _approvalDate?: Element;
    /**
     * The date on which the resource content was last reviewed. Review happens periodically after approval but does not change the original approval date.
     */
    lastReviewDate?: date;
    /**
     * Contains extension information for property 'lastReviewDate'.
     */
    _lastReviewDate?: Element;
    /**
     * The period during which the event definition content was or is planned to be in active use.
     */
    effectivePeriod?: Period;
    /**
     * Descriptive topics related to the module. Topics provide a high-level categorization of the module that can be useful for filtering and searching.
     */
    topic?: CodeableConcept[];
    /**
     * An individiual or organization primarily involved in the creation and maintenance of the content.
     */
    author?: ContactDetail[];
    /**
     * An individual or organization primarily responsible for internal coherence of the content.
     */
    editor?: ContactDetail[];
    /**
     * An individual or organization primarily responsible for review of some aspect of the content.
     */
    reviewer?: ContactDetail[];
    /**
     * An individual or organization responsible for officially endorsing the content for use in some setting.
     */
    endorser?: ContactDetail[];
    /**
     * Related resources such as additional documentation, justification, or bibliographic references.
     */
    relatedArtifact?: RelatedArtifact[];
    /**
     * The trigger element defines when the event occurs. If more than one trigger condition is specified, the event fires whenever any one of the trigger conditions is met.
     */
    trigger: TriggerDefinition[];
}
/**
 * The Evidence resource describes the conditional state (population and any exposures being compared within the population) and outcome (if specified) that the knowledge (evidence, assertion, recommendation) is about.
 */
export interface Evidence {
    /**
     * The type of the resource.
     */
    resourceType: string;
    /**
     * The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes.
     */
    id?: id;
    /**
     * Contains extension information for property 'id'.
     */
    _id?: Element;
    /**
     * The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource.
     */
    meta?: Meta;
    /**
     * A reference to a set of rules that were followed when the resource was constructed, and which must be understood when processing the content. Often, this is a reference to an implementation guide that defines the special rules along with other profiles etc.
     */
    implicitRules?: uri;
    /**
     * Contains extension information for property 'implicitRules'.
     */
    _implicitRules?: Element;
    /**
     * The base language in which the resource is written.
     */
    language?: code;
    /**
     * Contains extension information for property 'language'.
     */
    _language?: Element;
    /**
     * A human-readable narrative that contains a summary of the resource and can be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it "clinically safe" for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety.
     */
    text?: Narrative;
    /**
     * These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, and nor can they have their own independent transaction scope.
     */
    contained?: Resource[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * An absolute URI that is used to identify this evidence when it is referenced in a specification, model, design or an instance; also called its canonical identifier. This SHOULD be globally unique and SHOULD be a literal address at which at which an authoritative instance of this evidence is (or will be) published. This URL can be the target of a canonical reference. It SHALL remain the same when the evidence is stored on different servers.
     */
    url?: uri;
    /**
     * Contains extension information for property 'url'.
     */
    _url?: Element;
    /**
     * A formal identifier that is used to identify this evidence when it is represented in other formats, or referenced in a specification, model, design or an instance.
     */
    identifier?: Identifier[];
    /**
     * The identifier that is used to identify this version of the evidence when it is referenced in a specification, model, design or instance. This is an arbitrary value managed by the evidence author and is not expected to be globally unique. For example, it might be a timestamp (e.g. yyyymmdd) if a managed version is not available. There is also no expectation that versions can be placed in a lexicographical sequence. To provide a version consistent with the Decision Support Service specification, use the format Major.Minor.Revision (e.g. 1.0.0). For more information on versioning knowledge assets, refer to the Decision Support Service specification. Note that a version is required for non-experimental active artifacts.
     */
    version?: string;
    /**
     * Contains extension information for property 'version'.
     */
    _version?: Element;
    /**
     * A natural language name identifying the evidence. This name should be usable as an identifier for the module by machine processing applications such as code generation.
     */
    name?: string;
    /**
     * Contains extension information for property 'name'.
     */
    _name?: Element;
    /**
     * A short, descriptive, user-friendly title for the evidence.
     */
    title?: string;
    /**
     * Contains extension information for property 'title'.
     */
    _title?: Element;
    /**
     * The short title provides an alternate title for use in informal descriptive contexts where the full, formal title is not necessary.
     */
    shortTitle?: string;
    /**
     * Contains extension information for property 'shortTitle'.
     */
    _shortTitle?: Element;
    /**
     * An explanatory or alternate title for the Evidence giving additional information about its content.
     */
    subtitle?: string;
    /**
     * Contains extension information for property 'subtitle'.
     */
    _subtitle?: Element;
    /**
     * The status of this evidence. Enables tracking the life-cycle of the content.
     */
    status: code;
    /**
     * Contains extension information for property 'status'.
     */
    _status?: Element;
    /**
     * The date  (and optionally time) when the evidence was published. The date must change when the business version changes and it must change if the status code changes. In addition, it should change when the substantive content of the evidence changes.
     */
    date?: dateTime;
    /**
     * Contains extension information for property 'date'.
     */
    _date?: Element;
    /**
     * The name of the organization or individual that published the evidence.
     */
    publisher?: string;
    /**
     * Contains extension information for property 'publisher'.
     */
    _publisher?: Element;
    /**
     * Contact details to assist a user in finding and communicating with the publisher.
     */
    contact?: ContactDetail[];
    /**
     * A free text natural language description of the evidence from a consumer's perspective.
     */
    description?: markdown;
    /**
     * Contains extension information for property 'description'.
     */
    _description?: Element;
    /**
     * A human-readable string to clarify or explain concepts about the resource.
     */
    note?: Annotation[];
    /**
     * The content was developed with a focus and intent of supporting the contexts that are listed. These contexts may be general categories (gender, age, ...) or may be references to specific programs (insurance plans, studies, ...) and may be used to assist with indexing and searching for appropriate evidence instances.
     */
    useContext?: UsageContext[];
    /**
     * A legal or geographic region in which the evidence is intended to be used.
     */
    jurisdiction?: CodeableConcept[];
    /**
     * A copyright statement relating to the evidence and/or its contents. Copyright statements are generally legal restrictions on the use and publishing of the evidence.
     */
    copyright?: markdown;
    /**
     * Contains extension information for property 'copyright'.
     */
    _copyright?: Element;
    /**
     * The date on which the resource content was approved by the publisher. Approval happens once when the content is officially approved for usage.
     */
    approvalDate?: date;
    /**
     * Contains extension information for property 'approvalDate'.
     */
    _approvalDate?: Element;
    /**
     * The date on which the resource content was last reviewed. Review happens periodically after approval but does not change the original approval date.
     */
    lastReviewDate?: date;
    /**
     * Contains extension information for property 'lastReviewDate'.
     */
    _lastReviewDate?: Element;
    /**
     * The period during which the evidence content was or is planned to be in active use.
     */
    effectivePeriod?: Period;
    /**
     * Descriptive topics related to the content of the Evidence. Topics provide a high-level categorization grouping types of Evidences that can be useful for filtering and searching.
     */
    topic?: CodeableConcept[];
    /**
     * An individiual or organization primarily involved in the creation and maintenance of the content.
     */
    author?: ContactDetail[];
    /**
     * An individual or organization primarily responsible for internal coherence of the content.
     */
    editor?: ContactDetail[];
    /**
     * An individual or organization primarily responsible for review of some aspect of the content.
     */
    reviewer?: ContactDetail[];
    /**
     * An individual or organization responsible for officially endorsing the content for use in some setting.
     */
    endorser?: ContactDetail[];
    /**
     * Related artifacts such as additional documentation, justification, or bibliographic references.
     */
    relatedArtifact?: RelatedArtifact[];
    /**
     * A reference to a EvidenceVariable resource that defines the population for the research.
     */
    exposureBackground: Reference;
    /**
     * A reference to a EvidenceVariable resource that defines the exposure for the research.
     */
    exposureVariant?: Reference[];
    /**
     * A reference to a EvidenceVariable resomece that defines the outcome for the research.
     */
    outcome?: Reference[];
}
/**
 * The EvidenceVariable resource describes a "PICO" element that knowledge (evidence, assertion, recommendation) is about.
 */
export interface EvidenceVariable {
    /**
     * The type of the resource.
     */
    resourceType: string;
    /**
     * The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes.
     */
    id?: id;
    /**
     * Contains extension information for property 'id'.
     */
    _id?: Element;
    /**
     * The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource.
     */
    meta?: Meta;
    /**
     * A reference to a set of rules that were followed when the resource was constructed, and which must be understood when processing the content. Often, this is a reference to an implementation guide that defines the special rules along with other profiles etc.
     */
    implicitRules?: uri;
    /**
     * Contains extension information for property 'implicitRules'.
     */
    _implicitRules?: Element;
    /**
     * The base language in which the resource is written.
     */
    language?: code;
    /**
     * Contains extension information for property 'language'.
     */
    _language?: Element;
    /**
     * A human-readable narrative that contains a summary of the resource and can be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it "clinically safe" for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety.
     */
    text?: Narrative;
    /**
     * These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, and nor can they have their own independent transaction scope.
     */
    contained?: Resource[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * An absolute URI that is used to identify this evidence variable when it is referenced in a specification, model, design or an instance; also called its canonical identifier. This SHOULD be globally unique and SHOULD be a literal address at which at which an authoritative instance of this evidence variable is (or will be) published. This URL can be the target of a canonical reference. It SHALL remain the same when the evidence variable is stored on different servers.
     */
    url?: uri;
    /**
     * Contains extension information for property 'url'.
     */
    _url?: Element;
    /**
     * A formal identifier that is used to identify this evidence variable when it is represented in other formats, or referenced in a specification, model, design or an instance.
     */
    identifier?: Identifier[];
    /**
     * The identifier that is used to identify this version of the evidence variable when it is referenced in a specification, model, design or instance. This is an arbitrary value managed by the evidence variable author and is not expected to be globally unique. For example, it might be a timestamp (e.g. yyyymmdd) if a managed version is not available. There is also no expectation that versions can be placed in a lexicographical sequence. To provide a version consistent with the Decision Support Service specification, use the format Major.Minor.Revision (e.g. 1.0.0). For more information on versioning knowledge assets, refer to the Decision Support Service specification. Note that a version is required for non-experimental active artifacts.
     */
    version?: string;
    /**
     * Contains extension information for property 'version'.
     */
    _version?: Element;
    /**
     * A natural language name identifying the evidence variable. This name should be usable as an identifier for the module by machine processing applications such as code generation.
     */
    name?: string;
    /**
     * Contains extension information for property 'name'.
     */
    _name?: Element;
    /**
     * A short, descriptive, user-friendly title for the evidence variable.
     */
    title?: string;
    /**
     * Contains extension information for property 'title'.
     */
    _title?: Element;
    /**
     * The short title provides an alternate title for use in informal descriptive contexts where the full, formal title is not necessary.
     */
    shortTitle?: string;
    /**
     * Contains extension information for property 'shortTitle'.
     */
    _shortTitle?: Element;
    /**
     * An explanatory or alternate title for the EvidenceVariable giving additional information about its content.
     */
    subtitle?: string;
    /**
     * Contains extension information for property 'subtitle'.
     */
    _subtitle?: Element;
    /**
     * The status of this evidence variable. Enables tracking the life-cycle of the content.
     */
    status: code;
    /**
     * Contains extension information for property 'status'.
     */
    _status?: Element;
    /**
     * The date  (and optionally time) when the evidence variable was published. The date must change when the business version changes and it must change if the status code changes. In addition, it should change when the substantive content of the evidence variable changes.
     */
    date?: dateTime;
    /**
     * Contains extension information for property 'date'.
     */
    _date?: Element;
    /**
     * The name of the organization or individual that published the evidence variable.
     */
    publisher?: string;
    /**
     * Contains extension information for property 'publisher'.
     */
    _publisher?: Element;
    /**
     * Contact details to assist a user in finding and communicating with the publisher.
     */
    contact?: ContactDetail[];
    /**
     * A free text natural language description of the evidence variable from a consumer's perspective.
     */
    description?: markdown;
    /**
     * Contains extension information for property 'description'.
     */
    _description?: Element;
    /**
     * A human-readable string to clarify or explain concepts about the resource.
     */
    note?: Annotation[];
    /**
     * The content was developed with a focus and intent of supporting the contexts that are listed. These contexts may be general categories (gender, age, ...) or may be references to specific programs (insurance plans, studies, ...) and may be used to assist with indexing and searching for appropriate evidence variable instances.
     */
    useContext?: UsageContext[];
    /**
     * A legal or geographic region in which the evidence variable is intended to be used.
     */
    jurisdiction?: CodeableConcept[];
    /**
     * A copyright statement relating to the evidence variable and/or its contents. Copyright statements are generally legal restrictions on the use and publishing of the evidence variable.
     */
    copyright?: markdown;
    /**
     * Contains extension information for property 'copyright'.
     */
    _copyright?: Element;
    /**
     * The date on which the resource content was approved by the publisher. Approval happens once when the content is officially approved for usage.
     */
    approvalDate?: date;
    /**
     * Contains extension information for property 'approvalDate'.
     */
    _approvalDate?: Element;
    /**
     * The date on which the resource content was last reviewed. Review happens periodically after approval but does not change the original approval date.
     */
    lastReviewDate?: date;
    /**
     * Contains extension information for property 'lastReviewDate'.
     */
    _lastReviewDate?: Element;
    /**
     * The period during which the evidence variable content was or is planned to be in active use.
     */
    effectivePeriod?: Period;
    /**
     * Descriptive topics related to the content of the EvidenceVariable. Topics provide a high-level categorization grouping types of EvidenceVariables that can be useful for filtering and searching.
     */
    topic?: CodeableConcept[];
    /**
     * An individiual or organization primarily involved in the creation and maintenance of the content.
     */
    author?: ContactDetail[];
    /**
     * An individual or organization primarily responsible for internal coherence of the content.
     */
    editor?: ContactDetail[];
    /**
     * An individual or organization primarily responsible for review of some aspect of the content.
     */
    reviewer?: ContactDetail[];
    /**
     * An individual or organization responsible for officially endorsing the content for use in some setting.
     */
    endorser?: ContactDetail[];
    /**
     * Related artifacts such as additional documentation, justification, or bibliographic references.
     */
    relatedArtifact?: RelatedArtifact[];
    /**
     * The type of evidence element, a population, an exposure, or an outcome.
     */
    type?: code;
    /**
     * Contains extension information for property 'type'.
     */
    _type?: Element;
    /**
     * A characteristic that defines the members of the evidence element. Multiple characteristics are applied with "and" semantics.
     */
    characteristic: EvidenceVariableCharacteristic[];
}
/**
 * A characteristic that defines the members of the evidence element. Multiple characteristics are applied with "and" semantics.
 */
export interface EvidenceVariableCharacteristic {
    /**
     * Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
     */
    id?: string;
    /**
     * Contains extension information for property 'id'.
     */
    _id?: Element;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * A short, natural language description of the characteristic that could be used to communicate the criteria to an end-user.
     */
    description?: string;
    /**
     * Contains extension information for property 'description'.
     */
    _description?: Element;
    /**
     * Define members of the evidence element using Codes (such as condition, medication, or observation), Expressions ( using an expression language such as FHIRPath or CQL) or DataRequirements (such as Diabetes diagnosis onset in the last year).
     */
    definitionReference: Reference;
    /**
     * Define members of the evidence element using Codes (such as condition, medication, or observation), Expressions ( using an expression language such as FHIRPath or CQL) or DataRequirements (such as Diabetes diagnosis onset in the last year).
     */
    definitionCanonical: canonical;
    /**
     * Define members of the evidence element using Codes (such as condition, medication, or observation), Expressions ( using an expression language such as FHIRPath or CQL) or DataRequirements (such as Diabetes diagnosis onset in the last year).
     */
    definitionCodeableConcept: CodeableConcept;
    /**
     * Define members of the evidence element using Codes (such as condition, medication, or observation), Expressions ( using an expression language such as FHIRPath or CQL) or DataRequirements (such as Diabetes diagnosis onset in the last year).
     */
    definitionExpression: Expression;
    /**
     * Define members of the evidence element using Codes (such as condition, medication, or observation), Expressions ( using an expression language such as FHIRPath or CQL) or DataRequirements (such as Diabetes diagnosis onset in the last year).
     */
    definitionDataRequirement: DataRequirement;
    /**
     * Define members of the evidence element using Codes (such as condition, medication, or observation), Expressions ( using an expression language such as FHIRPath or CQL) or DataRequirements (such as Diabetes diagnosis onset in the last year).
     */
    definitionTriggerDefinition: TriggerDefinition;
    /**
     * Use UsageContext to define the members of the population, such as Age Ranges, Genders, Settings.
     */
    usageContext?: UsageContext[];
    /**
     * When true, members with this characteristic are excluded from the element.
     */
    exclude?: boolean;
    /**
     * Contains extension information for property 'exclude'.
     */
    _exclude?: Element;
    /**
     * Indicates what effective period the study covers.
     */
    participanteffectiveDateTime?: dateTime;
    /**
     * Contains extension information for property 'participanteffectiveDateTime'.
     */
    _participanteffectiveDateTime?: Element;
    /**
     * Indicates what effective period the study covers.
     */
    participanteffectivePeriod?: Period;
    /**
     * Indicates what effective period the study covers.
     */
    participanteffectiveDuration?: Duration;
    /**
     * Indicates what effective period the study covers.
     */
    participanteffectiveTiming?: Timing;
    /**
     * Indicates duration from the participant's study entry.
     */
    timeFromStart?: Duration;
    /**
     * Indicates how elements are aggregated within the study effective period.
     */
    groupMeasure?: code;
    /**
     * Contains extension information for property 'groupMeasure'.
     */
    _groupMeasure?: Element;
}
/**
 * Example of workflow instance.
 */
export interface ExampleScenario {
    /**
     * The type of the resource.
     */
    resourceType: string;
    /**
     * The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes.
     */
    id?: id;
    /**
     * Contains extension information for property 'id'.
     */
    _id?: Element;
    /**
     * The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource.
     */
    meta?: Meta;
    /**
     * A reference to a set of rules that were followed when the resource was constructed, and which must be understood when processing the content. Often, this is a reference to an implementation guide that defines the special rules along with other profiles etc.
     */
    implicitRules?: uri;
    /**
     * Contains extension information for property 'implicitRules'.
     */
    _implicitRules?: Element;
    /**
     * The base language in which the resource is written.
     */
    language?: code;
    /**
     * Contains extension information for property 'language'.
     */
    _language?: Element;
    /**
     * A human-readable narrative that contains a summary of the resource and can be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it "clinically safe" for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety.
     */
    text?: Narrative;
    /**
     * These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, and nor can they have their own independent transaction scope.
     */
    contained?: Resource[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * An absolute URI that is used to identify this example scenario when it is referenced in a specification, model, design or an instance; also called its canonical identifier. This SHOULD be globally unique and SHOULD be a literal address at which at which an authoritative instance of this example scenario is (or will be) published. This URL can be the target of a canonical reference. It SHALL remain the same when the example scenario is stored on different servers.
     */
    url?: uri;
    /**
     * Contains extension information for property 'url'.
     */
    _url?: Element;
    /**
     * A formal identifier that is used to identify this example scenario when it is represented in other formats, or referenced in a specification, model, design or an instance.
     */
    identifier?: Identifier[];
    /**
     * The identifier that is used to identify this version of the example scenario when it is referenced in a specification, model, design or instance. This is an arbitrary value managed by the example scenario author and is not expected to be globally unique. For example, it might be a timestamp (e.g. yyyymmdd) if a managed version is not available. There is also no expectation that versions can be placed in a lexicographical sequence.
     */
    version?: string;
    /**
     * Contains extension information for property 'version'.
     */
    _version?: Element;
    /**
     * A natural language name identifying the example scenario. This name should be usable as an identifier for the module by machine processing applications such as code generation.
     */
    name?: string;
    /**
     * Contains extension information for property 'name'.
     */
    _name?: Element;
    /**
     * The status of this example scenario. Enables tracking the life-cycle of the content.
     */
    status: code;
    /**
     * Contains extension information for property 'status'.
     */
    _status?: Element;
    /**
     * A Boolean value to indicate that this example scenario is authored for testing purposes (or education/evaluation/marketing) and is not intended to be used for genuine usage.
     */
    experimental?: boolean;
    /**
     * Contains extension information for property 'experimental'.
     */
    _experimental?: Element;
    /**
     * The date  (and optionally time) when the example scenario was published. The date must change when the business version changes and it must change if the status code changes. In addition, it should change when the substantive content of the example scenario changes. (e.g. the 'content logical definition').
     */
    date?: dateTime;
    /**
     * Contains extension information for property 'date'.
     */
    _date?: Element;
    /**
     * The name of the organization or individual that published the example scenario.
     */
    publisher?: string;
    /**
     * Contains extension information for property 'publisher'.
     */
    _publisher?: Element;
    /**
     * Contact details to assist a user in finding and communicating with the publisher.
     */
    contact?: ContactDetail[];
    /**
     * The content was developed with a focus and intent of supporting the contexts that are listed. These contexts may be general categories (gender, age, ...) or may be references to specific programs (insurance plans, studies, ...) and may be used to assist with indexing and searching for appropriate example scenario instances.
     */
    useContext?: UsageContext[];
    /**
     * A legal or geographic region in which the example scenario is intended to be used.
     */
    jurisdiction?: CodeableConcept[];
    /**
     * A copyright statement relating to the example scenario and/or its contents. Copyright statements are generally legal restrictions on the use and publishing of the example scenario.
     */
    copyright?: markdown;
    /**
     * Contains extension information for property 'copyright'.
     */
    _copyright?: Element;
    /**
     * What the example scenario resource is created for. This should not be used to show the business purpose of the scenario itself, but the purpose of documenting a scenario.
     */
    purpose?: markdown;
    /**
     * Contains extension information for property 'purpose'.
     */
    _purpose?: Element;
    /**
     * Actor participating in the resource.
     */
    actor?: ExampleScenarioActor[];
    /**
     * Each resource and each version that is present in the workflow.
     */
    instance?: ExampleScenarioInstance[];
    /**
     * Each major process - a group of operations.
     */
    process?: ExampleScenarioProcess[];
    /**
     * Another nested workflow.
     */
    workflow?: canonical[];
}
/**
 * Actor participating in the resource.
 */
export interface ExampleScenarioActor {
    /**
     * Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
     */
    id?: string;
    /**
     * Contains extension information for property 'id'.
     */
    _id?: Element;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * ID or acronym of actor.
     */
    actorId: string;
    /**
     * Contains extension information for property 'actorId'.
     */
    _actorId?: Element;
    /**
     * The type of actor - person or system.
     */
    type: code;
    /**
     * Contains extension information for property 'type'.
     */
    _type?: Element;
    /**
     * The name of the actor as shown in the page.
     */
    name?: string;
    /**
     * Contains extension information for property 'name'.
     */
    _name?: Element;
    /**
     * The description of the actor.
     */
    description?: markdown;
    /**
     * Contains extension information for property 'description'.
     */
    _description?: Element;
}
/**
 * Each resource and each version that is present in the workflow.
 */
export interface ExampleScenarioInstance {
    /**
     * Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
     */
    id?: string;
    /**
     * Contains extension information for property 'id'.
     */
    _id?: Element;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * The id of the resource for referencing.
     */
    resourceId: string;
    /**
     * Contains extension information for property 'resourceId'.
     */
    _resourceId?: Element;
    /**
     * The type of the resource.
     */
    resourceType: code;
    /**
     * Contains extension information for property 'resourceType'.
     */
    _resourceType?: Element;
    /**
     * A short name for the resource instance.
     */
    name?: string;
    /**
     * Contains extension information for property 'name'.
     */
    _name?: Element;
    /**
     * Human-friendly description of the resource instance.
     */
    description?: markdown;
    /**
     * Contains extension information for property 'description'.
     */
    _description?: Element;
    /**
     * A specific version of the resource.
     */
    version?: ExampleScenarioInstanceVersion[];
    /**
     * Resources contained in the instance (e.g. the observations contained in a bundle).
     */
    containedInstance?: ExampleScenarioInstanceContainedInstance[];
}
/**
 * A specific version of the resource.
 */
export interface ExampleScenarioInstanceVersion {
    /**
     * Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
     */
    id?: string;
    /**
     * Contains extension information for property 'id'.
     */
    _id?: Element;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * The identifier of a specific version of a resource.
     */
    versionId: string;
    /**
     * Contains extension information for property 'versionId'.
     */
    _versionId?: Element;
    /**
     * The description of the resource version.
     */
    description: markdown;
    /**
     * Contains extension information for property 'description'.
     */
    _description?: Element;
}
/**
 * Resources contained in the instance (e.g. the observations contained in a bundle).
 */
export interface ExampleScenarioInstanceContainedInstance {
    /**
     * Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
     */
    id?: string;
    /**
     * Contains extension information for property 'id'.
     */
    _id?: Element;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * Each resource contained in the instance.
     */
    resourceId: string;
    /**
     * Contains extension information for property 'resourceId'.
     */
    _resourceId?: Element;
    /**
     * A specific version of a resource contained in the instance.
     */
    versionId?: string;
    /**
     * Contains extension information for property 'versionId'.
     */
    _versionId?: Element;
}
/**
 * Each major process - a group of operations.
 */
export interface ExampleScenarioProcess {
    /**
     * Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
     */
    id?: string;
    /**
     * Contains extension information for property 'id'.
     */
    _id?: Element;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * The diagram title of the group of operations.
     */
    title: string;
    /**
     * Contains extension information for property 'title'.
     */
    _title?: Element;
    /**
     * A longer description of the group of operations.
     */
    description?: markdown;
    /**
     * Contains extension information for property 'description'.
     */
    _description?: Element;
    /**
     * Description of initial status before the process starts.
     */
    preConditions?: markdown;
    /**
     * Contains extension information for property 'preConditions'.
     */
    _preConditions?: Element;
    /**
     * Description of final status after the process ends.
     */
    postConditions?: markdown;
    /**
     * Contains extension information for property 'postConditions'.
     */
    _postConditions?: Element;
    /**
     * Each step of the process.
     */
    step?: ExampleScenarioProcessStep[];
}
/**
 * Each step of the process.
 */
export interface ExampleScenarioProcessStep {
    /**
     * Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
     */
    id?: string;
    /**
     * Contains extension information for property 'id'.
     */
    _id?: Element;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * Nested process.
     */
    process?: ExampleScenarioProcess[];
    /**
     * If there is a pause in the flow.
     */
    pause?: boolean;
    /**
     * Contains extension information for property 'pause'.
     */
    _pause?: Element;
    /**
     * Each interaction or action.
     */
    operation?: ExampleScenarioProcessStepOperation;
    /**
     * Indicates an alternative step that can be taken instead of the operations on the base step in exceptional/atypical circumstances.
     */
    alternative?: ExampleScenarioProcessStepAlternative[];
}
/**
 * Each interaction or action.
 */
export interface ExampleScenarioProcessStepOperation {
    /**
     * Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
     */
    id?: string;
    /**
     * Contains extension information for property 'id'.
     */
    _id?: Element;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * The sequential number of the interaction, e.g. 1.2.5.
     */
    number: string;
    /**
     * Contains extension information for property 'number'.
     */
    _number?: Element;
    /**
     * The type of operation - CRUD.
     */
    type?: string;
    /**
     * Contains extension information for property 'type'.
     */
    _type?: Element;
    /**
     * The human-friendly name of the interaction.
     */
    name?: string;
    /**
     * Contains extension information for property 'name'.
     */
    _name?: Element;
    /**
     * Who starts the transaction.
     */
    initiator?: string;
    /**
     * Contains extension information for property 'initiator'.
     */
    _initiator?: Element;
    /**
     * Who receives the transaction.
     */
    receiver?: string;
    /**
     * Contains extension information for property 'receiver'.
     */
    _receiver?: Element;
    /**
     * A comment to be inserted in the diagram.
     */
    description?: markdown;
    /**
     * Contains extension information for property 'description'.
     */
    _description?: Element;
    /**
     * Whether the initiator is deactivated right after the transaction.
     */
    initiatorActive?: boolean;
    /**
     * Contains extension information for property 'initiatorActive'.
     */
    _initiatorActive?: Element;
    /**
     * Whether the receiver is deactivated right after the transaction.
     */
    receiverActive?: boolean;
    /**
     * Contains extension information for property 'receiverActive'.
     */
    _receiverActive?: Element;
    /**
     * Each resource instance used by the initiator.
     */
    request?: ExampleScenarioInstanceContainedInstance;
    /**
     * Each resource instance used by the responder.
     */
    response?: ExampleScenarioInstanceContainedInstance;
}
/**
 * Indicates an alternative step that can be taken instead of the operations on the base step in exceptional/atypical circumstances.
 */
export interface ExampleScenarioProcessStepAlternative {
    /**
     * Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
     */
    id?: string;
    /**
     * Contains extension information for property 'id'.
     */
    _id?: Element;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * The label to display for the alternative that gives a sense of the circumstance in which the alternative should be invoked.
     */
    title: string;
    /**
     * Contains extension information for property 'title'.
     */
    _title?: Element;
    /**
     * A human-readable description of the alternative explaining when the alternative should occur rather than the base step.
     */
    description?: markdown;
    /**
     * Contains extension information for property 'description'.
     */
    _description?: Element;
    /**
     * What happens in each alternative option.
     */
    step?: ExampleScenarioProcessStep[];
}
/**
 * This resource provides: the claim details; adjudication details from the processing of a Claim; and optionally account balance information, for informing the subscriber of the benefits provided.
 */
export interface ExplanationOfBenefit {
    /**
     * The type of the resource.
     */
    resourceType: string;
    /**
     * The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes.
     */
    id?: id;
    /**
     * Contains extension information for property 'id'.
     */
    _id?: Element;
    /**
     * The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource.
     */
    meta?: Meta;
    /**
     * A reference to a set of rules that were followed when the resource was constructed, and which must be understood when processing the content. Often, this is a reference to an implementation guide that defines the special rules along with other profiles etc.
     */
    implicitRules?: uri;
    /**
     * Contains extension information for property 'implicitRules'.
     */
    _implicitRules?: Element;
    /**
     * The base language in which the resource is written.
     */
    language?: code;
    /**
     * Contains extension information for property 'language'.
     */
    _language?: Element;
    /**
     * A human-readable narrative that contains a summary of the resource and can be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it "clinically safe" for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety.
     */
    text?: Narrative;
    /**
     * These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, and nor can they have their own independent transaction scope.
     */
    contained?: Resource[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * A unique identifier assigned to this explanation of benefit.
     */
    identifier?: Identifier[];
    /**
     * The status of the resource instance.
     */
    status: code;
    /**
     * Contains extension information for property 'status'.
     */
    _status?: Element;
    /**
     * The category of claim, e.g. oral, pharmacy, vision, institutional, professional.
     */
    type: CodeableConcept;
    /**
     * A finer grained suite of claim type codes which may convey additional information such as Inpatient vs Outpatient and/or a specialty service.
     */
    subType?: CodeableConcept;
    /**
     * A code to indicate whether the nature of the request is: to request adjudication of products and services previously rendered; or requesting authorization and adjudication for provision in the future; or requesting the non-binding adjudication of the listed products and services which could be provided in the future.
     */
    use: code;
    /**
     * Contains extension information for property 'use'.
     */
    _use?: Element;
    /**
     * The party to whom the professional services and/or products have been supplied or are being considered and for whom actual for forecast reimbursement is sought.
     */
    patient: Reference;
    /**
     * The period for which charges are being submitted.
     */
    billablePeriod?: Period;
    /**
     * The date this resource was created.
     */
    created: dateTime;
    /**
     * Contains extension information for property 'created'.
     */
    _created?: Element;
    /**
     * Individual who created the claim, predetermination or preauthorization.
     */
    enterer?: Reference;
    /**
     * The party responsible for authorization, adjudication and reimbursement.
     */
    insurer: Reference;
    /**
     * The provider which is responsible for the claim, predetermination or preauthorization.
     */
    provider: Reference;
    /**
     * The provider-required urgency of processing the request. Typical values include: stat, routine deferred.
     */
    priority?: CodeableConcept;
    /**
     * A code to indicate whether and for whom funds are to be reserved for future claims.
     */
    fundsReserveRequested?: CodeableConcept;
    /**
     * A code, used only on a response to a preauthorization, to indicate whether the benefits payable have been reserved and for whom.
     */
    fundsReserve?: CodeableConcept;
    /**
     * Other claims which are related to this claim such as prior submissions or claims for related services or for the same event.
     */
    related?: ExplanationOfBenefitRelated[];
    /**
     * Prescription to support the dispensing of pharmacy, device or vision products.
     */
    prescription?: Reference;
    /**
     * Original prescription which has been superseded by this prescription to support the dispensing of pharmacy services, medications or products.
     */
    originalPrescription?: Reference;
    /**
     * The party to be reimbursed for cost of the products and services according to the terms of the policy.
     */
    payee?: ExplanationOfBenefitPayee;
    /**
     * A reference to a referral resource.
     */
    referral?: Reference;
    /**
     * Facility where the services were provided.
     */
    facility?: Reference;
    /**
     * The business identifier for the instance of the adjudication request: claim predetermination or preauthorization.
     */
    claim?: Reference;
    /**
     * The business identifier for the instance of the adjudication response: claim, predetermination or preauthorization response.
     */
    claimResponse?: Reference;
    /**
     * The outcome of the claim, predetermination, or preauthorization processing.
     */
    outcome: code;
    /**
     * Contains extension information for property 'outcome'.
     */
    _outcome?: Element;
    /**
     * A human readable description of the status of the adjudication.
     */
    disposition?: string;
    /**
     * Contains extension information for property 'disposition'.
     */
    _disposition?: Element;
    /**
     * Reference from the Insurer which is used in later communications which refers to this adjudication.
     */
    preAuthRef?: string[];
    /**
     * Contains extension information for property 'preAuthRef'.
     */
    _preAuthRef?: Element[];
    /**
     * The timeframe during which the supplied preauthorization reference may be quoted on claims to obtain the adjudication as provided.
     */
    preAuthRefPeriod?: Period[];
    /**
     * The members of the team who provided the products and services.
     */
    careTeam?: ExplanationOfBenefitCareTeam[];
    /**
     * Additional information codes regarding exceptions, special considerations, the condition, situation, prior or concurrent issues.
     */
    supportingInfo?: ExplanationOfBenefitSupportingInfo[];
    /**
     * Information about diagnoses relevant to the claim items.
     */
    diagnosis?: ExplanationOfBenefitDiagnosis[];
    /**
     * Procedures performed on the patient relevant to the billing items with the claim.
     */
    procedure?: ExplanationOfBenefitProcedure[];
    /**
     * This indicates the relative order of a series of EOBs related to different coverages for the same suite of services.
     */
    precedence?: positiveInt;
    /**
     * Contains extension information for property 'precedence'.
     */
    _precedence?: Element;
    /**
     * Financial instruments for reimbursement for the health care products and services specified on the claim.
     */
    insurance: ExplanationOfBenefitInsurance[];
    /**
     * Details of a accident which resulted in injuries which required the products and services listed in the claim.
     */
    accident?: ExplanationOfBenefitAccident;
    /**
     * A claim line. Either a simple (a product or service) or a 'group' of details which can also be a simple items or groups of sub-details.
     */
    item?: ExplanationOfBenefitItem[];
    /**
     * The first-tier service adjudications for payor added product or service lines.
     */
    addItem?: ExplanationOfBenefitAddItem[];
    /**
     * The adjudication results which are presented at the header level rather than at the line-item or add-item levels.
     */
    adjudication?: ExplanationOfBenefitItemAdjudication[];
    /**
     * Categorized monetary totals for the adjudication.
     */
    total?: ExplanationOfBenefitTotal[];
    /**
     * Payment details for the adjudication of the claim.
     */
    payment?: ExplanationOfBenefitPayment;
    /**
     * A code for the form to be used for printing the content.
     */
    formCode?: CodeableConcept;
    /**
     * The actual form, by reference or inclusion, for printing the content or an EOB.
     */
    form?: Attachment;
    /**
     * A note that describes or explains adjudication results in a human readable form.
     */
    processNote?: ExplanationOfBenefitProcessNote[];
    /**
     * The term of the benefits documented in this response.
     */
    benefitPeriod?: Period;
    /**
     * Balance by Benefit Category.
     */
    benefitBalance?: ExplanationOfBenefitBenefitBalance[];
}
/**
 * Other claims which are related to this claim such as prior submissions or claims for related services or for the same event.
 */
export interface ExplanationOfBenefitRelated {
    /**
     * Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
     */
    id?: string;
    /**
     * Contains extension information for property 'id'.
     */
    _id?: Element;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * Reference to a related claim.
     */
    claim?: Reference;
    /**
     * A code to convey how the claims are related.
     */
    relationship?: CodeableConcept;
    /**
     * An alternate organizational reference to the case or file to which this particular claim pertains.
     */
    reference?: Identifier;
}
/**
 * The party to be reimbursed for cost of the products and services according to the terms of the policy.
 */
export interface ExplanationOfBenefitPayee {
    /**
     * Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
     */
    id?: string;
    /**
     * Contains extension information for property 'id'.
     */
    _id?: Element;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * Type of Party to be reimbursed: Subscriber, provider, other.
     */
    type?: CodeableConcept;
    /**
     * Reference to the individual or organization to whom any payment will be made.
     */
    party?: Reference;
}
/**
 * The members of the team who provided the products and services.
 */
export interface ExplanationOfBenefitCareTeam {
    /**
     * Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
     */
    id?: string;
    /**
     * Contains extension information for property 'id'.
     */
    _id?: Element;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * A number to uniquely identify care team entries.
     */
    sequence: positiveInt;
    /**
     * Contains extension information for property 'sequence'.
     */
    _sequence?: Element;
    /**
     * Member of the team who provided the product or service.
     */
    provider: Reference;
    /**
     * The party who is billing and/or responsible for the claimed products or services.
     */
    responsible?: boolean;
    /**
     * Contains extension information for property 'responsible'.
     */
    _responsible?: Element;
    /**
     * The lead, assisting or supervising practitioner and their discipline if a multidisciplinary team.
     */
    role?: CodeableConcept;
    /**
     * The qualification of the practitioner which is applicable for this service.
     */
    qualification?: CodeableConcept;
}
/**
 * Additional information codes regarding exceptions, special considerations, the condition, situation, prior or concurrent issues.
 */
export interface ExplanationOfBenefitSupportingInfo {
    /**
     * Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
     */
    id?: string;
    /**
     * Contains extension information for property 'id'.
     */
    _id?: Element;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * A number to uniquely identify supporting information entries.
     */
    sequence: positiveInt;
    /**
     * Contains extension information for property 'sequence'.
     */
    _sequence?: Element;
    /**
     * The general class of the information supplied: information; exception; accident, employment; onset, etc.
     */
    category: CodeableConcept;
    /**
     * System and code pertaining to the specific information regarding special conditions relating to the setting, treatment or patient  for which care is sought.
     */
    code?: CodeableConcept;
    /**
     * The date when or period to which this information refers.
     */
    timingDate?: date;
    /**
     * Contains extension information for property 'timingDate'.
     */
    _timingDate?: Element;
    /**
     * The date when or period to which this information refers.
     */
    timingPeriod?: Period;
    /**
     * Additional data or information such as resources, documents, images etc. including references to the data or the actual inclusion of the data.
     */
    valueBoolean?: boolean;
    /**
     * Contains extension information for property 'valueBoolean'.
     */
    _valueBoolean?: Element;
    /**
     * Additional data or information such as resources, documents, images etc. including references to the data or the actual inclusion of the data.
     */
    valueString?: string;
    /**
     * Contains extension information for property 'valueString'.
     */
    _valueString?: Element;
    /**
     * Additional data or information such as resources, documents, images etc. including references to the data or the actual inclusion of the data.
     */
    valueQuantity?: Quantity;
    /**
     * Additional data or information such as resources, documents, images etc. including references to the data or the actual inclusion of the data.
     */
    valueAttachment?: Attachment;
    /**
     * Additional data or information such as resources, documents, images etc. including references to the data or the actual inclusion of the data.
     */
    valueReference?: Reference;
    /**
     * Provides the reason in the situation where a reason code is required in addition to the content.
     */
    reason?: Coding;
}
/**
 * Information about diagnoses relevant to the claim items.
 */
export interface ExplanationOfBenefitDiagnosis {
    /**
     * Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
     */
    id?: string;
    /**
     * Contains extension information for property 'id'.
     */
    _id?: Element;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * A number to uniquely identify diagnosis entries.
     */
    sequence: positiveInt;
    /**
     * Contains extension information for property 'sequence'.
     */
    _sequence?: Element;
    /**
     * The nature of illness or problem in a coded form or as a reference to an external defined Condition.
     */
    diagnosisCodeableConcept: CodeableConcept;
    /**
     * The nature of illness or problem in a coded form or as a reference to an external defined Condition.
     */
    diagnosisReference: Reference;
    /**
     * When the condition was observed or the relative ranking.
     */
    type?: CodeableConcept[];
    /**
     * Indication of whether the diagnosis was present on admission to a facility.
     */
    onAdmission?: CodeableConcept;
    /**
     * A package billing code or bundle code used to group products and services to a particular health condition (such as heart attack) which is based on a predetermined grouping code system.
     */
    packageCode?: CodeableConcept;
}
/**
 * Procedures performed on the patient relevant to the billing items with the claim.
 */
export interface ExplanationOfBenefitProcedure {
    /**
     * Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
     */
    id?: string;
    /**
     * Contains extension information for property 'id'.
     */
    _id?: Element;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * A number to uniquely identify procedure entries.
     */
    sequence: positiveInt;
    /**
     * Contains extension information for property 'sequence'.
     */
    _sequence?: Element;
    /**
     * When the condition was observed or the relative ranking.
     */
    type?: CodeableConcept[];
    /**
     * Date and optionally time the procedure was performed.
     */
    date?: dateTime;
    /**
     * Contains extension information for property 'date'.
     */
    _date?: Element;
    /**
     * The code or reference to a Procedure resource which identifies the clinical intervention performed.
     */
    procedureCodeableConcept: CodeableConcept;
    /**
     * The code or reference to a Procedure resource which identifies the clinical intervention performed.
     */
    procedureReference: Reference;
    /**
     * Unique Device Identifiers associated with this line item.
     */
    udi?: Reference[];
}
/**
 * Financial instruments for reimbursement for the health care products and services specified on the claim.
 */
export interface ExplanationOfBenefitInsurance {
    /**
     * Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
     */
    id?: string;
    /**
     * Contains extension information for property 'id'.
     */
    _id?: Element;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * A flag to indicate that this Coverage is to be used for adjudication of this claim when set to true.
     */
    focal: boolean;
    /**
     * Contains extension information for property 'focal'.
     */
    _focal?: Element;
    /**
     * Reference to the insurance card level information contained in the Coverage resource. The coverage issuing insurer will use these details to locate the patient's actual coverage within the insurer's information system.
     */
    coverage: Reference;
    /**
     * Reference numbers previously provided by the insurer to the provider to be quoted on subsequent claims containing services or products related to the prior authorization.
     */
    preAuthRef?: string[];
    /**
     * Contains extension information for property 'preAuthRef'.
     */
    _preAuthRef?: Element[];
}
/**
 * Details of a accident which resulted in injuries which required the products and services listed in the claim.
 */
export interface ExplanationOfBenefitAccident {
    /**
     * Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
     */
    id?: string;
    /**
     * Contains extension information for property 'id'.
     */
    _id?: Element;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * Date of an accident event  related to the products and services contained in the claim.
     */
    date?: date;
    /**
     * Contains extension information for property 'date'.
     */
    _date?: Element;
    /**
     * The type or context of the accident event for the purposes of selection of potential insurance coverages and determination of coordination between insurers.
     */
    type?: CodeableConcept;
    /**
     * The physical location of the accident event.
     */
    locationAddress?: Address;
    /**
     * The physical location of the accident event.
     */
    locationReference?: Reference;
}
/**
 * A claim line. Either a simple (a product or service) or a 'group' of details which can also be a simple items or groups of sub-details.
 */
export interface ExplanationOfBenefitItem {
    /**
     * Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
     */
    id?: string;
    /**
     * Contains extension information for property 'id'.
     */
    _id?: Element;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * A number to uniquely identify item entries.
     */
    sequence: positiveInt;
    /**
     * Contains extension information for property 'sequence'.
     */
    _sequence?: Element;
    /**
     * Care team members related to this service or product.
     */
    careTeamSequence?: positiveInt[];
    /**
     * Contains extension information for property 'careTeamSequence'.
     */
    _careTeamSequence?: Element[];
    /**
     * Diagnoses applicable for this service or product.
     */
    diagnosisSequence?: positiveInt[];
    /**
     * Contains extension information for property 'diagnosisSequence'.
     */
    _diagnosisSequence?: Element[];
    /**
     * Procedures applicable for this service or product.
     */
    procedureSequence?: positiveInt[];
    /**
     * Contains extension information for property 'procedureSequence'.
     */
    _procedureSequence?: Element[];
    /**
     * Exceptions, special conditions and supporting information applicable for this service or product.
     */
    informationSequence?: positiveInt[];
    /**
     * Contains extension information for property 'informationSequence'.
     */
    _informationSequence?: Element[];
    /**
     * The type of revenue or cost center providing the product and/or service.
     */
    revenue?: CodeableConcept;
    /**
     * Code to identify the general type of benefits under which products and services are provided.
     */
    category?: CodeableConcept;
    /**
     * When the value is a group code then this item collects a set of related claim details, otherwise this contains the product, service, drug or other billing code for the item.
     */
    productOrService: CodeableConcept;
    /**
     * Item typification or modifiers codes to convey additional context for the product or service.
     */
    modifier?: CodeableConcept[];
    /**
     * Identifies the program under which this may be recovered.
     */
    programCode?: CodeableConcept[];
    /**
     * The date or dates when the service or product was supplied, performed or completed.
     */
    servicedDate?: date;
    /**
     * Contains extension information for property 'servicedDate'.
     */
    _servicedDate?: Element;
    /**
     * The date or dates when the service or product was supplied, performed or completed.
     */
    servicedPeriod?: Period;
    /**
     * Where the product or service was provided.
     */
    locationCodeableConcept?: CodeableConcept;
    /**
     * Where the product or service was provided.
     */
    locationAddress?: Address;
    /**
     * Where the product or service was provided.
     */
    locationReference?: Reference;
    /**
     * The number of repetitions of a service or product.
     */
    quantity?: Quantity;
    /**
     * If the item is not a group then this is the fee for the product or service, otherwise this is the total of the fees for the details of the group.
     */
    unitPrice?: Money;
    /**
     * A real number that represents a multiplier used in determining the overall value of services delivered and/or goods received. The concept of a Factor allows for a discount or surcharge multiplier to be applied to a monetary amount.
     */
    factor?: decimal;
    /**
     * Contains extension information for property 'factor'.
     */
    _factor?: Element;
    /**
     * The quantity times the unit price for an additional service or product or charge.
     */
    net?: Money;
    /**
     * Unique Device Identifiers associated with this line item.
     */
    udi?: Reference[];
    /**
     * Physical service site on the patient (limb, tooth, etc.).
     */
    bodySite?: CodeableConcept;
    /**
     * A region or surface of the bodySite, e.g. limb region or tooth surface(s).
     */
    subSite?: CodeableConcept[];
    /**
     * A billed item may include goods or services provided in multiple encounters.
     */
    encounter?: Reference[];
    /**
     * The numbers associated with notes below which apply to the adjudication of this item.
     */
    noteNumber?: positiveInt[];
    /**
     * Contains extension information for property 'noteNumber'.
     */
    _noteNumber?: Element[];
    /**
     * If this item is a group then the values here are a summary of the adjudication of the detail items. If this item is a simple product or service then this is the result of the adjudication of this item.
     */
    adjudication?: ExplanationOfBenefitItemAdjudication[];
    /**
     * Second-tier of goods and services.
     */
    detail?: ExplanationOfBenefitItemDetail[];
}
/**
 * If this item is a group then the values here are a summary of the adjudication of the detail items. If this item is a simple product or service then this is the result of the adjudication of this item.
 */
export interface ExplanationOfBenefitItemAdjudication {
    /**
     * Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
     */
    id?: string;
    /**
     * Contains extension information for property 'id'.
     */
    _id?: Element;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * A code to indicate the information type of this adjudication record. Information types may include: the value submitted, maximum values or percentages allowed or payable under the plan, amounts that the patient is responsible for in-aggregate or pertaining to this item, amounts paid by other coverages, and the benefit payable for this item.
     */
    category: CodeableConcept;
    /**
     * A code supporting the understanding of the adjudication result and explaining variance from expected amount.
     */
    reason?: CodeableConcept;
    /**
     * Monetary amount associated with the category.
     */
    amount?: Money;
    /**
     * A non-monetary value associated with the category. Mutually exclusive to the amount element above.
     */
    value?: decimal;
    /**
     * Contains extension information for property 'value'.
     */
    _value?: Element;
}
/**
 * Second-tier of goods and services.
 */
export interface ExplanationOfBenefitItemDetail {
    /**
     * Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
     */
    id?: string;
    /**
     * Contains extension information for property 'id'.
     */
    _id?: Element;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * A claim detail line. Either a simple (a product or service) or a 'group' of sub-details which are simple items.
     */
    sequence: positiveInt;
    /**
     * Contains extension information for property 'sequence'.
     */
    _sequence?: Element;
    /**
     * The type of revenue or cost center providing the product and/or service.
     */
    revenue?: CodeableConcept;
    /**
     * Code to identify the general type of benefits under which products and services are provided.
     */
    category?: CodeableConcept;
    /**
     * When the value is a group code then this item collects a set of related claim details, otherwise this contains the product, service, drug or other billing code for the item.
     */
    productOrService: CodeableConcept;
    /**
     * Item typification or modifiers codes to convey additional context for the product or service.
     */
    modifier?: CodeableConcept[];
    /**
     * Identifies the program under which this may be recovered.
     */
    programCode?: CodeableConcept[];
    /**
     * The number of repetitions of a service or product.
     */
    quantity?: Quantity;
    /**
     * If the item is not a group then this is the fee for the product or service, otherwise this is the total of the fees for the details of the group.
     */
    unitPrice?: Money;
    /**
     * A real number that represents a multiplier used in determining the overall value of services delivered and/or goods received. The concept of a Factor allows for a discount or surcharge multiplier to be applied to a monetary amount.
     */
    factor?: decimal;
    /**
     * Contains extension information for property 'factor'.
     */
    _factor?: Element;
    /**
     * The quantity times the unit price for an additional service or product or charge.
     */
    net?: Money;
    /**
     * Unique Device Identifiers associated with this line item.
     */
    udi?: Reference[];
    /**
     * The numbers associated with notes below which apply to the adjudication of this item.
     */
    noteNumber?: positiveInt[];
    /**
     * Contains extension information for property 'noteNumber'.
     */
    _noteNumber?: Element[];
    /**
     * The adjudication results.
     */
    adjudication?: ExplanationOfBenefitItemAdjudication[];
    /**
     * Third-tier of goods and services.
     */
    subDetail?: ExplanationOfBenefitItemDetailSubDetail[];
}
/**
 * Third-tier of goods and services.
 */
export interface ExplanationOfBenefitItemDetailSubDetail {
    /**
     * Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
     */
    id?: string;
    /**
     * Contains extension information for property 'id'.
     */
    _id?: Element;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * A claim detail line. Either a simple (a product or service) or a 'group' of sub-details which are simple items.
     */
    sequence: positiveInt;
    /**
     * Contains extension information for property 'sequence'.
     */
    _sequence?: Element;
    /**
     * The type of revenue or cost center providing the product and/or service.
     */
    revenue?: CodeableConcept;
    /**
     * Code to identify the general type of benefits under which products and services are provided.
     */
    category?: CodeableConcept;
    /**
     * When the value is a group code then this item collects a set of related claim details, otherwise this contains the product, service, drug or other billing code for the item.
     */
    productOrService: CodeableConcept;
    /**
     * Item typification or modifiers codes to convey additional context for the product or service.
     */
    modifier?: CodeableConcept[];
    /**
     * Identifies the program under which this may be recovered.
     */
    programCode?: CodeableConcept[];
    /**
     * The number of repetitions of a service or product.
     */
    quantity?: Quantity;
    /**
     * If the item is not a group then this is the fee for the product or service, otherwise this is the total of the fees for the details of the group.
     */
    unitPrice?: Money;
    /**
     * A real number that represents a multiplier used in determining the overall value of services delivered and/or goods received. The concept of a Factor allows for a discount or surcharge multiplier to be applied to a monetary amount.
     */
    factor?: decimal;
    /**
     * Contains extension information for property 'factor'.
     */
    _factor?: Element;
    /**
     * The quantity times the unit price for an additional service or product or charge.
     */
    net?: Money;
    /**
     * Unique Device Identifiers associated with this line item.
     */
    udi?: Reference[];
    /**
     * The numbers associated with notes below which apply to the adjudication of this item.
     */
    noteNumber?: positiveInt[];
    /**
     * Contains extension information for property 'noteNumber'.
     */
    _noteNumber?: Element[];
    /**
     * The adjudication results.
     */
    adjudication?: ExplanationOfBenefitItemAdjudication[];
}
/**
 * The first-tier service adjudications for payor added product or service lines.
 */
export interface ExplanationOfBenefitAddItem {
    /**
     * Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
     */
    id?: string;
    /**
     * Contains extension information for property 'id'.
     */
    _id?: Element;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * Claim items which this service line is intended to replace.
     */
    itemSequence?: positiveInt[];
    /**
     * Contains extension information for property 'itemSequence'.
     */
    _itemSequence?: Element[];
    /**
     * The sequence number of the details within the claim item which this line is intended to replace.
     */
    detailSequence?: positiveInt[];
    /**
     * Contains extension information for property 'detailSequence'.
     */
    _detailSequence?: Element[];
    /**
     * The sequence number of the sub-details woithin the details within the claim item which this line is intended to replace.
     */
    subDetailSequence?: positiveInt[];
    /**
     * Contains extension information for property 'subDetailSequence'.
     */
    _subDetailSequence?: Element[];
    /**
     * The providers who are authorized for the services rendered to the patient.
     */
    provider?: Reference[];
    /**
     * When the value is a group code then this item collects a set of related claim details, otherwise this contains the product, service, drug or other billing code for the item.
     */
    productOrService: CodeableConcept;
    /**
     * Item typification or modifiers codes to convey additional context for the product or service.
     */
    modifier?: CodeableConcept[];
    /**
     * Identifies the program under which this may be recovered.
     */
    programCode?: CodeableConcept[];
    /**
     * The date or dates when the service or product was supplied, performed or completed.
     */
    servicedDate?: date;
    /**
     * Contains extension information for property 'servicedDate'.
     */
    _servicedDate?: Element;
    /**
     * The date or dates when the service or product was supplied, performed or completed.
     */
    servicedPeriod?: Period;
    /**
     * Where the product or service was provided.
     */
    locationCodeableConcept?: CodeableConcept;
    /**
     * Where the product or service was provided.
     */
    locationAddress?: Address;
    /**
     * Where the product or service was provided.
     */
    locationReference?: Reference;
    /**
     * The number of repetitions of a service or product.
     */
    quantity?: Quantity;
    /**
     * If the item is not a group then this is the fee for the product or service, otherwise this is the total of the fees for the details of the group.
     */
    unitPrice?: Money;
    /**
     * A real number that represents a multiplier used in determining the overall value of services delivered and/or goods received. The concept of a Factor allows for a discount or surcharge multiplier to be applied to a monetary amount.
     */
    factor?: decimal;
    /**
     * Contains extension information for property 'factor'.
     */
    _factor?: Element;
    /**
     * The quantity times the unit price for an additional service or product or charge.
     */
    net?: Money;
    /**
     * Physical service site on the patient (limb, tooth, etc.).
     */
    bodySite?: CodeableConcept;
    /**
     * A region or surface of the bodySite, e.g. limb region or tooth surface(s).
     */
    subSite?: CodeableConcept[];
    /**
     * The numbers associated with notes below which apply to the adjudication of this item.
     */
    noteNumber?: positiveInt[];
    /**
     * Contains extension information for property 'noteNumber'.
     */
    _noteNumber?: Element[];
    /**
     * The adjudication results.
     */
    adjudication?: ExplanationOfBenefitItemAdjudication[];
    /**
     * The second-tier service adjudications for payor added services.
     */
    detail?: ExplanationOfBenefitAddItemDetail[];
}
/**
 * The second-tier service adjudications for payor added services.
 */
export interface ExplanationOfBenefitAddItemDetail {
    /**
     * Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
     */
    id?: string;
    /**
     * Contains extension information for property 'id'.
     */
    _id?: Element;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * When the value is a group code then this item collects a set of related claim details, otherwise this contains the product, service, drug or other billing code for the item.
     */
    productOrService: CodeableConcept;
    /**
     * Item typification or modifiers codes to convey additional context for the product or service.
     */
    modifier?: CodeableConcept[];
    /**
     * The number of repetitions of a service or product.
     */
    quantity?: Quantity;
    /**
     * If the item is not a group then this is the fee for the product or service, otherwise this is the total of the fees for the details of the group.
     */
    unitPrice?: Money;
    /**
     * A real number that represents a multiplier used in determining the overall value of services delivered and/or goods received. The concept of a Factor allows for a discount or surcharge multiplier to be applied to a monetary amount.
     */
    factor?: decimal;
    /**
     * Contains extension information for property 'factor'.
     */
    _factor?: Element;
    /**
     * The quantity times the unit price for an additional service or product or charge.
     */
    net?: Money;
    /**
     * The numbers associated with notes below which apply to the adjudication of this item.
     */
    noteNumber?: positiveInt[];
    /**
     * Contains extension information for property 'noteNumber'.
     */
    _noteNumber?: Element[];
    /**
     * The adjudication results.
     */
    adjudication?: ExplanationOfBenefitItemAdjudication[];
    /**
     * The third-tier service adjudications for payor added services.
     */
    subDetail?: ExplanationOfBenefitAddItemDetailSubDetail[];
}
/**
 * The third-tier service adjudications for payor added services.
 */
export interface ExplanationOfBenefitAddItemDetailSubDetail {
    /**
     * Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
     */
    id?: string;
    /**
     * Contains extension information for property 'id'.
     */
    _id?: Element;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * When the value is a group code then this item collects a set of related claim details, otherwise this contains the product, service, drug or other billing code for the item.
     */
    productOrService: CodeableConcept;
    /**
     * Item typification or modifiers codes to convey additional context for the product or service.
     */
    modifier?: CodeableConcept[];
    /**
     * The number of repetitions of a service or product.
     */
    quantity?: Quantity;
    /**
     * If the item is not a group then this is the fee for the product or service, otherwise this is the total of the fees for the details of the group.
     */
    unitPrice?: Money;
    /**
     * A real number that represents a multiplier used in determining the overall value of services delivered and/or goods received. The concept of a Factor allows for a discount or surcharge multiplier to be applied to a monetary amount.
     */
    factor?: decimal;
    /**
     * Contains extension information for property 'factor'.
     */
    _factor?: Element;
    /**
     * The quantity times the unit price for an additional service or product or charge.
     */
    net?: Money;
    /**
     * The numbers associated with notes below which apply to the adjudication of this item.
     */
    noteNumber?: positiveInt[];
    /**
     * Contains extension information for property 'noteNumber'.
     */
    _noteNumber?: Element[];
    /**
     * The adjudication results.
     */
    adjudication?: ExplanationOfBenefitItemAdjudication[];
}
/**
 * Categorized monetary totals for the adjudication.
 */
export interface ExplanationOfBenefitTotal {
    /**
     * Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
     */
    id?: string;
    /**
     * Contains extension information for property 'id'.
     */
    _id?: Element;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * A code to indicate the information type of this adjudication record. Information types may include: the value submitted, maximum values or percentages allowed or payable under the plan, amounts that the patient is responsible for in aggregate or pertaining to this item, amounts paid by other coverages, and the benefit payable for this item.
     */
    category: CodeableConcept;
    /**
     * Monetary total amount associated with the category.
     */
    amount: Money;
}
/**
 * Payment details for the adjudication of the claim.
 */
export interface ExplanationOfBenefitPayment {
    /**
     * Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
     */
    id?: string;
    /**
     * Contains extension information for property 'id'.
     */
    _id?: Element;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * Whether this represents partial or complete payment of the benefits payable.
     */
    type?: CodeableConcept;
    /**
     * Total amount of all adjustments to this payment included in this transaction which are not related to this claim's adjudication.
     */
    adjustment?: Money;
    /**
     * Reason for the payment adjustment.
     */
    adjustmentReason?: CodeableConcept;
    /**
     * Estimated date the payment will be issued or the actual issue date of payment.
     */
    date?: date;
    /**
     * Contains extension information for property 'date'.
     */
    _date?: Element;
    /**
     * Benefits payable less any payment adjustment.
     */
    amount?: Money;
    /**
     * Issuer's unique identifier for the payment instrument.
     */
    identifier?: Identifier;
}
/**
 * A note that describes or explains adjudication results in a human readable form.
 */
export interface ExplanationOfBenefitProcessNote {
    /**
     * Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
     */
    id?: string;
    /**
     * Contains extension information for property 'id'.
     */
    _id?: Element;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * A number to uniquely identify a note entry.
     */
    number?: positiveInt;
    /**
     * Contains extension information for property 'number'.
     */
    _number?: Element;
    /**
     * The business purpose of the note text.
     */
    type?: code;
    /**
     * Contains extension information for property 'type'.
     */
    _type?: Element;
    /**
     * The explanation or description associated with the processing.
     */
    text?: string;
    /**
     * Contains extension information for property 'text'.
     */
    _text?: Element;
    /**
     * A code to define the language used in the text of the note.
     */
    language?: CodeableConcept;
}
/**
 * Balance by Benefit Category.
 */
export interface ExplanationOfBenefitBenefitBalance {
    /**
     * Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
     */
    id?: string;
    /**
     * Contains extension information for property 'id'.
     */
    _id?: Element;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * Code to identify the general type of benefits under which products and services are provided.
     */
    category: CodeableConcept;
    /**
     * True if the indicated class of service is excluded from the plan, missing or False indicates the product or service is included in the coverage.
     */
    excluded?: boolean;
    /**
     * Contains extension information for property 'excluded'.
     */
    _excluded?: Element;
    /**
     * A short name or tag for the benefit.
     */
    name?: string;
    /**
     * Contains extension information for property 'name'.
     */
    _name?: Element;
    /**
     * A richer description of the benefit or services covered.
     */
    description?: string;
    /**
     * Contains extension information for property 'description'.
     */
    _description?: Element;
    /**
     * Is a flag to indicate whether the benefits refer to in-network providers or out-of-network providers.
     */
    network?: CodeableConcept;
    /**
     * Indicates if the benefits apply to an individual or to the family.
     */
    unit?: CodeableConcept;
    /**
     * The term or period of the values such as 'maximum lifetime benefit' or 'maximum annual visits'.
     */
    term?: CodeableConcept;
    /**
     * Benefits Used to date.
     */
    financial?: ExplanationOfBenefitBenefitBalanceFinancial[];
}
/**
 * Benefits Used to date.
 */
export interface ExplanationOfBenefitBenefitBalanceFinancial {
    /**
     * Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
     */
    id?: string;
    /**
     * Contains extension information for property 'id'.
     */
    _id?: Element;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * Classification of benefit being provided.
     */
    type: CodeableConcept;
    /**
     * The quantity of the benefit which is permitted under the coverage.
     */
    allowedUnsignedInt?: unsignedInt;
    /**
     * Contains extension information for property 'allowedUnsignedInt'.
     */
    _allowedUnsignedInt?: Element;
    /**
     * The quantity of the benefit which is permitted under the coverage.
     */
    allowedString?: string;
    /**
     * Contains extension information for property 'allowedString'.
     */
    _allowedString?: Element;
    /**
     * The quantity of the benefit which is permitted under the coverage.
     */
    allowedMoney?: Money;
    /**
     * The quantity of the benefit which have been consumed to date.
     */
    usedUnsignedInt?: unsignedInt;
    /**
     * Contains extension information for property 'usedUnsignedInt'.
     */
    _usedUnsignedInt?: Element;
    /**
     * The quantity of the benefit which have been consumed to date.
     */
    usedMoney?: Money;
}
/**
 * A expression that is evaluated in a specified context and returns a value. The context of use of the expression must specify the context in which the expression is evaluated, and how the result of the expression is used.
 */
export interface Expression {
    /**
     * Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
     */
    id?: string;
    /**
     * Contains extension information for property 'id'.
     */
    _id?: Element;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * A brief, natural language description of the condition that effectively communicates the intended semantics.
     */
    description?: string;
    /**
     * Contains extension information for property 'description'.
     */
    _description?: Element;
    /**
     * A short name assigned to the expression to allow for multiple reuse of the expression in the context where it is defined.
     */
    name?: id;
    /**
     * Contains extension information for property 'name'.
     */
    _name?: Element;
    /**
     * The media type of the language for the expression.
     */
    language: code;
    /**
     * Contains extension information for property 'language'.
     */
    _language?: Element;
    /**
     * An expression in the specified language that returns a value.
     */
    expression?: string;
    /**
     * Contains extension information for property 'expression'.
     */
    _expression?: Element;
    /**
     * A URI that defines where the expression is found.
     */
    reference?: uri;
    /**
     * Contains extension information for property 'reference'.
     */
    _reference?: Element;
}
/**
 * Optional Extension Element - found in all resources.
 */
export interface Extension {
    /**
     * Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
     */
    id?: string;
    /**
     * Contains extension information for property 'id'.
     */
    _id?: Element;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * Source of the definition for the extension code - a logical name or a URL.
     */
    url: undefined;
    /**
     * Value of extension - must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list).
     */
    valueBase64Binary?: base64Binary;
    /**
     * Contains extension information for property 'valueBase64Binary'.
     */
    _valueBase64Binary?: Element;
    /**
     * Value of extension - must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list).
     */
    valueBoolean?: boolean;
    /**
     * Contains extension information for property 'valueBoolean'.
     */
    _valueBoolean?: Element;
    /**
     * Value of extension - must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list).
     */
    valueCanonical?: canonical;
    /**
     * Value of extension - must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list).
     */
    valueCode?: code;
    /**
     * Contains extension information for property 'valueCode'.
     */
    _valueCode?: Element;
    /**
     * Value of extension - must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list).
     */
    valueDate?: date;
    /**
     * Contains extension information for property 'valueDate'.
     */
    _valueDate?: Element;
    /**
     * Value of extension - must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list).
     */
    valueDateTime?: dateTime;
    /**
     * Contains extension information for property 'valueDateTime'.
     */
    _valueDateTime?: Element;
    /**
     * Value of extension - must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list).
     */
    valueDecimal?: decimal;
    /**
     * Contains extension information for property 'valueDecimal'.
     */
    _valueDecimal?: Element;
    /**
     * Value of extension - must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list).
     */
    valueId?: id;
    /**
     * Contains extension information for property 'valueId'.
     */
    _valueId?: Element;
    /**
     * Value of extension - must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list).
     */
    valueInstant?: instant;
    /**
     * Contains extension information for property 'valueInstant'.
     */
    _valueInstant?: Element;
    /**
     * Value of extension - must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list).
     */
    valueInteger?: integer;
    /**
     * Contains extension information for property 'valueInteger'.
     */
    _valueInteger?: Element;
    /**
     * Value of extension - must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list).
     */
    valueMarkdown?: markdown;
    /**
     * Contains extension information for property 'valueMarkdown'.
     */
    _valueMarkdown?: Element;
    /**
     * Value of extension - must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list).
     */
    valueOid?: oid;
    /**
     * Contains extension information for property 'valueOid'.
     */
    _valueOid?: Element;
    /**
     * Value of extension - must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list).
     */
    valuePositiveInt?: positiveInt;
    /**
     * Contains extension information for property 'valuePositiveInt'.
     */
    _valuePositiveInt?: Element;
    /**
     * Value of extension - must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list).
     */
    valueString?: string;
    /**
     * Contains extension information for property 'valueString'.
     */
    _valueString?: Element;
    /**
     * Value of extension - must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list).
     */
    valueTime?: time;
    /**
     * Contains extension information for property 'valueTime'.
     */
    _valueTime?: Element;
    /**
     * Value of extension - must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list).
     */
    valueUnsignedInt?: unsignedInt;
    /**
     * Contains extension information for property 'valueUnsignedInt'.
     */
    _valueUnsignedInt?: Element;
    /**
     * Value of extension - must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list).
     */
    valueUri?: uri;
    /**
     * Contains extension information for property 'valueUri'.
     */
    _valueUri?: Element;
    /**
     * Value of extension - must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list).
     */
    valueUrl?: url;
    /**
     * Value of extension - must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list).
     */
    valueUuid?: uuid;
    /**
     * Value of extension - must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list).
     */
    valueAddress?: Address;
    /**
     * Value of extension - must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list).
     */
    valueAge?: Age;
    /**
     * Value of extension - must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list).
     */
    valueAnnotation?: Annotation;
    /**
     * Value of extension - must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list).
     */
    valueAttachment?: Attachment;
    /**
     * Value of extension - must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list).
     */
    valueCodeableConcept?: CodeableConcept;
    /**
     * Value of extension - must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list).
     */
    valueCoding?: Coding;
    /**
     * Value of extension - must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list).
     */
    valueContactPoint?: ContactPoint;
    /**
     * Value of extension - must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list).
     */
    valueCount?: Count;
    /**
     * Value of extension - must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list).
     */
    valueDistance?: Distance;
    /**
     * Value of extension - must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list).
     */
    valueDuration?: Duration;
    /**
     * Value of extension - must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list).
     */
    valueHumanName?: HumanName;
    /**
     * Value of extension - must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list).
     */
    valueIdentifier?: Identifier;
    /**
     * Value of extension - must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list).
     */
    valueMoney?: Money;
    /**
     * Value of extension - must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list).
     */
    valuePeriod?: Period;
    /**
     * Value of extension - must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list).
     */
    valueQuantity?: Quantity;
    /**
     * Value of extension - must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list).
     */
    valueRange?: Range;
    /**
     * Value of extension - must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list).
     */
    valueRatio?: Ratio;
    /**
     * Value of extension - must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list).
     */
    valueReference?: Reference;
    /**
     * Value of extension - must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list).
     */
    valueSampledData?: SampledData;
    /**
     * Value of extension - must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list).
     */
    valueSignature?: Signature;
    /**
     * Value of extension - must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list).
     */
    valueTiming?: Timing;
    /**
     * Value of extension - must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list).
     */
    valueContactDetail?: ContactDetail;
    /**
     * Value of extension - must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list).
     */
    valueContributor?: Contributor;
    /**
     * Value of extension - must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list).
     */
    valueDataRequirement?: DataRequirement;
    /**
     * Value of extension - must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list).
     */
    valueExpression?: Expression;
    /**
     * Value of extension - must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list).
     */
    valueParameterDefinition?: ParameterDefinition;
    /**
     * Value of extension - must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list).
     */
    valueRelatedArtifact?: RelatedArtifact;
    /**
     * Value of extension - must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list).
     */
    valueTriggerDefinition?: TriggerDefinition;
    /**
     * Value of extension - must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list).
     */
    valueUsageContext?: UsageContext;
    /**
     * Value of extension - must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list).
     */
    valueDosage?: Dosage;
}
/**
 * Significant health conditions for a person related to the patient relevant in the context of care for the patient.
 */
export interface FamilyMemberHistory {
    /**
     * The type of the resource.
     */
    resourceType: string;
    /**
     * The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes.
     */
    id?: id;
    /**
     * Contains extension information for property 'id'.
     */
    _id?: Element;
    /**
     * The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource.
     */
    meta?: Meta;
    /**
     * A reference to a set of rules that were followed when the resource was constructed, and which must be understood when processing the content. Often, this is a reference to an implementation guide that defines the special rules along with other profiles etc.
     */
    implicitRules?: uri;
    /**
     * Contains extension information for property 'implicitRules'.
     */
    _implicitRules?: Element;
    /**
     * The base language in which the resource is written.
     */
    language?: code;
    /**
     * Contains extension information for property 'language'.
     */
    _language?: Element;
    /**
     * A human-readable narrative that contains a summary of the resource and can be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it "clinically safe" for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety.
     */
    text?: Narrative;
    /**
     * These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, and nor can they have their own independent transaction scope.
     */
    contained?: Resource[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * Business identifiers assigned to this family member history by the performer or other systems which remain constant as the resource is updated and propagates from server to server.
     */
    identifier?: Identifier[];
    /**
     * The URL pointing to a FHIR-defined protocol, guideline, orderset or other definition that is adhered to in whole or in part by this FamilyMemberHistory.
     */
    instantiatesCanonical?: canonical[];
    /**
     * The URL pointing to an externally maintained protocol, guideline, orderset or other definition that is adhered to in whole or in part by this FamilyMemberHistory.
     */
    instantiatesUri?: uri[];
    /**
     * Contains extension information for property 'instantiatesUri'.
     */
    _instantiatesUri?: Element[];
    /**
     * A code specifying the status of the record of the family history of a specific family member.
     */
    status: code;
    /**
     * Contains extension information for property 'status'.
     */
    _status?: Element;
    /**
     * Describes why the family member's history is not available.
     */
    dataAbsentReason?: CodeableConcept;
    /**
     * The person who this history concerns.
     */
    patient: Reference;
    /**
     * The date (and possibly time) when the family member history was recorded or last updated.
     */
    date?: dateTime;
    /**
     * Contains extension information for property 'date'.
     */
    _date?: Element;
    /**
     * This will either be a name or a description; e.g. "Aunt Susan", "my cousin with the red hair".
     */
    name?: string;
    /**
     * Contains extension information for property 'name'.
     */
    _name?: Element;
    /**
     * The type of relationship this person has to the patient (father, mother, brother etc.).
     */
    relationship: CodeableConcept;
    /**
     * The birth sex of the family member.
     */
    sex?: CodeableConcept;
    /**
     * The actual or approximate date of birth of the relative.
     */
    bornPeriod?: Period;
    /**
     * The actual or approximate date of birth of the relative.
     */
    bornDate?: date;
    /**
     * Contains extension information for property 'bornDate'.
     */
    _bornDate?: Element;
    /**
     * The actual or approximate date of birth of the relative.
     */
    bornString?: string;
    /**
     * Contains extension information for property 'bornString'.
     */
    _bornString?: Element;
    /**
     * The age of the relative at the time the family member history is recorded.
     */
    ageAge?: Age;
    /**
     * The age of the relative at the time the family member history is recorded.
     */
    ageRange?: Range;
    /**
     * The age of the relative at the time the family member history is recorded.
     */
    ageString?: string;
    /**
     * Contains extension information for property 'ageString'.
     */
    _ageString?: Element;
    /**
     * If true, indicates that the age value specified is an estimated value.
     */
    estimatedAge?: boolean;
    /**
     * Contains extension information for property 'estimatedAge'.
     */
    _estimatedAge?: Element;
    /**
     * Deceased flag or the actual or approximate age of the relative at the time of death for the family member history record.
     */
    deceasedBoolean?: boolean;
    /**
     * Contains extension information for property 'deceasedBoolean'.
     */
    _deceasedBoolean?: Element;
    /**
     * Deceased flag or the actual or approximate age of the relative at the time of death for the family member history record.
     */
    deceasedAge?: Age;
    /**
     * Deceased flag or the actual or approximate age of the relative at the time of death for the family member history record.
     */
    deceasedRange?: Range;
    /**
     * Deceased flag or the actual or approximate age of the relative at the time of death for the family member history record.
     */
    deceasedDate?: date;
    /**
     * Contains extension information for property 'deceasedDate'.
     */
    _deceasedDate?: Element;
    /**
     * Deceased flag or the actual or approximate age of the relative at the time of death for the family member history record.
     */
    deceasedString?: string;
    /**
     * Contains extension information for property 'deceasedString'.
     */
    _deceasedString?: Element;
    /**
     * Describes why the family member history occurred in coded or textual form.
     */
    reasonCode?: CodeableConcept[];
    /**
     * Indicates a Condition, Observation, AllergyIntolerance, or QuestionnaireResponse that justifies this family member history event.
     */
    reasonReference?: Reference[];
    /**
     * This property allows a non condition-specific note to the made about the related person. Ideally, the note would be in the condition property, but this is not always possible.
     */
    note?: Annotation[];
    /**
     * The significant Conditions (or condition) that the family member had. This is a repeating section to allow a system to represent more than one condition per resource, though there is nothing stopping multiple resources - one per condition.
     */
    condition?: FamilyMemberHistoryCondition[];
}
/**
 * The significant Conditions (or condition) that the family member had. This is a repeating section to allow a system to represent more than one condition per resource, though there is nothing stopping multiple resources - one per condition.
 */
export interface FamilyMemberHistoryCondition {
    /**
     * Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
     */
    id?: string;
    /**
     * Contains extension information for property 'id'.
     */
    _id?: Element;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * The actual condition specified. Could be a coded condition (like MI or Diabetes) or a less specific string like 'cancer' depending on how much is known about the condition and the capabilities of the creating system.
     */
    code: CodeableConcept;
    /**
     * Indicates what happened following the condition.  If the condition resulted in death, deceased date is captured on the relation.
     */
    outcome?: CodeableConcept;
    /**
     * This condition contributed to the cause of death of the related person. If contributedToDeath is not populated, then it is unknown.
     */
    contributedToDeath?: boolean;
    /**
     * Contains extension information for property 'contributedToDeath'.
     */
    _contributedToDeath?: Element;
    /**
     * Either the age of onset, range of approximate age or descriptive string can be recorded.  For conditions with multiple occurrences, this describes the first known occurrence.
     */
    onsetAge?: Age;
    /**
     * Either the age of onset, range of approximate age or descriptive string can be recorded.  For conditions with multiple occurrences, this describes the first known occurrence.
     */
    onsetRange?: Range;
    /**
     * Either the age of onset, range of approximate age or descriptive string can be recorded.  For conditions with multiple occurrences, this describes the first known occurrence.
     */
    onsetPeriod?: Period;
    /**
     * Either the age of onset, range of approximate age or descriptive string can be recorded.  For conditions with multiple occurrences, this describes the first known occurrence.
     */
    onsetString?: string;
    /**
     * Contains extension information for property 'onsetString'.
     */
    _onsetString?: Element;
    /**
     * An area where general notes can be placed about this specific condition.
     */
    note?: Annotation[];
}
/**
 * Prospective warnings of potential issues when providing care to the patient.
 */
export interface Flag {
    /**
     * The type of the resource.
     */
    resourceType: string;
    /**
     * The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes.
     */
    id?: id;
    /**
     * Contains extension information for property 'id'.
     */
    _id?: Element;
    /**
     * The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource.
     */
    meta?: Meta;
    /**
     * A reference to a set of rules that were followed when the resource was constructed, and which must be understood when processing the content. Often, this is a reference to an implementation guide that defines the special rules along with other profiles etc.
     */
    implicitRules?: uri;
    /**
     * Contains extension information for property 'implicitRules'.
     */
    _implicitRules?: Element;
    /**
     * The base language in which the resource is written.
     */
    language?: code;
    /**
     * Contains extension information for property 'language'.
     */
    _language?: Element;
    /**
     * A human-readable narrative that contains a summary of the resource and can be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it "clinically safe" for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety.
     */
    text?: Narrative;
    /**
     * These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, and nor can they have their own independent transaction scope.
     */
    contained?: Resource[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * Business identifiers assigned to this flag by the performer or other systems which remain constant as the resource is updated and propagates from server to server.
     */
    identifier?: Identifier[];
    /**
     * Supports basic workflow.
     */
    status: code;
    /**
     * Contains extension information for property 'status'.
     */
    _status?: Element;
    /**
     * Allows a flag to be divided into different categories like clinical, administrative etc. Intended to be used as a means of filtering which flags are displayed to particular user or in a given context.
     */
    category?: CodeableConcept[];
    /**
     * The coded value or textual component of the flag to display to the user.
     */
    code: CodeableConcept;
    /**
     * The patient, location, group, organization, or practitioner etc. this is about record this flag is associated with.
     */
    subject: Reference;
    /**
     * The period of time from the activation of the flag to inactivation of the flag. If the flag is active, the end of the period should be unspecified.
     */
    period?: Period;
    /**
     * This alert is only relevant during the encounter.
     */
    encounter?: Reference;
    /**
     * The person, organization or device that created the flag.
     */
    author?: Reference;
}
/**
 * Describes the intended objective(s) for a patient, group or organization care, for example, weight loss, restoring an activity of daily living, obtaining herd immunity via immunization, meeting a process improvement objective, etc.
 */
export interface Goal {
    /**
     * The type of the resource.
     */
    resourceType: string;
    /**
     * The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes.
     */
    id?: id;
    /**
     * Contains extension information for property 'id'.
     */
    _id?: Element;
    /**
     * The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource.
     */
    meta?: Meta;
    /**
     * A reference to a set of rules that were followed when the resource was constructed, and which must be understood when processing the content. Often, this is a reference to an implementation guide that defines the special rules along with other profiles etc.
     */
    implicitRules?: uri;
    /**
     * Contains extension information for property 'implicitRules'.
     */
    _implicitRules?: Element;
    /**
     * The base language in which the resource is written.
     */
    language?: code;
    /**
     * Contains extension information for property 'language'.
     */
    _language?: Element;
    /**
     * A human-readable narrative that contains a summary of the resource and can be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it "clinically safe" for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety.
     */
    text?: Narrative;
    /**
     * These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, and nor can they have their own independent transaction scope.
     */
    contained?: Resource[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * Business identifiers assigned to this goal by the performer or other systems which remain constant as the resource is updated and propagates from server to server.
     */
    identifier?: Identifier[];
    /**
     * The state of the goal throughout its lifecycle.
     */
    lifecycleStatus: code;
    /**
     * Contains extension information for property 'lifecycleStatus'.
     */
    _lifecycleStatus?: Element;
    /**
     * Describes the progression, or lack thereof, towards the goal against the target.
     */
    achievementStatus?: CodeableConcept;
    /**
     * Indicates a category the goal falls within.
     */
    category?: CodeableConcept[];
    /**
     * Identifies the mutually agreed level of importance associated with reaching/sustaining the goal.
     */
    priority?: CodeableConcept;
    /**
     * Human-readable and/or coded description of a specific desired objective of care, such as "control blood pressure" or "negotiate an obstacle course" or "dance with child at wedding".
     */
    description: CodeableConcept;
    /**
     * Identifies the patient, group or organization for whom the goal is being established.
     */
    subject: Reference;
    /**
     * The date or event after which the goal should begin being pursued.
     */
    startDate?: date;
    /**
     * Contains extension information for property 'startDate'.
     */
    _startDate?: Element;
    /**
     * The date or event after which the goal should begin being pursued.
     */
    startCodeableConcept?: CodeableConcept;
    /**
     * Indicates what should be done by when.
     */
    target?: GoalTarget[];
    /**
     * Identifies when the current status.  I.e. When initially created, when achieved, when cancelled, etc.
     */
    statusDate?: date;
    /**
     * Contains extension information for property 'statusDate'.
     */
    _statusDate?: Element;
    /**
     * Captures the reason for the current status.
     */
    statusReason?: string;
    /**
     * Contains extension information for property 'statusReason'.
     */
    _statusReason?: Element;
    /**
     * Indicates whose goal this is - patient goal, practitioner goal, etc.
     */
    expressedBy?: Reference;
    /**
     * The identified conditions and other health record elements that are intended to be addressed by the goal.
     */
    addresses?: Reference[];
    /**
     * Any comments related to the goal.
     */
    note?: Annotation[];
    /**
     * Identifies the change (or lack of change) at the point when the status of the goal is assessed.
     */
    outcomeCode?: CodeableConcept[];
    /**
     * Details of what's changed (or not changed).
     */
    outcomeReference?: Reference[];
}
/**
 * Indicates what should be done by when.
 */
export interface GoalTarget {
    /**
     * Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
     */
    id?: string;
    /**
     * Contains extension information for property 'id'.
     */
    _id?: Element;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * The parameter whose value is being tracked, e.g. body weight, blood pressure, or hemoglobin A1c level.
     */
    measure?: CodeableConcept;
    /**
     * The target value of the focus to be achieved to signify the fulfillment of the goal, e.g. 150 pounds, 7.0%. Either the high or low or both values of the range can be specified. When a low value is missing, it indicates that the goal is achieved at any focus value at or below the high value. Similarly, if the high value is missing, it indicates that the goal is achieved at any focus value at or above the low value.
     */
    detailQuantity?: Quantity;
    /**
     * The target value of the focus to be achieved to signify the fulfillment of the goal, e.g. 150 pounds, 7.0%. Either the high or low or both values of the range can be specified. When a low value is missing, it indicates that the goal is achieved at any focus value at or below the high value. Similarly, if the high value is missing, it indicates that the goal is achieved at any focus value at or above the low value.
     */
    detailRange?: Range;
    /**
     * The target value of the focus to be achieved to signify the fulfillment of the goal, e.g. 150 pounds, 7.0%. Either the high or low or both values of the range can be specified. When a low value is missing, it indicates that the goal is achieved at any focus value at or below the high value. Similarly, if the high value is missing, it indicates that the goal is achieved at any focus value at or above the low value.
     */
    detailCodeableConcept?: CodeableConcept;
    /**
     * The target value of the focus to be achieved to signify the fulfillment of the goal, e.g. 150 pounds, 7.0%. Either the high or low or both values of the range can be specified. When a low value is missing, it indicates that the goal is achieved at any focus value at or below the high value. Similarly, if the high value is missing, it indicates that the goal is achieved at any focus value at or above the low value.
     */
    detailString?: string;
    /**
     * Contains extension information for property 'detailString'.
     */
    _detailString?: Element;
    /**
     * The target value of the focus to be achieved to signify the fulfillment of the goal, e.g. 150 pounds, 7.0%. Either the high or low or both values of the range can be specified. When a low value is missing, it indicates that the goal is achieved at any focus value at or below the high value. Similarly, if the high value is missing, it indicates that the goal is achieved at any focus value at or above the low value.
     */
    detailBoolean?: boolean;
    /**
     * Contains extension information for property 'detailBoolean'.
     */
    _detailBoolean?: Element;
    /**
     * The target value of the focus to be achieved to signify the fulfillment of the goal, e.g. 150 pounds, 7.0%. Either the high or low or both values of the range can be specified. When a low value is missing, it indicates that the goal is achieved at any focus value at or below the high value. Similarly, if the high value is missing, it indicates that the goal is achieved at any focus value at or above the low value.
     */
    detailInteger?: integer;
    /**
     * Contains extension information for property 'detailInteger'.
     */
    _detailInteger?: Element;
    /**
     * The target value of the focus to be achieved to signify the fulfillment of the goal, e.g. 150 pounds, 7.0%. Either the high or low or both values of the range can be specified. When a low value is missing, it indicates that the goal is achieved at any focus value at or below the high value. Similarly, if the high value is missing, it indicates that the goal is achieved at any focus value at or above the low value.
     */
    detailRatio?: Ratio;
    /**
     * Indicates either the date or the duration after start by which the goal should be met.
     */
    dueDate?: date;
    /**
     * Contains extension information for property 'dueDate'.
     */
    _dueDate?: Element;
    /**
     * Indicates either the date or the duration after start by which the goal should be met.
     */
    dueDuration?: Duration;
}
/**
 * A formal computable definition of a graph of resources - that is, a coherent set of resources that form a graph by following references. The Graph Definition resource defines a set and makes rules about the set.
 */
export interface GraphDefinition {
    /**
     * The type of the resource.
     */
    resourceType: string;
    /**
     * The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes.
     */
    id?: id;
    /**
     * Contains extension information for property 'id'.
     */
    _id?: Element;
    /**
     * The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource.
     */
    meta?: Meta;
    /**
     * A reference to a set of rules that were followed when the resource was constructed, and which must be understood when processing the content. Often, this is a reference to an implementation guide that defines the special rules along with other profiles etc.
     */
    implicitRules?: uri;
    /**
     * Contains extension information for property 'implicitRules'.
     */
    _implicitRules?: Element;
    /**
     * The base language in which the resource is written.
     */
    language?: code;
    /**
     * Contains extension information for property 'language'.
     */
    _language?: Element;
    /**
     * A human-readable narrative that contains a summary of the resource and can be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it "clinically safe" for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety.
     */
    text?: Narrative;
    /**
     * These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, and nor can they have their own independent transaction scope.
     */
    contained?: Resource[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * An absolute URI that is used to identify this graph definition when it is referenced in a specification, model, design or an instance; also called its canonical identifier. This SHOULD be globally unique and SHOULD be a literal address at which at which an authoritative instance of this graph definition is (or will be) published. This URL can be the target of a canonical reference. It SHALL remain the same when the graph definition is stored on different servers.
     */
    url?: uri;
    /**
     * Contains extension information for property 'url'.
     */
    _url?: Element;
    /**
     * The identifier that is used to identify this version of the graph definition when it is referenced in a specification, model, design or instance. This is an arbitrary value managed by the graph definition author and is not expected to be globally unique. For example, it might be a timestamp (e.g. yyyymmdd) if a managed version is not available. There is also no expectation that versions can be placed in a lexicographical sequence.
     */
    version?: string;
    /**
     * Contains extension information for property 'version'.
     */
    _version?: Element;
    /**
     * A natural language name identifying the graph definition. This name should be usable as an identifier for the module by machine processing applications such as code generation.
     */
    name: string;
    /**
     * Contains extension information for property 'name'.
     */
    _name?: Element;
    /**
     * The status of this graph definition. Enables tracking the life-cycle of the content.
     */
    status: code;
    /**
     * Contains extension information for property 'status'.
     */
    _status?: Element;
    /**
     * A Boolean value to indicate that this graph definition is authored for testing purposes (or education/evaluation/marketing) and is not intended to be used for genuine usage.
     */
    experimental?: boolean;
    /**
     * Contains extension information for property 'experimental'.
     */
    _experimental?: Element;
    /**
     * The date  (and optionally time) when the graph definition was published. The date must change when the business version changes and it must change if the status code changes. In addition, it should change when the substantive content of the graph definition changes.
     */
    date?: dateTime;
    /**
     * Contains extension information for property 'date'.
     */
    _date?: Element;
    /**
     * The name of the organization or individual that published the graph definition.
     */
    publisher?: string;
    /**
     * Contains extension information for property 'publisher'.
     */
    _publisher?: Element;
    /**
     * Contact details to assist a user in finding and communicating with the publisher.
     */
    contact?: ContactDetail[];
    /**
     * A free text natural language description of the graph definition from a consumer's perspective.
     */
    description?: markdown;
    /**
     * Contains extension information for property 'description'.
     */
    _description?: Element;
    /**
     * The content was developed with a focus and intent of supporting the contexts that are listed. These contexts may be general categories (gender, age, ...) or may be references to specific programs (insurance plans, studies, ...) and may be used to assist with indexing and searching for appropriate graph definition instances.
     */
    useContext?: UsageContext[];
    /**
     * A legal or geographic region in which the graph definition is intended to be used.
     */
    jurisdiction?: CodeableConcept[];
    /**
     * Explanation of why this graph definition is needed and why it has been designed as it has.
     */
    purpose?: markdown;
    /**
     * Contains extension information for property 'purpose'.
     */
    _purpose?: Element;
    /**
     * The type of FHIR resource at which instances of this graph start.
     */
    start: code;
    /**
     * Contains extension information for property 'start'.
     */
    _start?: Element;
    /**
     * The profile that describes the use of the base resource.
     */
    profile?: canonical;
    /**
     * Links this graph makes rules about.
     */
    link?: GraphDefinitionLink[];
}
/**
 * Links this graph makes rules about.
 */
export interface GraphDefinitionLink {
    /**
     * Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
     */
    id?: string;
    /**
     * Contains extension information for property 'id'.
     */
    _id?: Element;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * A FHIR expression that identifies one of FHIR References to other resources.
     */
    path?: string;
    /**
     * Contains extension information for property 'path'.
     */
    _path?: Element;
    /**
     * Which slice (if profiled).
     */
    sliceName?: string;
    /**
     * Contains extension information for property 'sliceName'.
     */
    _sliceName?: Element;
    /**
     * Minimum occurrences for this link.
     */
    min?: integer;
    /**
     * Contains extension information for property 'min'.
     */
    _min?: Element;
    /**
     * Maximum occurrences for this link.
     */
    max?: string;
    /**
     * Contains extension information for property 'max'.
     */
    _max?: Element;
    /**
     * Information about why this link is of interest in this graph definition.
     */
    description?: string;
    /**
     * Contains extension information for property 'description'.
     */
    _description?: Element;
    /**
     * Potential target for the link.
     */
    target?: GraphDefinitionLinkTarget[];
}
/**
 * Potential target for the link.
 */
export interface GraphDefinitionLinkTarget {
    /**
     * Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
     */
    id?: string;
    /**
     * Contains extension information for property 'id'.
     */
    _id?: Element;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * Type of resource this link refers to.
     */
    type: code;
    /**
     * Contains extension information for property 'type'.
     */
    _type?: Element;
    /**
     * A set of parameters to look up.
     */
    params?: string;
    /**
     * Contains extension information for property 'params'.
     */
    _params?: Element;
    /**
     * Profile for the target resource.
     */
    profile?: canonical;
    /**
     * Compartment Consistency Rules.
     */
    compartment?: GraphDefinitionLinkTargetCompartment[];
    /**
     * Additional links from target resource.
     */
    link?: GraphDefinitionLink[];
}
/**
 * Compartment Consistency Rules.
 */
export interface GraphDefinitionLinkTargetCompartment {
    /**
     * Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
     */
    id?: string;
    /**
     * Contains extension information for property 'id'.
     */
    _id?: Element;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * Defines how the compartment rule is used - whether it it is used to test whether resources are subject to the rule, or whether it is a rule that must be followed.
     */
    use: code;
    /**
     * Contains extension information for property 'use'.
     */
    _use?: Element;
    /**
     * Identifies the compartment.
     */
    code: code;
    /**
     * Contains extension information for property 'code'.
     */
    _code?: Element;
    /**
     * identical | matching | different | no-rule | custom.
     */
    rule: code;
    /**
     * Contains extension information for property 'rule'.
     */
    _rule?: Element;
    /**
     * Custom rule, as a FHIRPath expression.
     */
    expression?: string;
    /**
     * Contains extension information for property 'expression'.
     */
    _expression?: Element;
    /**
     * Documentation for FHIRPath expression.
     */
    description?: string;
    /**
     * Contains extension information for property 'description'.
     */
    _description?: Element;
}
/**
 * Represents a defined collection of entities that may be discussed or acted upon collectively but which are not expected to act collectively, and are not formally or legally recognized; i.e. a collection of entities that isn't an Organization.
 */
export interface Group {
    /**
     * The type of the resource.
     */
    resourceType: string;
    /**
     * The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes.
     */
    id?: id;
    /**
     * Contains extension information for property 'id'.
     */
    _id?: Element;
    /**
     * The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource.
     */
    meta?: Meta;
    /**
     * A reference to a set of rules that were followed when the resource was constructed, and which must be understood when processing the content. Often, this is a reference to an implementation guide that defines the special rules along with other profiles etc.
     */
    implicitRules?: uri;
    /**
     * Contains extension information for property 'implicitRules'.
     */
    _implicitRules?: Element;
    /**
     * The base language in which the resource is written.
     */
    language?: code;
    /**
     * Contains extension information for property 'language'.
     */
    _language?: Element;
    /**
     * A human-readable narrative that contains a summary of the resource and can be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it "clinically safe" for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety.
     */
    text?: Narrative;
    /**
     * These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, and nor can they have their own independent transaction scope.
     */
    contained?: Resource[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * A unique business identifier for this group.
     */
    identifier?: Identifier[];
    /**
     * Indicates whether the record for the group is available for use or is merely being retained for historical purposes.
     */
    active?: boolean;
    /**
     * Contains extension information for property 'active'.
     */
    _active?: Element;
    /**
     * Identifies the broad classification of the kind of resources the group includes.
     */
    type: code;
    /**
     * Contains extension information for property 'type'.
     */
    _type?: Element;
    /**
     * If true, indicates that the resource refers to a specific group of real individuals.  If false, the group defines a set of intended individuals.
     */
    actual: boolean;
    /**
     * Contains extension information for property 'actual'.
     */
    _actual?: Element;
    /**
     * Provides a specific type of resource the group includes; e.g. "cow", "syringe", etc.
     */
    code?: CodeableConcept;
    /**
     * A label assigned to the group for human identification and communication.
     */
    name?: string;
    /**
     * Contains extension information for property 'name'.
     */
    _name?: Element;
    /**
     * A count of the number of resource instances that are part of the group.
     */
    quantity?: unsignedInt;
    /**
     * Contains extension information for property 'quantity'.
     */
    _quantity?: Element;
    /**
     * Entity responsible for defining and maintaining Group characteristics and/or registered members.
     */
    managingEntity?: Reference;
    /**
     * Identifies traits whose presence r absence is shared by members of the group.
     */
    characteristic?: GroupCharacteristic[];
    /**
     * Identifies the resource instances that are members of the group.
     */
    member?: GroupMember[];
}
/**
 * Identifies traits whose presence r absence is shared by members of the group.
 */
export interface GroupCharacteristic {
    /**
     * Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
     */
    id?: string;
    /**
     * Contains extension information for property 'id'.
     */
    _id?: Element;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * A code that identifies the kind of trait being asserted.
     */
    code: CodeableConcept;
    /**
     * The value of the trait that holds (or does not hold - see 'exclude') for members of the group.
     */
    valueCodeableConcept: CodeableConcept;
    /**
     * The value of the trait that holds (or does not hold - see 'exclude') for members of the group.
     */
    valueBoolean: boolean;
    /**
     * Contains extension information for property 'valueBoolean'.
     */
    _valueBoolean?: Element;
    /**
     * The value of the trait that holds (or does not hold - see 'exclude') for members of the group.
     */
    valueQuantity: Quantity;
    /**
     * The value of the trait that holds (or does not hold - see 'exclude') for members of the group.
     */
    valueRange: Range;
    /**
     * The value of the trait that holds (or does not hold - see 'exclude') for members of the group.
     */
    valueReference: Reference;
    /**
     * If true, indicates the characteristic is one that is NOT held by members of the group.
     */
    exclude: boolean;
    /**
     * Contains extension information for property 'exclude'.
     */
    _exclude?: Element;
    /**
     * The period over which the characteristic is tested; e.g. the patient had an operation during the month of June.
     */
    period?: Period;
}
/**
 * Identifies the resource instances that are members of the group.
 */
export interface GroupMember {
    /**
     * Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
     */
    id?: string;
    /**
     * Contains extension information for property 'id'.
     */
    _id?: Element;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * A reference to the entity that is a member of the group. Must be consistent with Group.type. If the entity is another group, then the type must be the same.
     */
    entity: Reference;
    /**
     * The period that the member was in the group, if known.
     */
    period?: Period;
    /**
     * A flag to indicate that the member is no longer in the group, but previously may have been a member.
     */
    inactive?: boolean;
    /**
     * Contains extension information for property 'inactive'.
     */
    _inactive?: Element;
}
/**
 * A guidance response is the formal response to a guidance request, including any output parameters returned by the evaluation, as well as the description of any proposed actions to be taken.
 */
export interface GuidanceResponse {
    /**
     * The type of the resource.
     */
    resourceType: string;
    /**
     * The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes.
     */
    id?: id;
    /**
     * Contains extension information for property 'id'.
     */
    _id?: Element;
    /**
     * The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource.
     */
    meta?: Meta;
    /**
     * A reference to a set of rules that were followed when the resource was constructed, and which must be understood when processing the content. Often, this is a reference to an implementation guide that defines the special rules along with other profiles etc.
     */
    implicitRules?: uri;
    /**
     * Contains extension information for property 'implicitRules'.
     */
    _implicitRules?: Element;
    /**
     * The base language in which the resource is written.
     */
    language?: code;
    /**
     * Contains extension information for property 'language'.
     */
    _language?: Element;
    /**
     * A human-readable narrative that contains a summary of the resource and can be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it "clinically safe" for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety.
     */
    text?: Narrative;
    /**
     * These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, and nor can they have their own independent transaction scope.
     */
    contained?: Resource[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * The identifier of the request associated with this response. If an identifier was given as part of the request, it will be reproduced here to enable the requester to more easily identify the response in a multi-request scenario.
     */
    requestIdentifier?: Identifier;
    /**
     * Allows a service to provide  unique, business identifiers for the response.
     */
    identifier?: Identifier[];
    /**
     * An identifier, CodeableConcept or canonical reference to the guidance that was requested.
     */
    moduleUri: uri;
    /**
     * Contains extension information for property 'moduleUri'.
     */
    _moduleUri?: Element;
    /**
     * An identifier, CodeableConcept or canonical reference to the guidance that was requested.
     */
    moduleCanonical: canonical;
    /**
     * An identifier, CodeableConcept or canonical reference to the guidance that was requested.
     */
    moduleCodeableConcept: CodeableConcept;
    /**
     * The status of the response. If the evaluation is completed successfully, the status will indicate success. However, in order to complete the evaluation, the engine may require more information. In this case, the status will be data-required, and the response will contain a description of the additional required information. If the evaluation completed successfully, but the engine determines that a potentially more accurate response could be provided if more data was available, the status will be data-requested, and the response will contain a description of the additional requested information.
     */
    status: code;
    /**
     * Contains extension information for property 'status'.
     */
    _status?: Element;
    /**
     * The patient for which the request was processed.
     */
    subject?: Reference;
    /**
     * The encounter during which this response was created or to which the creation of this record is tightly associated.
     */
    encounter?: Reference;
    /**
     * Indicates when the guidance response was processed.
     */
    occurrenceDateTime?: dateTime;
    /**
     * Contains extension information for property 'occurrenceDateTime'.
     */
    _occurrenceDateTime?: Element;
    /**
     * Provides a reference to the device that performed the guidance.
     */
    performer?: Reference;
    /**
     * Describes the reason for the guidance response in coded or textual form.
     */
    reasonCode?: CodeableConcept[];
    /**
     * Indicates the reason the request was initiated. This is typically provided as a parameter to the evaluation and echoed by the service, although for some use cases, such as subscription- or event-based scenarios, it may provide an indication of the cause for the response.
     */
    reasonReference?: Reference[];
    /**
     * Provides a mechanism to communicate additional information about the response.
     */
    note?: Annotation[];
    /**
     * Messages resulting from the evaluation of the artifact or artifacts. As part of evaluating the request, the engine may produce informational or warning messages. These messages will be provided by this element.
     */
    evaluationMessage?: Reference[];
    /**
     * The output parameters of the evaluation, if any. Many modules will result in the return of specific resources such as procedure or communication requests that are returned as part of the operation result. However, modules may define specific outputs that would be returned as the result of the evaluation, and these would be returned in this element.
     */
    outputParameters?: Reference;
    /**
     * The actions, if any, produced by the evaluation of the artifact.
     */
    result?: Reference;
    /**
     * If the evaluation could not be completed due to lack of information, or additional information would potentially result in a more accurate response, this element will a description of the data required in order to proceed with the evaluation. A subsequent request to the service should include this data.
     */
    dataRequirement?: DataRequirement[];
}
/**
 * The details of a healthcare service available at a location.
 */
export interface HealthcareService {
    /**
     * The type of the resource.
     */
    resourceType: string;
    /**
     * The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes.
     */
    id?: id;
    /**
     * Contains extension information for property 'id'.
     */
    _id?: Element;
    /**
     * The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource.
     */
    meta?: Meta;
    /**
     * A reference to a set of rules that were followed when the resource was constructed, and which must be understood when processing the content. Often, this is a reference to an implementation guide that defines the special rules along with other profiles etc.
     */
    implicitRules?: uri;
    /**
     * Contains extension information for property 'implicitRules'.
     */
    _implicitRules?: Element;
    /**
     * The base language in which the resource is written.
     */
    language?: code;
    /**
     * Contains extension information for property 'language'.
     */
    _language?: Element;
    /**
     * A human-readable narrative that contains a summary of the resource and can be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it "clinically safe" for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety.
     */
    text?: Narrative;
    /**
     * These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, and nor can they have their own independent transaction scope.
     */
    contained?: Resource[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * External identifiers for this item.
     */
    identifier?: Identifier[];
    /**
     * This flag is used to mark the record to not be used. This is not used when a center is closed for maintenance, or for holidays, the notAvailable period is to be used for this.
     */
    active?: boolean;
    /**
     * Contains extension information for property 'active'.
     */
    _active?: Element;
    /**
     * The organization that provides this healthcare service.
     */
    providedBy?: Reference;
    /**
     * Identifies the broad category of service being performed or delivered.
     */
    category?: CodeableConcept[];
    /**
     * The specific type of service that may be delivered or performed.
     */
    type?: CodeableConcept[];
    /**
     * Collection of specialties handled by the service site. This is more of a medical term.
     */
    specialty?: CodeableConcept[];
    /**
     * The location(s) where this healthcare service may be provided.
     */
    location?: Reference[];
    /**
     * Further description of the service as it would be presented to a consumer while searching.
     */
    name?: string;
    /**
     * Contains extension information for property 'name'.
     */
    _name?: Element;
    /**
     * Any additional description of the service and/or any specific issues not covered by the other attributes, which can be displayed as further detail under the serviceName.
     */
    comment?: string;
    /**
     * Contains extension information for property 'comment'.
     */
    _comment?: Element;
    /**
     * Extra details about the service that can't be placed in the other fields.
     */
    extraDetails?: markdown;
    /**
     * Contains extension information for property 'extraDetails'.
     */
    _extraDetails?: Element;
    /**
     * If there is a photo/symbol associated with this HealthcareService, it may be included here to facilitate quick identification of the service in a list.
     */
    photo?: Attachment;
    /**
     * List of contacts related to this specific healthcare service.
     */
    telecom?: ContactPoint[];
    /**
     * The location(s) that this service is available to (not where the service is provided).
     */
    coverageArea?: Reference[];
    /**
     * The code(s) that detail the conditions under which the healthcare service is available/offered.
     */
    serviceProvisionCode?: CodeableConcept[];
    /**
     * Does this service have specific eligibility requirements that need to be met in order to use the service?
     */
    eligibility?: HealthcareServiceEligibility[];
    /**
     * Programs that this service is applicable to.
     */
    program?: CodeableConcept[];
    /**
     * Collection of characteristics (attributes).
     */
    characteristic?: CodeableConcept[];
    /**
     * Some services are specifically made available in multiple languages, this property permits a directory to declare the languages this is offered in. Typically this is only provided where a service operates in communities with mixed languages used.
     */
    communication?: CodeableConcept[];
    /**
     * Ways that the service accepts referrals, if this is not provided then it is implied that no referral is required.
     */
    referralMethod?: CodeableConcept[];
    /**
     * Indicates whether or not a prospective consumer will require an appointment for a particular service at a site to be provided by the Organization. Indicates if an appointment is required for access to this service.
     */
    appointmentRequired?: boolean;
    /**
     * Contains extension information for property 'appointmentRequired'.
     */
    _appointmentRequired?: Element;
    /**
     * A collection of times that the Service Site is available.
     */
    availableTime?: HealthcareServiceAvailableTime[];
    /**
     * The HealthcareService is not available during this period of time due to the provided reason.
     */
    notAvailable?: HealthcareServiceNotAvailable[];
    /**
     * A description of site availability exceptions, e.g. public holiday availability. Succinctly describing all possible exceptions to normal site availability as details in the available Times and not available Times.
     */
    availabilityExceptions?: string;
    /**
     * Contains extension information for property 'availabilityExceptions'.
     */
    _availabilityExceptions?: Element;
    /**
     * Technical endpoints providing access to services operated for the specific healthcare services defined at this resource.
     */
    endpoint?: Reference[];
}
/**
 * Does this service have specific eligibility requirements that need to be met in order to use the service?
 */
export interface HealthcareServiceEligibility {
    /**
     * Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
     */
    id?: string;
    /**
     * Contains extension information for property 'id'.
     */
    _id?: Element;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * Coded value for the eligibility.
     */
    code?: CodeableConcept;
    /**
     * Describes the eligibility conditions for the service.
     */
    comment?: markdown;
    /**
     * Contains extension information for property 'comment'.
     */
    _comment?: Element;
}
/**
 * A collection of times that the Service Site is available.
 */
export interface HealthcareServiceAvailableTime {
    /**
     * Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
     */
    id?: string;
    /**
     * Contains extension information for property 'id'.
     */
    _id?: Element;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * Indicates which days of the week are available between the start and end Times.
     */
    daysOfWeek?: code[];
    /**
     * Contains extension information for property 'daysOfWeek'.
     */
    _daysOfWeek?: Element[];
    /**
     * Is this always available? (hence times are irrelevant) e.g. 24 hour service.
     */
    allDay?: boolean;
    /**
     * Contains extension information for property 'allDay'.
     */
    _allDay?: Element;
    /**
     * The opening time of day. Note: If the AllDay flag is set, then this time is ignored.
     */
    availableStartTime?: time;
    /**
     * Contains extension information for property 'availableStartTime'.
     */
    _availableStartTime?: Element;
    /**
     * The closing time of day. Note: If the AllDay flag is set, then this time is ignored.
     */
    availableEndTime?: time;
    /**
     * Contains extension information for property 'availableEndTime'.
     */
    _availableEndTime?: Element;
}
/**
 * The HealthcareService is not available during this period of time due to the provided reason.
 */
export interface HealthcareServiceNotAvailable {
    /**
     * Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
     */
    id?: string;
    /**
     * Contains extension information for property 'id'.
     */
    _id?: Element;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * The reason that can be presented to the user as to why this time is not available.
     */
    description: string;
    /**
     * Contains extension information for property 'description'.
     */
    _description?: Element;
    /**
     * Service is not available (seasonally or for a public holiday) from this date.
     */
    during?: Period;
}
/**
 * A human's name with the ability to identify parts and usage.
 */
export interface HumanName {
    /**
     * Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
     */
    id?: string;
    /**
     * Contains extension information for property 'id'.
     */
    _id?: Element;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * Identifies the purpose for this name.
     */
    use?: code;
    /**
     * Contains extension information for property 'use'.
     */
    _use?: Element;
    /**
     * Specifies the entire name as it should be displayed e.g. on an application UI. This may be provided instead of or as well as the specific parts.
     */
    text?: string;
    /**
     * Contains extension information for property 'text'.
     */
    _text?: Element;
    /**
     * The part of a name that links to the genealogy. In some cultures (e.g. Eritrea) the family name of a son is the first name of his father.
     */
    family?: string;
    /**
     * Contains extension information for property 'family'.
     */
    _family?: Element;
    /**
     * Given name.
     */
    given?: string[];
    /**
     * Contains extension information for property 'given'.
     */
    _given?: Element[];
    /**
     * Part of the name that is acquired as a title due to academic, legal, employment or nobility status, etc. and that appears at the start of the name.
     */
    prefix?: string[];
    /**
     * Contains extension information for property 'prefix'.
     */
    _prefix?: Element[];
    /**
     * Part of the name that is acquired as a title due to academic, legal, employment or nobility status, etc. and that appears at the end of the name.
     */
    suffix?: string[];
    /**
     * Contains extension information for property 'suffix'.
     */
    _suffix?: Element[];
    /**
     * Indicates the period of time when this name was valid for the named person.
     */
    period?: Period;
}
/**
 * An identifier - identifies some entity uniquely and unambiguously. Typically this is used for business identifiers.
 */
export interface Identifier {
    /**
     * Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
     */
    id?: string;
    /**
     * Contains extension information for property 'id'.
     */
    _id?: Element;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * The purpose of this identifier.
     */
    use?: code;
    /**
     * Contains extension information for property 'use'.
     */
    _use?: Element;
    /**
     * A coded type for the identifier that can be used to determine which identifier to use for a specific purpose.
     */
    type?: CodeableConcept;
    /**
     * Establishes the namespace for the value - that is, a URL that describes a set values that are unique.
     */
    system?: uri;
    /**
     * Contains extension information for property 'system'.
     */
    _system?: Element;
    /**
     * The portion of the identifier typically relevant to the user and which is unique within the context of the system.
     */
    value?: string;
    /**
     * Contains extension information for property 'value'.
     */
    _value?: Element;
    /**
     * Time period during which identifier is/was valid for use.
     */
    period?: Period;
    /**
     * Organization that issued/manages the identifier.
     */
    assigner?: Reference;
}
/**
 * Representation of the content produced in a DICOM imaging study. A study comprises a set of series, each of which includes a set of Service-Object Pair Instances (SOP Instances - images or other data) acquired or produced in a common context.  A series is of only one modality (e.g. X-ray, CT, MR, ultrasound), but a study may have multiple series of different modalities.
 */
export interface ImagingStudy {
    /**
     * The type of the resource.
     */
    resourceType: string;
    /**
     * The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes.
     */
    id?: id;
    /**
     * Contains extension information for property 'id'.
     */
    _id?: Element;
    /**
     * The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource.
     */
    meta?: Meta;
    /**
     * A reference to a set of rules that were followed when the resource was constructed, and which must be understood when processing the content. Often, this is a reference to an implementation guide that defines the special rules along with other profiles etc.
     */
    implicitRules?: uri;
    /**
     * Contains extension information for property 'implicitRules'.
     */
    _implicitRules?: Element;
    /**
     * The base language in which the resource is written.
     */
    language?: code;
    /**
     * Contains extension information for property 'language'.
     */
    _language?: Element;
    /**
     * A human-readable narrative that contains a summary of the resource and can be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it "clinically safe" for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety.
     */
    text?: Narrative;
    /**
     * These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, and nor can they have their own independent transaction scope.
     */
    contained?: Resource[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * Identifiers for the ImagingStudy such as DICOM Study Instance UID, and Accession Number.
     */
    identifier?: Identifier[];
    /**
     * The current state of the ImagingStudy.
     */
    status: code;
    /**
     * Contains extension information for property 'status'.
     */
    _status?: Element;
    /**
     * A list of all the series.modality values that are actual acquisition modalities, i.e. those in the DICOM Context Group 29 (value set OID 1.2.840.10008.6.1.19).
     */
    modality?: Coding[];
    /**
     * The subject, typically a patient, of the imaging study.
     */
    subject: Reference;
    /**
     * The healthcare event (e.g. a patient and healthcare provider interaction) during which this ImagingStudy is made.
     */
    encounter?: Reference;
    /**
     * Date and time the study started.
     */
    started?: dateTime;
    /**
     * Contains extension information for property 'started'.
     */
    _started?: Element;
    /**
     * A list of the diagnostic requests that resulted in this imaging study being performed.
     */
    basedOn?: Reference[];
    /**
     * The requesting/referring physician.
     */
    referrer?: Reference;
    /**
     * Who read the study and interpreted the images or other content.
     */
    interpreter?: Reference[];
    /**
     * The network service providing access (e.g., query, view, or retrieval) for the study. See implementation notes for information about using DICOM endpoints. A study-level endpoint applies to each series in the study, unless overridden by a series-level endpoint with the same Endpoint.connectionType.
     */
    endpoint?: Reference[];
    /**
     * Number of Series in the Study. This value given may be larger than the number of series elements this Resource contains due to resource availability, security, or other factors. This element should be present if any series elements are present.
     */
    numberOfSeries?: unsignedInt;
    /**
     * Contains extension information for property 'numberOfSeries'.
     */
    _numberOfSeries?: Element;
    /**
     * Number of SOP Instances in Study. This value given may be larger than the number of instance elements this resource contains due to resource availability, security, or other factors. This element should be present if any instance elements are present.
     */
    numberOfInstances?: unsignedInt;
    /**
     * Contains extension information for property 'numberOfInstances'.
     */
    _numberOfInstances?: Element;
    /**
     * The procedure which this ImagingStudy was part of.
     */
    procedureReference?: Reference;
    /**
     * The code for the performed procedure type.
     */
    procedureCode?: CodeableConcept[];
    /**
     * The principal physical location where the ImagingStudy was performed.
     */
    location?: Reference;
    /**
     * Description of clinical condition indicating why the ImagingStudy was requested.
     */
    reasonCode?: CodeableConcept[];
    /**
     * Indicates another resource whose existence justifies this Study.
     */
    reasonReference?: Reference[];
    /**
     * Per the recommended DICOM mapping, this element is derived from the Study Description attribute (0008,1030). Observations or findings about the imaging study should be recorded in another resource, e.g. Observation, and not in this element.
     */
    note?: Annotation[];
    /**
     * The Imaging Manager description of the study. Institution-generated description or classification of the Study (component) performed.
     */
    description?: string;
    /**
     * Contains extension information for property 'description'.
     */
    _description?: Element;
    /**
     * Each study has one or more series of images or other content.
     */
    series?: ImagingStudySeries[];
}
/**
 * Each study has one or more series of images or other content.
 */
export interface ImagingStudySeries {
    /**
     * Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
     */
    id?: string;
    /**
     * Contains extension information for property 'id'.
     */
    _id?: Element;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * The DICOM Series Instance UID for the series.
     */
    uid: id;
    /**
     * Contains extension information for property 'uid'.
     */
    _uid?: Element;
    /**
     * The numeric identifier of this series in the study.
     */
    number?: unsignedInt;
    /**
     * Contains extension information for property 'number'.
     */
    _number?: Element;
    /**
     * The modality of this series sequence.
     */
    modality: Coding;
    /**
     * A description of the series.
     */
    description?: string;
    /**
     * Contains extension information for property 'description'.
     */
    _description?: Element;
    /**
     * Number of SOP Instances in the Study. The value given may be larger than the number of instance elements this resource contains due to resource availability, security, or other factors. This element should be present if any instance elements are present.
     */
    numberOfInstances?: unsignedInt;
    /**
     * Contains extension information for property 'numberOfInstances'.
     */
    _numberOfInstances?: Element;
    /**
     * The network service providing access (e.g., query, view, or retrieval) for this series. See implementation notes for information about using DICOM endpoints. A series-level endpoint, if present, has precedence over a study-level endpoint with the same Endpoint.connectionType.
     */
    endpoint?: Reference[];
    /**
     * The anatomic structures examined. See DICOM Part 16 Annex L (http://dicom.nema.org/medical/dicom/current/output/chtml/part16/chapter_L.html) for DICOM to SNOMED-CT mappings. The bodySite may indicate the laterality of body part imaged; if so, it shall be consistent with any content of ImagingStudy.series.laterality.
     */
    bodySite?: Coding;
    /**
     * The laterality of the (possibly paired) anatomic structures examined. E.g., the left knee, both lungs, or unpaired abdomen. If present, shall be consistent with any laterality information indicated in ImagingStudy.series.bodySite.
     */
    laterality?: Coding;
    /**
     * The specimen imaged, e.g., for whole slide imaging of a biopsy.
     */
    specimen?: Reference[];
    /**
     * The date and time the series was started.
     */
    started?: dateTime;
    /**
     * Contains extension information for property 'started'.
     */
    _started?: Element;
    /**
     * Indicates who or what performed the series and how they were involved.
     */
    performer?: ImagingStudySeriesPerformer[];
    /**
     * A single SOP instance within the series, e.g. an image, or presentation state.
     */
    instance?: ImagingStudySeriesInstance[];
}
/**
 * Indicates who or what performed the series and how they were involved.
 */
export interface ImagingStudySeriesPerformer {
    /**
     * Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
     */
    id?: string;
    /**
     * Contains extension information for property 'id'.
     */
    _id?: Element;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * Distinguishes the type of involvement of the performer in the series.
     */
    function?: CodeableConcept;
    /**
     * Indicates who or what performed the series.
     */
    actor: Reference;
}
/**
 * A single SOP instance within the series, e.g. an image, or presentation state.
 */
export interface ImagingStudySeriesInstance {
    /**
     * Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
     */
    id?: string;
    /**
     * Contains extension information for property 'id'.
     */
    _id?: Element;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * The DICOM SOP Instance UID for this image or other DICOM content.
     */
    uid: id;
    /**
     * Contains extension information for property 'uid'.
     */
    _uid?: Element;
    /**
     * DICOM instance  type.
     */
    sopClass: Coding;
    /**
     * The number of instance in the series.
     */
    number?: unsignedInt;
    /**
     * Contains extension information for property 'number'.
     */
    _number?: Element;
    /**
     * The description of the instance.
     */
    title?: string;
    /**
     * Contains extension information for property 'title'.
     */
    _title?: Element;
}
/**
 * Describes the event of a patient being administered a vaccine or a record of an immunization as reported by a patient, a clinician or another party.
 */
export interface Immunization {
    /**
     * The type of the resource.
     */
    resourceType: string;
    /**
     * The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes.
     */
    id?: id;
    /**
     * Contains extension information for property 'id'.
     */
    _id?: Element;
    /**
     * The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource.
     */
    meta?: Meta;
    /**
     * A reference to a set of rules that were followed when the resource was constructed, and which must be understood when processing the content. Often, this is a reference to an implementation guide that defines the special rules along with other profiles etc.
     */
    implicitRules?: uri;
    /**
     * Contains extension information for property 'implicitRules'.
     */
    _implicitRules?: Element;
    /**
     * The base language in which the resource is written.
     */
    language?: code;
    /**
     * Contains extension information for property 'language'.
     */
    _language?: Element;
    /**
     * A human-readable narrative that contains a summary of the resource and can be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it "clinically safe" for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety.
     */
    text?: Narrative;
    /**
     * These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, and nor can they have their own independent transaction scope.
     */
    contained?: Resource[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * A unique identifier assigned to this immunization record.
     */
    identifier?: Identifier[];
    /**
     * Indicates the current status of the immunization event.
     */
    status: code;
    /**
     * Contains extension information for property 'status'.
     */
    _status?: Element;
    /**
     * Indicates the reason the immunization event was not performed.
     */
    statusReason?: CodeableConcept;
    /**
     * Vaccine that was administered or was to be administered.
     */
    vaccineCode: CodeableConcept;
    /**
     * The patient who either received or did not receive the immunization.
     */
    patient: Reference;
    /**
     * The visit or admission or other contact between patient and health care provider the immunization was performed as part of.
     */
    encounter?: Reference;
    /**
     * Date vaccine administered or was to be administered.
     */
    occurrenceDateTime: dateTime;
    /**
     * Contains extension information for property 'occurrenceDateTime'.
     */
    _occurrenceDateTime?: Element;
    /**
     * Date vaccine administered or was to be administered.
     */
    occurrenceString: string;
    /**
     * Contains extension information for property 'occurrenceString'.
     */
    _occurrenceString?: Element;
    /**
     * The date the occurrence of the immunization was first captured in the record - potentially significantly after the occurrence of the event.
     */
    recorded?: dateTime;
    /**
     * Contains extension information for property 'recorded'.
     */
    _recorded?: Element;
    /**
     * An indication that the content of the record is based on information from the person who administered the vaccine. This reflects the context under which the data was originally recorded.
     */
    primarySource?: boolean;
    /**
     * Contains extension information for property 'primarySource'.
     */
    _primarySource?: Element;
    /**
     * The source of the data when the report of the immunization event is not based on information from the person who administered the vaccine.
     */
    reportOrigin?: CodeableConcept;
    /**
     * The service delivery location where the vaccine administration occurred.
     */
    location?: Reference;
    /**
     * Name of vaccine manufacturer.
     */
    manufacturer?: Reference;
    /**
     * Lot number of the  vaccine product.
     */
    lotNumber?: string;
    /**
     * Contains extension information for property 'lotNumber'.
     */
    _lotNumber?: Element;
    /**
     * Date vaccine batch expires.
     */
    expirationDate?: date;
    /**
     * Contains extension information for property 'expirationDate'.
     */
    _expirationDate?: Element;
    /**
     * Body site where vaccine was administered.
     */
    site?: CodeableConcept;
    /**
     * The path by which the vaccine product is taken into the body.
     */
    route?: CodeableConcept;
    /**
     * The quantity of vaccine product that was administered.
     */
    doseQuantity?: Quantity;
    /**
     * Indicates who performed the immunization event.
     */
    performer?: ImmunizationPerformer[];
    /**
     * Extra information about the immunization that is not conveyed by the other attributes.
     */
    note?: Annotation[];
    /**
     * Reasons why the vaccine was administered.
     */
    reasonCode?: CodeableConcept[];
    /**
     * Condition, Observation or DiagnosticReport that supports why the immunization was administered.
     */
    reasonReference?: Reference[];
    /**
     * Indication if a dose is considered to be subpotent. By default, a dose should be considered to be potent.
     */
    isSubpotent?: boolean;
    /**
     * Contains extension information for property 'isSubpotent'.
     */
    _isSubpotent?: Element;
    /**
     * Reason why a dose is considered to be subpotent.
     */
    subpotentReason?: CodeableConcept[];
    /**
     * Educational material presented to the patient (or guardian) at the time of vaccine administration.
     */
    education?: ImmunizationEducation[];
    /**
     * Indicates a patient's eligibility for a funding program.
     */
    programEligibility?: CodeableConcept[];
    /**
     * Indicates the source of the vaccine actually administered. This may be different than the patient eligibility (e.g. the patient may be eligible for a publically purchased vaccine but due to inventory issues, vaccine purchased with private funds was actually administered).
     */
    fundingSource?: CodeableConcept;
    /**
     * Categorical data indicating that an adverse event is associated in time to an immunization.
     */
    reaction?: ImmunizationReaction[];
    /**
     * The protocol (set of recommendations) being followed by the provider who administered the dose.
     */
    protocolApplied?: ImmunizationProtocolApplied[];
}
/**
 * Indicates who performed the immunization event.
 */
export interface ImmunizationPerformer {
    /**
     * Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
     */
    id?: string;
    /**
     * Contains extension information for property 'id'.
     */
    _id?: Element;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * Describes the type of performance (e.g. ordering provider, administering provider, etc.).
     */
    function?: CodeableConcept;
    /**
     * The practitioner or organization who performed the action.
     */
    actor: Reference;
}
/**
 * Educational material presented to the patient (or guardian) at the time of vaccine administration.
 */
export interface ImmunizationEducation {
    /**
     * Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
     */
    id?: string;
    /**
     * Contains extension information for property 'id'.
     */
    _id?: Element;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * Identifier of the material presented to the patient.
     */
    documentType?: string;
    /**
     * Contains extension information for property 'documentType'.
     */
    _documentType?: Element;
    /**
     * Reference pointer to the educational material given to the patient if the information was on line.
     */
    reference?: uri;
    /**
     * Contains extension information for property 'reference'.
     */
    _reference?: Element;
    /**
     * Date the educational material was published.
     */
    publicationDate?: dateTime;
    /**
     * Contains extension information for property 'publicationDate'.
     */
    _publicationDate?: Element;
    /**
     * Date the educational material was given to the patient.
     */
    presentationDate?: dateTime;
    /**
     * Contains extension information for property 'presentationDate'.
     */
    _presentationDate?: Element;
}
/**
 * Categorical data indicating that an adverse event is associated in time to an immunization.
 */
export interface ImmunizationReaction {
    /**
     * Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
     */
    id?: string;
    /**
     * Contains extension information for property 'id'.
     */
    _id?: Element;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * Date of reaction to the immunization.
     */
    date?: dateTime;
    /**
     * Contains extension information for property 'date'.
     */
    _date?: Element;
    /**
     * Details of the reaction.
     */
    detail?: Reference;
    /**
     * Self-reported indicator.
     */
    reported?: boolean;
    /**
     * Contains extension information for property 'reported'.
     */
    _reported?: Element;
}
/**
 * The protocol (set of recommendations) being followed by the provider who administered the dose.
 */
export interface ImmunizationProtocolApplied {
    /**
     * Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
     */
    id?: string;
    /**
     * Contains extension information for property 'id'.
     */
    _id?: Element;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * One possible path to achieve presumed immunity against a disease - within the context of an authority.
     */
    series?: string;
    /**
     * Contains extension information for property 'series'.
     */
    _series?: Element;
    /**
     * Indicates the authority who published the protocol (e.g. ACIP) that is being followed.
     */
    authority?: Reference;
    /**
     * The vaccine preventable disease the dose is being administered against.
     */
    targetDisease?: CodeableConcept[];
    /**
     * Nominal position in a series.
     */
    dosenumberPositiveInt: positiveInt;
    /**
     * Contains extension information for property 'dosenumberPositiveInt'.
     */
    _dosenumberPositiveInt?: Element;
    /**
     * Nominal position in a series.
     */
    dosenumberString: string;
    /**
     * Contains extension information for property 'dosenumberString'.
     */
    _dosenumberString?: Element;
    /**
     * The recommended number of doses to achieve immunity.
     */
    seriesdosesPositiveInt?: positiveInt;
    /**
     * Contains extension information for property 'seriesdosesPositiveInt'.
     */
    _seriesdosesPositiveInt?: Element;
    /**
     * The recommended number of doses to achieve immunity.
     */
    seriesdosesString?: string;
    /**
     * Contains extension information for property 'seriesdosesString'.
     */
    _seriesdosesString?: Element;
}
/**
 * Describes a comparison of an immunization event against published recommendations to determine if the administration is "valid" in relation to those  recommendations.
 */
export interface ImmunizationEvaluation {
    /**
     * The type of the resource.
     */
    resourceType: string;
    /**
     * The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes.
     */
    id?: id;
    /**
     * Contains extension information for property 'id'.
     */
    _id?: Element;
    /**
     * The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource.
     */
    meta?: Meta;
    /**
     * A reference to a set of rules that were followed when the resource was constructed, and which must be understood when processing the content. Often, this is a reference to an implementation guide that defines the special rules along with other profiles etc.
     */
    implicitRules?: uri;
    /**
     * Contains extension information for property 'implicitRules'.
     */
    _implicitRules?: Element;
    /**
     * The base language in which the resource is written.
     */
    language?: code;
    /**
     * Contains extension information for property 'language'.
     */
    _language?: Element;
    /**
     * A human-readable narrative that contains a summary of the resource and can be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it "clinically safe" for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety.
     */
    text?: Narrative;
    /**
     * These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, and nor can they have their own independent transaction scope.
     */
    contained?: Resource[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * A unique identifier assigned to this immunization evaluation record.
     */
    identifier?: Identifier[];
    /**
     * Indicates the current status of the evaluation of the vaccination administration event.
     */
    status: code;
    /**
     * Contains extension information for property 'status'.
     */
    _status?: Element;
    /**
     * The individual for whom the evaluation is being done.
     */
    patient: Reference;
    /**
     * The date the evaluation of the vaccine administration event was performed.
     */
    date?: dateTime;
    /**
     * Contains extension information for property 'date'.
     */
    _date?: Element;
    /**
     * Indicates the authority who published the protocol (e.g. ACIP).
     */
    authority?: Reference;
    /**
     * The vaccine preventable disease the dose is being evaluated against.
     */
    targetDisease: CodeableConcept;
    /**
     * The vaccine administration event being evaluated.
     */
    immunizationEvent: Reference;
    /**
     * Indicates if the dose is valid or not valid with respect to the published recommendations.
     */
    doseStatus: CodeableConcept;
    /**
     * Provides an explanation as to why the vaccine administration event is valid or not relative to the published recommendations.
     */
    doseStatusReason?: CodeableConcept[];
    /**
     * Additional information about the evaluation.
     */
    description?: string;
    /**
     * Contains extension information for property 'description'.
     */
    _description?: Element;
    /**
     * One possible path to achieve presumed immunity against a disease - within the context of an authority.
     */
    series?: string;
    /**
     * Contains extension information for property 'series'.
     */
    _series?: Element;
    /**
     * Nominal position in a series.
     */
    dosenumberPositiveInt?: positiveInt;
    /**
     * Contains extension information for property 'dosenumberPositiveInt'.
     */
    _dosenumberPositiveInt?: Element;
    /**
     * Nominal position in a series.
     */
    dosenumberString?: string;
    /**
     * Contains extension information for property 'dosenumberString'.
     */
    _dosenumberString?: Element;
    /**
     * The recommended number of doses to achieve immunity.
     */
    seriesdosesPositiveInt?: positiveInt;
    /**
     * Contains extension information for property 'seriesdosesPositiveInt'.
     */
    _seriesdosesPositiveInt?: Element;
    /**
     * The recommended number of doses to achieve immunity.
     */
    seriesdosesString?: string;
    /**
     * Contains extension information for property 'seriesdosesString'.
     */
    _seriesdosesString?: Element;
}
/**
 * A patient's point-in-time set of recommendations (i.e. forecasting) according to a published schedule with optional supporting justification.
 */
export interface ImmunizationRecommendation {
    /**
     * The type of the resource.
     */
    resourceType: string;
    /**
     * The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes.
     */
    id?: id;
    /**
     * Contains extension information for property 'id'.
     */
    _id?: Element;
    /**
     * The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource.
     */
    meta?: Meta;
    /**
     * A reference to a set of rules that were followed when the resource was constructed, and which must be understood when processing the content. Often, this is a reference to an implementation guide that defines the special rules along with other profiles etc.
     */
    implicitRules?: uri;
    /**
     * Contains extension information for property 'implicitRules'.
     */
    _implicitRules?: Element;
    /**
     * The base language in which the resource is written.
     */
    language?: code;
    /**
     * Contains extension information for property 'language'.
     */
    _language?: Element;
    /**
     * A human-readable narrative that contains a summary of the resource and can be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it "clinically safe" for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety.
     */
    text?: Narrative;
    /**
     * These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, and nor can they have their own independent transaction scope.
     */
    contained?: Resource[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * A unique identifier assigned to this particular recommendation record.
     */
    identifier?: Identifier[];
    /**
     * The patient the recommendation(s) are for.
     */
    patient: Reference;
    /**
     * The date the immunization recommendation(s) were created.
     */
    date: dateTime;
    /**
     * Contains extension information for property 'date'.
     */
    _date?: Element;
    /**
     * Indicates the authority who published the protocol (e.g. ACIP).
     */
    authority?: Reference;
    /**
     * Vaccine administration recommendations.
     */
    recommendation: ImmunizationRecommendationRecommendation[];
}
/**
 * Vaccine administration recommendations.
 */
export interface ImmunizationRecommendationRecommendation {
    /**
     * Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
     */
    id?: string;
    /**
     * Contains extension information for property 'id'.
     */
    _id?: Element;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * Vaccine(s) or vaccine group that pertain to the recommendation.
     */
    vaccineCode?: CodeableConcept[];
    /**
     * The targeted disease for the recommendation.
     */
    targetDisease?: CodeableConcept;
    /**
     * Vaccine(s) which should not be used to fulfill the recommendation.
     */
    contraindicatedVaccineCode?: CodeableConcept[];
    /**
     * Indicates the patient status with respect to the path to immunity for the target disease.
     */
    forecastStatus: CodeableConcept;
    /**
     * The reason for the assigned forecast status.
     */
    forecastReason?: CodeableConcept[];
    /**
     * Vaccine date recommendations.  For example, earliest date to administer, latest date to administer, etc.
     */
    dateCriterion?: ImmunizationRecommendationRecommendationDateCriterion[];
    /**
     * Contains the description about the protocol under which the vaccine was administered.
     */
    description?: string;
    /**
     * Contains extension information for property 'description'.
     */
    _description?: Element;
    /**
     * One possible path to achieve presumed immunity against a disease - within the context of an authority.
     */
    series?: string;
    /**
     * Contains extension information for property 'series'.
     */
    _series?: Element;
    /**
     * Nominal position of the recommended dose in a series (e.g. dose 2 is the next recommended dose).
     */
    dosenumberPositiveInt?: positiveInt;
    /**
     * Contains extension information for property 'dosenumberPositiveInt'.
     */
    _dosenumberPositiveInt?: Element;
    /**
     * Nominal position of the recommended dose in a series (e.g. dose 2 is the next recommended dose).
     */
    dosenumberString?: string;
    /**
     * Contains extension information for property 'dosenumberString'.
     */
    _dosenumberString?: Element;
    /**
     * The recommended number of doses to achieve immunity.
     */
    seriesdosesPositiveInt?: positiveInt;
    /**
     * Contains extension information for property 'seriesdosesPositiveInt'.
     */
    _seriesdosesPositiveInt?: Element;
    /**
     * The recommended number of doses to achieve immunity.
     */
    seriesdosesString?: string;
    /**
     * Contains extension information for property 'seriesdosesString'.
     */
    _seriesdosesString?: Element;
    /**
     * Immunization event history and/or evaluation that supports the status and recommendation.
     */
    supportingImmunization?: Reference[];
    /**
     * Patient Information that supports the status and recommendation.  This includes patient observations, adverse reactions and allergy/intolerance information.
     */
    supportingPatientInformation?: Reference[];
}
/**
 * Vaccine date recommendations.  For example, earliest date to administer, latest date to administer, etc.
 */
export interface ImmunizationRecommendationRecommendationDateCriterion {
    /**
     * Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
     */
    id?: string;
    /**
     * Contains extension information for property 'id'.
     */
    _id?: Element;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * Date classification of recommendation.  For example, earliest date to give, latest date to give, etc.
     */
    code: CodeableConcept;
    /**
     * The date whose meaning is specified by dateCriterion.code.
     */
    value: dateTime;
    /**
     * Contains extension information for property 'value'.
     */
    _value?: Element;
}
/**
 * A set of rules of how a particular interoperability or standards problem is solved - typically through the use of FHIR resources. This resource is used to gather all the parts of an implementation guide into a logical whole and to publish a computable definition of all the parts.
 */
export interface ImplementationGuide {
    /**
     * The type of the resource.
     */
    resourceType: string;
    /**
     * The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes.
     */
    id?: id;
    /**
     * Contains extension information for property 'id'.
     */
    _id?: Element;
    /**
     * The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource.
     */
    meta?: Meta;
    /**
     * A reference to a set of rules that were followed when the resource was constructed, and which must be understood when processing the content. Often, this is a reference to an implementation guide that defines the special rules along with other profiles etc.
     */
    implicitRules?: uri;
    /**
     * Contains extension information for property 'implicitRules'.
     */
    _implicitRules?: Element;
    /**
     * The base language in which the resource is written.
     */
    language?: code;
    /**
     * Contains extension information for property 'language'.
     */
    _language?: Element;
    /**
     * A human-readable narrative that contains a summary of the resource and can be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it "clinically safe" for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety.
     */
    text?: Narrative;
    /**
     * These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, and nor can they have their own independent transaction scope.
     */
    contained?: Resource[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * An absolute URI that is used to identify this implementation guide when it is referenced in a specification, model, design or an instance; also called its canonical identifier. This SHOULD be globally unique and SHOULD be a literal address at which at which an authoritative instance of this implementation guide is (or will be) published. This URL can be the target of a canonical reference. It SHALL remain the same when the implementation guide is stored on different servers.
     */
    url: uri;
    /**
     * Contains extension information for property 'url'.
     */
    _url?: Element;
    /**
     * The identifier that is used to identify this version of the implementation guide when it is referenced in a specification, model, design or instance. This is an arbitrary value managed by the implementation guide author and is not expected to be globally unique. For example, it might be a timestamp (e.g. yyyymmdd) if a managed version is not available. There is also no expectation that versions can be placed in a lexicographical sequence.
     */
    version?: string;
    /**
     * Contains extension information for property 'version'.
     */
    _version?: Element;
    /**
     * A natural language name identifying the implementation guide. This name should be usable as an identifier for the module by machine processing applications such as code generation.
     */
    name: string;
    /**
     * Contains extension information for property 'name'.
     */
    _name?: Element;
    /**
     * A short, descriptive, user-friendly title for the implementation guide.
     */
    title?: string;
    /**
     * Contains extension information for property 'title'.
     */
    _title?: Element;
    /**
     * The status of this implementation guide. Enables tracking the life-cycle of the content.
     */
    status: code;
    /**
     * Contains extension information for property 'status'.
     */
    _status?: Element;
    /**
     * A Boolean value to indicate that this implementation guide is authored for testing purposes (or education/evaluation/marketing) and is not intended to be used for genuine usage.
     */
    experimental?: boolean;
    /**
     * Contains extension information for property 'experimental'.
     */
    _experimental?: Element;
    /**
     * The date  (and optionally time) when the implementation guide was published. The date must change when the business version changes and it must change if the status code changes. In addition, it should change when the substantive content of the implementation guide changes.
     */
    date?: dateTime;
    /**
     * Contains extension information for property 'date'.
     */
    _date?: Element;
    /**
     * The name of the organization or individual that published the implementation guide.
     */
    publisher?: string;
    /**
     * Contains extension information for property 'publisher'.
     */
    _publisher?: Element;
    /**
     * Contact details to assist a user in finding and communicating with the publisher.
     */
    contact?: ContactDetail[];
    /**
     * A free text natural language description of the implementation guide from a consumer's perspective.
     */
    description?: markdown;
    /**
     * Contains extension information for property 'description'.
     */
    _description?: Element;
    /**
     * The content was developed with a focus and intent of supporting the contexts that are listed. These contexts may be general categories (gender, age, ...) or may be references to specific programs (insurance plans, studies, ...) and may be used to assist with indexing and searching for appropriate implementation guide instances.
     */
    useContext?: UsageContext[];
    /**
     * A legal or geographic region in which the implementation guide is intended to be used.
     */
    jurisdiction?: CodeableConcept[];
    /**
     * A copyright statement relating to the implementation guide and/or its contents. Copyright statements are generally legal restrictions on the use and publishing of the implementation guide.
     */
    copyright?: markdown;
    /**
     * Contains extension information for property 'copyright'.
     */
    _copyright?: Element;
    /**
     * The NPM package name for this Implementation Guide, used in the NPM package distribution, which is the primary mechanism by which FHIR based tooling manages IG dependencies. This value must be globally unique, and should be assigned with care.
     */
    packageId: id;
    /**
     * Contains extension information for property 'packageId'.
     */
    _packageId?: Element;
    /**
     * The license that applies to this Implementation Guide, using an SPDX license code, or 'not-open-source'.
     */
    license?: code;
    /**
     * Contains extension information for property 'license'.
     */
    _license?: Element;
    /**
     * The version(s) of the FHIR specification that this ImplementationGuide targets - e.g. describes how to use. The value of this element is the formal version of the specification, without the revision number, e.g. [publication].[major].[minor], which is 4.0.0. for this version.
     */
    fhirVersion: code[];
    /**
     * Contains extension information for property 'fhirVersion'.
     */
    _fhirVersion?: Element[];
    /**
     * Another implementation guide that this implementation depends on. Typically, an implementation guide uses value sets, profiles etc.defined in other implementation guides.
     */
    dependsOn?: ImplementationGuideDependsOn[];
    /**
     * A set of profiles that all resources covered by this implementation guide must conform to.
     */
    global?: ImplementationGuideGlobal[];
    /**
     * The information needed by an IG publisher tool to publish the whole implementation guide.
     */
    definition?: ImplementationGuideDefinition;
    /**
     * Information about an assembled implementation guide, created by the publication tooling.
     */
    manifest?: ImplementationGuideManifest;
}
/**
 * Another implementation guide that this implementation depends on. Typically, an implementation guide uses value sets, profiles etc.defined in other implementation guides.
 */
export interface ImplementationGuideDependsOn {
    /**
     * Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
     */
    id?: string;
    /**
     * Contains extension information for property 'id'.
     */
    _id?: Element;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * A canonical reference to the Implementation guide for the dependency.
     */
    uri: canonical;
    /**
     * The NPM package name for the Implementation Guide that this IG depends on.
     */
    packageId?: id;
    /**
     * Contains extension information for property 'packageId'.
     */
    _packageId?: Element;
    /**
     * The version of the IG that is depended on, when the correct version is required to understand the IG correctly.
     */
    version?: string;
    /**
     * Contains extension information for property 'version'.
     */
    _version?: Element;
}
/**
 * A set of profiles that all resources covered by this implementation guide must conform to.
 */
export interface ImplementationGuideGlobal {
    /**
     * Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
     */
    id?: string;
    /**
     * Contains extension information for property 'id'.
     */
    _id?: Element;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * The type of resource that all instances must conform to.
     */
    type: code;
    /**
     * Contains extension information for property 'type'.
     */
    _type?: Element;
    /**
     * A reference to the profile that all instances must conform to.
     */
    profile: canonical;
}
/**
 * The information needed by an IG publisher tool to publish the whole implementation guide.
 */
export interface ImplementationGuideDefinition {
    /**
     * Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
     */
    id?: string;
    /**
     * Contains extension information for property 'id'.
     */
    _id?: Element;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * A logical group of resources. Logical groups can be used when building pages.
     */
    grouping?: ImplementationGuideDefinitionGrouping[];
    /**
     * A resource that is part of the implementation guide. Conformance resources (value set, structure definition, capability statements etc.) are obvious candidates for inclusion, but any kind of resource can be included as an example resource.
     */
    resource: ImplementationGuideDefinitionResource[];
    /**
     * A page / section in the implementation guide. The root page is the implementation guide home page.
     */
    page?: ImplementationGuideDefinitionPage;
    /**
     * Defines how IG is built by tools.
     */
    parameter?: ImplementationGuideDefinitionParameter[];
    /**
     * A template for building resources.
     */
    template?: ImplementationGuideDefinitionTemplate[];
}
/**
 * A logical group of resources. Logical groups can be used when building pages.
 */
export interface ImplementationGuideDefinitionGrouping {
    /**
     * Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
     */
    id?: string;
    /**
     * Contains extension information for property 'id'.
     */
    _id?: Element;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * The human-readable title to display for the package of resources when rendering the implementation guide.
     */
    name: string;
    /**
     * Contains extension information for property 'name'.
     */
    _name?: Element;
    /**
     * Human readable text describing the package.
     */
    description?: string;
    /**
     * Contains extension information for property 'description'.
     */
    _description?: Element;
}
/**
 * A resource that is part of the implementation guide. Conformance resources (value set, structure definition, capability statements etc.) are obvious candidates for inclusion, but any kind of resource can be included as an example resource.
 */
export interface ImplementationGuideDefinitionResource {
    /**
     * Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
     */
    id?: string;
    /**
     * Contains extension information for property 'id'.
     */
    _id?: Element;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * Where this resource is found.
     */
    reference: Reference;
    /**
     * Indicates the FHIR Version(s) this artifact is intended to apply to. If no versions are specified, the resource is assumed to apply to all the versions stated in ImplementationGuide.fhirVersion.
     */
    fhirVersion?: code[];
    /**
     * Contains extension information for property 'fhirVersion'.
     */
    _fhirVersion?: Element[];
    /**
     * A human assigned name for the resource. All resources SHOULD have a name, but the name may be extracted from the resource (e.g. ValueSet.name).
     */
    name?: string;
    /**
     * Contains extension information for property 'name'.
     */
    _name?: Element;
    /**
     * A description of the reason that a resource has been included in the implementation guide.
     */
    description?: string;
    /**
     * Contains extension information for property 'description'.
     */
    _description?: Element;
    /**
     * If true or a reference, indicates the resource is an example instance.  If a reference is present, indicates that the example is an example of the specified profile.
     */
    exampleBoolean?: boolean;
    /**
     * Contains extension information for property 'exampleBoolean'.
     */
    _exampleBoolean?: Element;
    /**
     * If true or a reference, indicates the resource is an example instance.  If a reference is present, indicates that the example is an example of the specified profile.
     */
    exampleCanonical?: canonical;
    /**
     * Reference to the id of the grouping this resource appears in.
     */
    groupingId?: id;
    /**
     * Contains extension information for property 'groupingId'.
     */
    _groupingId?: Element;
}
/**
 * A page / section in the implementation guide. The root page is the implementation guide home page.
 */
export interface ImplementationGuideDefinitionPage {
    /**
     * Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
     */
    id?: string;
    /**
     * Contains extension information for property 'id'.
     */
    _id?: Element;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * The source address for the page.
     */
    nameUrl: url;
    /**
     * The source address for the page.
     */
    nameReference: Reference;
    /**
     * A short title used to represent this page in navigational structures such as table of contents, bread crumbs, etc.
     */
    title: string;
    /**
     * Contains extension information for property 'title'.
     */
    _title?: Element;
    /**
     * A code that indicates how the page is generated.
     */
    generation: code;
    /**
     * Contains extension information for property 'generation'.
     */
    _generation?: Element;
    /**
     * Nested Pages/Sections under this page.
     */
    page?: ImplementationGuideDefinitionPage[];
}
/**
 * Defines how IG is built by tools.
 */
export interface ImplementationGuideDefinitionParameter {
    /**
     * Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
     */
    id?: string;
    /**
     * Contains extension information for property 'id'.
     */
    _id?: Element;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * apply | path-resource | path-pages | path-tx-cache | expansion-parameter | rule-broken-links | generate-xml | generate-json | generate-turtle | html-template.
     */
    code: code;
    /**
     * Contains extension information for property 'code'.
     */
    _code?: Element;
    /**
     * Value for named type.
     */
    value: string;
    /**
     * Contains extension information for property 'value'.
     */
    _value?: Element;
}
/**
 * A template for building resources.
 */
export interface ImplementationGuideDefinitionTemplate {
    /**
     * Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
     */
    id?: string;
    /**
     * Contains extension information for property 'id'.
     */
    _id?: Element;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * Type of template specified.
     */
    code: code;
    /**
     * Contains extension information for property 'code'.
     */
    _code?: Element;
    /**
     * The source location for the template.
     */
    source: string;
    /**
     * Contains extension information for property 'source'.
     */
    _source?: Element;
    /**
     * The scope in which the template applies.
     */
    scope?: string;
    /**
     * Contains extension information for property 'scope'.
     */
    _scope?: Element;
}
/**
 * Information about an assembled implementation guide, created by the publication tooling.
 */
export interface ImplementationGuideManifest {
    /**
     * Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
     */
    id?: string;
    /**
     * Contains extension information for property 'id'.
     */
    _id?: Element;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * A pointer to official web page, PDF or other rendering of the implementation guide.
     */
    rendering?: url;
    /**
     * A resource that is part of the implementation guide. Conformance resources (value set, structure definition, capability statements etc.) are obvious candidates for inclusion, but any kind of resource can be included as an example resource.
     */
    resource: ImplementationGuideManifestResource[];
    /**
     * Information about a page within the IG.
     */
    page?: ImplementationGuideManifestPage[];
    /**
     * Indicates a relative path to an image that exists within the IG.
     */
    image?: string[];
    /**
     * Contains extension information for property 'image'.
     */
    _image?: Element[];
    /**
     * Indicates the relative path of an additional non-page, non-image file that is part of the IG - e.g. zip, jar and similar files that could be the target of a hyperlink in a derived IG.
     */
    other?: string[];
    /**
     * Contains extension information for property 'other'.
     */
    _other?: Element[];
}
/**
 * A resource that is part of the implementation guide. Conformance resources (value set, structure definition, capability statements etc.) are obvious candidates for inclusion, but any kind of resource can be included as an example resource.
 */
export interface ImplementationGuideManifestResource {
    /**
     * Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
     */
    id?: string;
    /**
     * Contains extension information for property 'id'.
     */
    _id?: Element;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * Where this resource is found.
     */
    reference: Reference;
    /**
     * If true or a reference, indicates the resource is an example instance.  If a reference is present, indicates that the example is an example of the specified profile.
     */
    exampleBoolean?: boolean;
    /**
     * Contains extension information for property 'exampleBoolean'.
     */
    _exampleBoolean?: Element;
    /**
     * If true or a reference, indicates the resource is an example instance.  If a reference is present, indicates that the example is an example of the specified profile.
     */
    exampleCanonical?: canonical;
    /**
     * The relative path for primary page for this resource within the IG.
     */
    relativePath?: url;
}
/**
 * Information about a page within the IG.
 */
export interface ImplementationGuideManifestPage {
    /**
     * Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
     */
    id?: string;
    /**
     * Contains extension information for property 'id'.
     */
    _id?: Element;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * Relative path to the page.
     */
    name: string;
    /**
     * Contains extension information for property 'name'.
     */
    _name?: Element;
    /**
     * Label for the page intended for human display.
     */
    title?: string;
    /**
     * Contains extension information for property 'title'.
     */
    _title?: Element;
    /**
     * The name of an anchor available on the page.
     */
    anchor?: string[];
    /**
     * Contains extension information for property 'anchor'.
     */
    _anchor?: Element[];
}
/**
 * Details of a Health Insurance product/plan provided by an organization.
 */
export interface InsurancePlan {
    /**
     * The type of the resource.
     */
    resourceType: string;
    /**
     * The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes.
     */
    id?: id;
    /**
     * Contains extension information for property 'id'.
     */
    _id?: Element;
    /**
     * The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource.
     */
    meta?: Meta;
    /**
     * A reference to a set of rules that were followed when the resource was constructed, and which must be understood when processing the content. Often, this is a reference to an implementation guide that defines the special rules along with other profiles etc.
     */
    implicitRules?: uri;
    /**
     * Contains extension information for property 'implicitRules'.
     */
    _implicitRules?: Element;
    /**
     * The base language in which the resource is written.
     */
    language?: code;
    /**
     * Contains extension information for property 'language'.
     */
    _language?: Element;
    /**
     * A human-readable narrative that contains a summary of the resource and can be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it "clinically safe" for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety.
     */
    text?: Narrative;
    /**
     * These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, and nor can they have their own independent transaction scope.
     */
    contained?: Resource[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * Business identifiers assigned to this health insurance product which remain constant as the resource is updated and propagates from server to server.
     */
    identifier?: Identifier[];
    /**
     * The current state of the health insurance product.
     */
    status?: code;
    /**
     * Contains extension information for property 'status'.
     */
    _status?: Element;
    /**
     * The kind of health insurance product.
     */
    type?: CodeableConcept[];
    /**
     * Official name of the health insurance product as designated by the owner.
     */
    name?: string;
    /**
     * Contains extension information for property 'name'.
     */
    _name?: Element;
    /**
     * A list of alternate names that the product is known as, or was known as in the past.
     */
    alias?: string[];
    /**
     * Contains extension information for property 'alias'.
     */
    _alias?: Element[];
    /**
     * The period of time that the health insurance product is available.
     */
    period?: Period;
    /**
     * The entity that is providing  the health insurance product and underwriting the risk.  This is typically an insurance carriers, other third-party payers, or health plan sponsors comonly referred to as 'payers'.
     */
    ownedBy?: Reference;
    /**
     * An organization which administer other services such as underwriting, customer service and/or claims processing on behalf of the health insurance product owner.
     */
    administeredBy?: Reference;
    /**
     * The geographic region in which a health insurance product's benefits apply.
     */
    coverageArea?: Reference[];
    /**
     * The contact for the health insurance product for a certain purpose.
     */
    contact?: InsurancePlanContact[];
    /**
     * The technical endpoints providing access to services operated for the health insurance product.
     */
    endpoint?: Reference[];
    /**
     * Reference to the network included in the health insurance product.
     */
    network?: Reference[];
    /**
     * Details about the coverage offered by the insurance product.
     */
    coverage?: InsurancePlanCoverage[];
    /**
     * Details about an insurance plan.
     */
    plan?: InsurancePlanPlan[];
}
/**
 * The contact for the health insurance product for a certain purpose.
 */
export interface InsurancePlanContact {
    /**
     * Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
     */
    id?: string;
    /**
     * Contains extension information for property 'id'.
     */
    _id?: Element;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * Indicates a purpose for which the contact can be reached.
     */
    purpose?: CodeableConcept;
    /**
     * A name associated with the contact.
     */
    name?: HumanName;
    /**
     * A contact detail (e.g. a telephone number or an email address) by which the party may be contacted.
     */
    telecom?: ContactPoint[];
    /**
     * Visiting or postal addresses for the contact.
     */
    address?: Address;
}
/**
 * Details about the coverage offered by the insurance product.
 */
export interface InsurancePlanCoverage {
    /**
     * Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
     */
    id?: string;
    /**
     * Contains extension information for property 'id'.
     */
    _id?: Element;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * Type of coverage  (Medical; Dental; Mental Health; Substance Abuse; Vision; Drug; Short Term; Long Term Care; Hospice; Home Health).
     */
    type: CodeableConcept;
    /**
     * Reference to the network that providing the type of coverage.
     */
    network?: Reference[];
    /**
     * Specific benefits under this type of coverage.
     */
    benefit: InsurancePlanCoverageBenefit[];
}
/**
 * Specific benefits under this type of coverage.
 */
export interface InsurancePlanCoverageBenefit {
    /**
     * Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
     */
    id?: string;
    /**
     * Contains extension information for property 'id'.
     */
    _id?: Element;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * Type of benefit (primary care; speciality care; inpatient; outpatient).
     */
    type: CodeableConcept;
    /**
     * The referral requirements to have access/coverage for this benefit.
     */
    requirement?: string;
    /**
     * Contains extension information for property 'requirement'.
     */
    _requirement?: Element;
    /**
     * The specific limits on the benefit.
     */
    limit?: InsurancePlanCoverageBenefitLimit[];
}
/**
 * The specific limits on the benefit.
 */
export interface InsurancePlanCoverageBenefitLimit {
    /**
     * Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
     */
    id?: string;
    /**
     * Contains extension information for property 'id'.
     */
    _id?: Element;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * The maximum amount of a service item a plan will pay for a covered benefit.  For examples. wellness visits, or eyeglasses.
     */
    value?: Quantity;
    /**
     * The specific limit on the benefit.
     */
    code?: CodeableConcept;
}
/**
 * Details about an insurance plan.
 */
export interface InsurancePlanPlan {
    /**
     * Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
     */
    id?: string;
    /**
     * Contains extension information for property 'id'.
     */
    _id?: Element;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * Business identifiers assigned to this health insurance plan which remain constant as the resource is updated and propagates from server to server.
     */
    identifier?: Identifier[];
    /**
     * Type of plan. For example, "Platinum" or "High Deductable".
     */
    type?: CodeableConcept;
    /**
     * The geographic region in which a health insurance plan's benefits apply.
     */
    coverageArea?: Reference[];
    /**
     * Reference to the network that providing the type of coverage.
     */
    network?: Reference[];
    /**
     * Overall costs associated with the plan.
     */
    generalCost?: InsurancePlanPlanGeneralCost[];
    /**
     * Costs associated with the coverage provided by the product.
     */
    specificCost?: InsurancePlanPlanSpecificCost[];
}
/**
 * Overall costs associated with the plan.
 */
export interface InsurancePlanPlanGeneralCost {
    /**
     * Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
     */
    id?: string;
    /**
     * Contains extension information for property 'id'.
     */
    _id?: Element;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * Type of cost.
     */
    type?: CodeableConcept;
    /**
     * Number of participants enrolled in the plan.
     */
    groupSize?: positiveInt;
    /**
     * Contains extension information for property 'groupSize'.
     */
    _groupSize?: Element;
    /**
     * Value of the cost.
     */
    cost?: Money;
    /**
     * Additional information about the general costs associated with this plan.
     */
    comment?: string;
    /**
     * Contains extension information for property 'comment'.
     */
    _comment?: Element;
}
/**
 * Costs associated with the coverage provided by the product.
 */
export interface InsurancePlanPlanSpecificCost {
    /**
     * Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
     */
    id?: string;
    /**
     * Contains extension information for property 'id'.
     */
    _id?: Element;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * General category of benefit (Medical; Dental; Vision; Drug; Mental Health; Substance Abuse; Hospice, Home Health).
     */
    category: CodeableConcept;
    /**
     * List of the specific benefits under this category of benefit.
     */
    benefit?: InsurancePlanPlanSpecificCostBenefit[];
}
/**
 * List of the specific benefits under this category of benefit.
 */
export interface InsurancePlanPlanSpecificCostBenefit {
    /**
     * Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
     */
    id?: string;
    /**
     * Contains extension information for property 'id'.
     */
    _id?: Element;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * Type of specific benefit (preventative; primary care office visit; speciality office visit; hospitalization; emergency room; urgent care).
     */
    type: CodeableConcept;
    /**
     * List of the costs associated with a specific benefit.
     */
    cost?: InsurancePlanPlanSpecificCostBenefitCost[];
}
/**
 * List of the costs associated with a specific benefit.
 */
export interface InsurancePlanPlanSpecificCostBenefitCost {
    /**
     * Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
     */
    id?: string;
    /**
     * Contains extension information for property 'id'.
     */
    _id?: Element;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * Type of cost (copay; individual cap; family cap; coinsurance; deductible).
     */
    type: CodeableConcept;
    /**
     * Whether the cost applies to in-network or out-of-network providers (in-network; out-of-network; other).
     */
    applicability?: CodeableConcept;
    /**
     * Additional information about the cost, such as information about funding sources (e.g. HSA, HRA, FSA, RRA).
     */
    qualifiers?: CodeableConcept[];
    /**
     * The actual cost value. (some of the costs may be represented as percentages rather than currency, e.g. 10% coinsurance).
     */
    value?: Quantity;
}
/**
 * Invoice containing collected ChargeItems from an Account with calculated individual and total price for Billing purpose.
 */
export interface Invoice {
    /**
     * The type of the resource.
     */
    resourceType: string;
    /**
     * The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes.
     */
    id?: id;
    /**
     * Contains extension information for property 'id'.
     */
    _id?: Element;
    /**
     * The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource.
     */
    meta?: Meta;
    /**
     * A reference to a set of rules that were followed when the resource was constructed, and which must be understood when processing the content. Often, this is a reference to an implementation guide that defines the special rules along with other profiles etc.
     */
    implicitRules?: uri;
    /**
     * Contains extension information for property 'implicitRules'.
     */
    _implicitRules?: Element;
    /**
     * The base language in which the resource is written.
     */
    language?: code;
    /**
     * Contains extension information for property 'language'.
     */
    _language?: Element;
    /**
     * A human-readable narrative that contains a summary of the resource and can be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it "clinically safe" for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety.
     */
    text?: Narrative;
    /**
     * These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, and nor can they have their own independent transaction scope.
     */
    contained?: Resource[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * Identifier of this Invoice, often used for reference in correspondence about this invoice or for tracking of payments.
     */
    identifier?: Identifier[];
    /**
     * The current state of the Invoice.
     */
    status: code;
    /**
     * Contains extension information for property 'status'.
     */
    _status?: Element;
    /**
     * In case of Invoice cancellation a reason must be given (entered in error, superseded by corrected invoice etc.).
     */
    cancelledReason?: string;
    /**
     * Contains extension information for property 'cancelledReason'.
     */
    _cancelledReason?: Element;
    /**
     * Type of Invoice depending on domain, realm an usage (e.g. internal/external, dental, preliminary).
     */
    type?: CodeableConcept;
    /**
     * The individual or set of individuals receiving the goods and services billed in this invoice.
     */
    subject?: Reference;
    /**
     * The individual or Organization responsible for balancing of this invoice.
     */
    recipient?: Reference;
    /**
     * Date/time(s) of when this Invoice was posted.
     */
    date?: dateTime;
    /**
     * Contains extension information for property 'date'.
     */
    _date?: Element;
    /**
     * Indicates who or what performed or participated in the charged service.
     */
    participant?: InvoiceParticipant[];
    /**
     * The organizationissuing the Invoice.
     */
    issuer?: Reference;
    /**
     * Account which is supposed to be balanced with this Invoice.
     */
    account?: Reference;
    /**
     * Each line item represents one charge for goods and services rendered. Details such as date, code and amount are found in the referenced ChargeItem resource.
     */
    lineItem?: InvoiceLineItem[];
    /**
     * The total amount for the Invoice may be calculated as the sum of the line items with surcharges/deductions that apply in certain conditions.  The priceComponent element can be used to offer transparency to the recipient of the Invoice of how the total price was calculated.
     */
    totalPriceComponent?: InvoiceLineItemPriceComponent[];
    /**
     * Invoice total , taxes excluded.
     */
    totalNet?: Money;
    /**
     * Invoice total, tax included.
     */
    totalGross?: Money;
    /**
     * Payment details such as banking details, period of payment, deductibles, methods of payment.
     */
    paymentTerms?: markdown;
    /**
     * Contains extension information for property 'paymentTerms'.
     */
    _paymentTerms?: Element;
    /**
     * Comments made about the invoice by the issuer, subject, or other participants.
     */
    note?: Annotation[];
}
/**
 * Indicates who or what performed or participated in the charged service.
 */
export interface InvoiceParticipant {
    /**
     * Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
     */
    id?: string;
    /**
     * Contains extension information for property 'id'.
     */
    _id?: Element;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * Describes the type of involvement (e.g. transcriptionist, creator etc.). If the invoice has been created automatically, the Participant may be a billing engine or another kind of device.
     */
    role?: CodeableConcept;
    /**
     * The device, practitioner, etc. who performed or participated in the service.
     */
    actor: Reference;
}
/**
 * Each line item represents one charge for goods and services rendered. Details such as date, code and amount are found in the referenced ChargeItem resource.
 */
export interface InvoiceLineItem {
    /**
     * Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
     */
    id?: string;
    /**
     * Contains extension information for property 'id'.
     */
    _id?: Element;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * Sequence in which the items appear on the invoice.
     */
    sequence?: positiveInt;
    /**
     * Contains extension information for property 'sequence'.
     */
    _sequence?: Element;
    /**
     * The ChargeItem contains information such as the billing code, date, amount etc. If no further details are required for the lineItem, inline billing codes can be added using the CodeableConcept data type instead of the Reference.
     */
    chargeitemReference: Reference;
    /**
     * The ChargeItem contains information such as the billing code, date, amount etc. If no further details are required for the lineItem, inline billing codes can be added using the CodeableConcept data type instead of the Reference.
     */
    chargeitemCodeableConcept: CodeableConcept;
    /**
     * The price for a ChargeItem may be calculated as a base price with surcharges/deductions that apply in certain conditions. A ChargeItemDefinition resource that defines the prices, factors and conditions that apply to a billing code is currently under development. The priceComponent element can be used to offer transparency to the recipient of the Invoice as to how the prices have been calculated.
     */
    priceComponent?: InvoiceLineItemPriceComponent[];
}
/**
 * The price for a ChargeItem may be calculated as a base price with surcharges/deductions that apply in certain conditions. A ChargeItemDefinition resource that defines the prices, factors and conditions that apply to a billing code is currently under development. The priceComponent element can be used to offer transparency to the recipient of the Invoice as to how the prices have been calculated.
 */
export interface InvoiceLineItemPriceComponent {
    /**
     * Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
     */
    id?: string;
    /**
     * Contains extension information for property 'id'.
     */
    _id?: Element;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * This code identifies the type of the component.
     */
    type: code;
    /**
     * Contains extension information for property 'type'.
     */
    _type?: Element;
    /**
     * A code that identifies the component. Codes may be used to differentiate between kinds of taxes, surcharges, discounts etc.
     */
    code?: CodeableConcept;
    /**
     * The factor that has been applied on the base price for calculating this component.
     */
    factor?: decimal;
    /**
     * Contains extension information for property 'factor'.
     */
    _factor?: Element;
    /**
     * The amount calculated for this component.
     */
    amount?: Money;
}
/**
 * The Library resource is a general-purpose container for knowledge asset definitions. It can be used to describe and expose existing knowledge assets such as logic libraries and information model descriptions, as well as to describe a collection of knowledge assets.
 */
export interface Library {
    /**
     * The type of the resource.
     */
    resourceType: string;
    /**
     * The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes.
     */
    id?: id;
    /**
     * Contains extension information for property 'id'.
     */
    _id?: Element;
    /**
     * The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource.
     */
    meta?: Meta;
    /**
     * A reference to a set of rules that were followed when the resource was constructed, and which must be understood when processing the content. Often, this is a reference to an implementation guide that defines the special rules along with other profiles etc.
     */
    implicitRules?: uri;
    /**
     * Contains extension information for property 'implicitRules'.
     */
    _implicitRules?: Element;
    /**
     * The base language in which the resource is written.
     */
    language?: code;
    /**
     * Contains extension information for property 'language'.
     */
    _language?: Element;
    /**
     * A human-readable narrative that contains a summary of the resource and can be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it "clinically safe" for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety.
     */
    text?: Narrative;
    /**
     * These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, and nor can they have their own independent transaction scope.
     */
    contained?: Resource[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * An absolute URI that is used to identify this library when it is referenced in a specification, model, design or an instance; also called its canonical identifier. This SHOULD be globally unique and SHOULD be a literal address at which at which an authoritative instance of this library is (or will be) published. This URL can be the target of a canonical reference. It SHALL remain the same when the library is stored on different servers.
     */
    url?: uri;
    /**
     * Contains extension information for property 'url'.
     */
    _url?: Element;
    /**
     * A formal identifier that is used to identify this library when it is represented in other formats, or referenced in a specification, model, design or an instance. e.g. CMS or NQF identifiers for a measure artifact. Note that at least one identifier is required for non-experimental active artifacts.
     */
    identifier?: Identifier[];
    /**
     * The identifier that is used to identify this version of the library when it is referenced in a specification, model, design or instance. This is an arbitrary value managed by the library author and is not expected to be globally unique. For example, it might be a timestamp (e.g. yyyymmdd) if a managed version is not available. There is also no expectation that versions can be placed in a lexicographical sequence. To provide a version consistent with the Decision Support Service specification, use the format Major.Minor.Revision (e.g. 1.0.0). For more information on versioning knowledge assets, refer to the Decision Support Service specification. Note that a version is required for non-experimental active artifacts.
     */
    version?: string;
    /**
     * Contains extension information for property 'version'.
     */
    _version?: Element;
    /**
     * A natural language name identifying the library. This name should be usable as an identifier for the module by machine processing applications such as code generation.
     */
    name?: string;
    /**
     * Contains extension information for property 'name'.
     */
    _name?: Element;
    /**
     * A short, descriptive, user-friendly title for the library.
     */
    title?: string;
    /**
     * Contains extension information for property 'title'.
     */
    _title?: Element;
    /**
     * An explanatory or alternate title for the library giving additional information about its content.
     */
    subtitle?: string;
    /**
     * Contains extension information for property 'subtitle'.
     */
    _subtitle?: Element;
    /**
     * The status of this library. Enables tracking the life-cycle of the content.
     */
    status: code;
    /**
     * Contains extension information for property 'status'.
     */
    _status?: Element;
    /**
     * A Boolean value to indicate that this library is authored for testing purposes (or education/evaluation/marketing) and is not intended to be used for genuine usage.
     */
    experimental?: boolean;
    /**
     * Contains extension information for property 'experimental'.
     */
    _experimental?: Element;
    /**
     * Identifies the type of library such as a Logic Library, Model Definition, Asset Collection, or Module Definition.
     */
    type: CodeableConcept;
    /**
     * A code or group definition that describes the intended subject of the contents of the library.
     */
    subjectCodeableConcept?: CodeableConcept;
    /**
     * A code or group definition that describes the intended subject of the contents of the library.
     */
    subjectReference?: Reference;
    /**
     * The date  (and optionally time) when the library was published. The date must change when the business version changes and it must change if the status code changes. In addition, it should change when the substantive content of the library changes.
     */
    date?: dateTime;
    /**
     * Contains extension information for property 'date'.
     */
    _date?: Element;
    /**
     * The name of the organization or individual that published the library.
     */
    publisher?: string;
    /**
     * Contains extension information for property 'publisher'.
     */
    _publisher?: Element;
    /**
     * Contact details to assist a user in finding and communicating with the publisher.
     */
    contact?: ContactDetail[];
    /**
     * A free text natural language description of the library from a consumer's perspective.
     */
    description?: markdown;
    /**
     * Contains extension information for property 'description'.
     */
    _description?: Element;
    /**
     * The content was developed with a focus and intent of supporting the contexts that are listed. These contexts may be general categories (gender, age, ...) or may be references to specific programs (insurance plans, studies, ...) and may be used to assist with indexing and searching for appropriate library instances.
     */
    useContext?: UsageContext[];
    /**
     * A legal or geographic region in which the library is intended to be used.
     */
    jurisdiction?: CodeableConcept[];
    /**
     * Explanation of why this library is needed and why it has been designed as it has.
     */
    purpose?: markdown;
    /**
     * Contains extension information for property 'purpose'.
     */
    _purpose?: Element;
    /**
     * A detailed description of how the library is used from a clinical perspective.
     */
    usage?: string;
    /**
     * Contains extension information for property 'usage'.
     */
    _usage?: Element;
    /**
     * A copyright statement relating to the library and/or its contents. Copyright statements are generally legal restrictions on the use and publishing of the library.
     */
    copyright?: markdown;
    /**
     * Contains extension information for property 'copyright'.
     */
    _copyright?: Element;
    /**
     * The date on which the resource content was approved by the publisher. Approval happens once when the content is officially approved for usage.
     */
    approvalDate?: date;
    /**
     * Contains extension information for property 'approvalDate'.
     */
    _approvalDate?: Element;
    /**
     * The date on which the resource content was last reviewed. Review happens periodically after approval but does not change the original approval date.
     */
    lastReviewDate?: date;
    /**
     * Contains extension information for property 'lastReviewDate'.
     */
    _lastReviewDate?: Element;
    /**
     * The period during which the library content was or is planned to be in active use.
     */
    effectivePeriod?: Period;
    /**
     * Descriptive topics related to the content of the library. Topics provide a high-level categorization of the library that can be useful for filtering and searching.
     */
    topic?: CodeableConcept[];
    /**
     * An individiual or organization primarily involved in the creation and maintenance of the content.
     */
    author?: ContactDetail[];
    /**
     * An individual or organization primarily responsible for internal coherence of the content.
     */
    editor?: ContactDetail[];
    /**
     * An individual or organization primarily responsible for review of some aspect of the content.
     */
    reviewer?: ContactDetail[];
    /**
     * An individual or organization responsible for officially endorsing the content for use in some setting.
     */
    endorser?: ContactDetail[];
    /**
     * Related artifacts such as additional documentation, justification, or bibliographic references.
     */
    relatedArtifact?: RelatedArtifact[];
    /**
     * The parameter element defines parameters used by the library.
     */
    parameter?: ParameterDefinition[];
    /**
     * Describes a set of data that must be provided in order to be able to successfully perform the computations defined by the library.
     */
    dataRequirement?: DataRequirement[];
    /**
     * The content of the library as an Attachment. The content may be a reference to a url, or may be directly embedded as a base-64 string. Either way, the contentType of the attachment determines how to interpret the content.
     */
    content?: Attachment[];
}
/**
 * Identifies two or more records (resource instances) that refer to the same real-world "occurrence".
 */
export interface Linkage {
    /**
     * The type of the resource.
     */
    resourceType: string;
    /**
     * The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes.
     */
    id?: id;
    /**
     * Contains extension information for property 'id'.
     */
    _id?: Element;
    /**
     * The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource.
     */
    meta?: Meta;
    /**
     * A reference to a set of rules that were followed when the resource was constructed, and which must be understood when processing the content. Often, this is a reference to an implementation guide that defines the special rules along with other profiles etc.
     */
    implicitRules?: uri;
    /**
     * Contains extension information for property 'implicitRules'.
     */
    _implicitRules?: Element;
    /**
     * The base language in which the resource is written.
     */
    language?: code;
    /**
     * Contains extension information for property 'language'.
     */
    _language?: Element;
    /**
     * A human-readable narrative that contains a summary of the resource and can be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it "clinically safe" for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety.
     */
    text?: Narrative;
    /**
     * These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, and nor can they have their own independent transaction scope.
     */
    contained?: Resource[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * Indicates whether the asserted set of linkages are considered to be "in effect".
     */
    active?: boolean;
    /**
     * Contains extension information for property 'active'.
     */
    _active?: Element;
    /**
     * Identifies the user or organization responsible for asserting the linkages as well as the user or organization who establishes the context in which the nature of each linkage is evaluated.
     */
    author?: Reference;
    /**
     * Identifies which record considered as the reference to the same real-world occurrence as well as how the items should be evaluated within the collection of linked items.
     */
    item: LinkageItem[];
}
/**
 * Identifies which record considered as the reference to the same real-world occurrence as well as how the items should be evaluated within the collection of linked items.
 */
export interface LinkageItem {
    /**
     * Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
     */
    id?: string;
    /**
     * Contains extension information for property 'id'.
     */
    _id?: Element;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * Distinguishes which item is "source of truth" (if any) and which items are no longer considered to be current representations.
     */
    type: code;
    /**
     * Contains extension information for property 'type'.
     */
    _type?: Element;
    /**
     * The resource instance being linked as part of the group.
     */
    resource: Reference;
}
/**
 * A list is a curated collection of resources.
 */
export interface List {
    /**
     * The type of the resource.
     */
    resourceType: string;
    /**
     * The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes.
     */
    id?: id;
    /**
     * Contains extension information for property 'id'.
     */
    _id?: Element;
    /**
     * The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource.
     */
    meta?: Meta;
    /**
     * A reference to a set of rules that were followed when the resource was constructed, and which must be understood when processing the content. Often, this is a reference to an implementation guide that defines the special rules along with other profiles etc.
     */
    implicitRules?: uri;
    /**
     * Contains extension information for property 'implicitRules'.
     */
    _implicitRules?: Element;
    /**
     * The base language in which the resource is written.
     */
    language?: code;
    /**
     * Contains extension information for property 'language'.
     */
    _language?: Element;
    /**
     * A human-readable narrative that contains a summary of the resource and can be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it "clinically safe" for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety.
     */
    text?: Narrative;
    /**
     * These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, and nor can they have their own independent transaction scope.
     */
    contained?: Resource[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * Identifier for the List assigned for business purposes outside the context of FHIR.
     */
    identifier?: Identifier[];
    /**
     * Indicates the current state of this list.
     */
    status: code;
    /**
     * Contains extension information for property 'status'.
     */
    _status?: Element;
    /**
     * How this list was prepared - whether it is a working list that is suitable for being maintained on an ongoing basis, or if it represents a snapshot of a list of items from another source, or whether it is a prepared list where items may be marked as added, modified or deleted.
     */
    mode: code;
    /**
     * Contains extension information for property 'mode'.
     */
    _mode?: Element;
    /**
     * A label for the list assigned by the author.
     */
    title?: string;
    /**
     * Contains extension information for property 'title'.
     */
    _title?: Element;
    /**
     * This code defines the purpose of the list - why it was created.
     */
    code?: CodeableConcept;
    /**
     * The common subject (or patient) of the resources that are in the list if there is one.
     */
    subject?: Reference;
    /**
     * The encounter that is the context in which this list was created.
     */
    encounter?: Reference;
    /**
     * The date that the list was prepared.
     */
    date?: dateTime;
    /**
     * Contains extension information for property 'date'.
     */
    _date?: Element;
    /**
     * The entity responsible for deciding what the contents of the list were. Where the list was created by a human, this is the same as the author of the list.
     */
    source?: Reference;
    /**
     * What order applies to the items in the list.
     */
    orderedBy?: CodeableConcept;
    /**
     * Comments that apply to the overall list.
     */
    note?: Annotation[];
    /**
     * Entries in this list.
     */
    entry?: ListEntry[];
    /**
     * If the list is empty, why the list is empty.
     */
    emptyReason?: CodeableConcept;
}
/**
 * Entries in this list.
 */
export interface ListEntry {
    /**
     * Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
     */
    id?: string;
    /**
     * Contains extension information for property 'id'.
     */
    _id?: Element;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * The flag allows the system constructing the list to indicate the role and significance of the item in the list.
     */
    flag?: CodeableConcept;
    /**
     * True if this item is marked as deleted in the list.
     */
    deleted?: boolean;
    /**
     * Contains extension information for property 'deleted'.
     */
    _deleted?: Element;
    /**
     * When this item was added to the list.
     */
    date?: dateTime;
    /**
     * Contains extension information for property 'date'.
     */
    _date?: Element;
    /**
     * A reference to the actual resource from which data was derived.
     */
    item: Reference;
}
/**
 * Details and position information for a physical place where services are provided and resources and participants may be stored, found, contained, or accommodated.
 */
export interface Location {
    /**
     * The type of the resource.
     */
    resourceType: string;
    /**
     * The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes.
     */
    id?: id;
    /**
     * Contains extension information for property 'id'.
     */
    _id?: Element;
    /**
     * The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource.
     */
    meta?: Meta;
    /**
     * A reference to a set of rules that were followed when the resource was constructed, and which must be understood when processing the content. Often, this is a reference to an implementation guide that defines the special rules along with other profiles etc.
     */
    implicitRules?: uri;
    /**
     * Contains extension information for property 'implicitRules'.
     */
    _implicitRules?: Element;
    /**
     * The base language in which the resource is written.
     */
    language?: code;
    /**
     * Contains extension information for property 'language'.
     */
    _language?: Element;
    /**
     * A human-readable narrative that contains a summary of the resource and can be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it "clinically safe" for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety.
     */
    text?: Narrative;
    /**
     * These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, and nor can they have their own independent transaction scope.
     */
    contained?: Resource[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * Unique code or number identifying the location to its users.
     */
    identifier?: Identifier[];
    /**
     * The status property covers the general availability of the resource, not the current value which may be covered by the operationStatus, or by a schedule/slots if they are configured for the location.
     */
    status?: code;
    /**
     * Contains extension information for property 'status'.
     */
    _status?: Element;
    /**
     * The operational status covers operation values most relevant to beds (but can also apply to rooms/units/chairs/etc. such as an isolation unit/dialysis chair). This typically covers concepts such as contamination, housekeeping, and other activities like maintenance.
     */
    operationalStatus?: Coding;
    /**
     * Name of the location as used by humans. Does not need to be unique.
     */
    name?: string;
    /**
     * Contains extension information for property 'name'.
     */
    _name?: Element;
    /**
     * A list of alternate names that the location is known as, or was known as, in the past.
     */
    alias?: string[];
    /**
     * Contains extension information for property 'alias'.
     */
    _alias?: Element[];
    /**
     * Description of the Location, which helps in finding or referencing the place.
     */
    description?: string;
    /**
     * Contains extension information for property 'description'.
     */
    _description?: Element;
    /**
     * Indicates whether a resource instance represents a specific location or a class of locations.
     */
    mode?: code;
    /**
     * Contains extension information for property 'mode'.
     */
    _mode?: Element;
    /**
     * Indicates the type of function performed at the location.
     */
    type?: CodeableConcept[];
    /**
     * The contact details of communication devices available at the location. This can include phone numbers, fax numbers, mobile numbers, email addresses and web sites.
     */
    telecom?: ContactPoint[];
    /**
     * Physical location.
     */
    address?: Address;
    /**
     * Physical form of the location, e.g. building, room, vehicle, road.
     */
    physicalType?: CodeableConcept;
    /**
     * The absolute geographic location of the Location, expressed using the WGS84 datum (This is the same co-ordinate system used in KML).
     */
    position?: LocationPosition;
    /**
     * The organization responsible for the provisioning and upkeep of the location.
     */
    managingOrganization?: Reference;
    /**
     * Another Location of which this Location is physically a part of.
     */
    partOf?: Reference;
    /**
     * What days/times during a week is this location usually open.
     */
    hoursOfOperation?: LocationHoursOfOperation[];
    /**
     * A description of when the locations opening ours are different to normal, e.g. public holiday availability. Succinctly describing all possible exceptions to normal site availability as detailed in the opening hours Times.
     */
    availabilityExceptions?: string;
    /**
     * Contains extension information for property 'availabilityExceptions'.
     */
    _availabilityExceptions?: Element;
    /**
     * Technical endpoints providing access to services operated for the location.
     */
    endpoint?: Reference[];
}
/**
 * The absolute geographic location of the Location, expressed using the WGS84 datum (This is the same co-ordinate system used in KML).
 */
export interface LocationPosition {
    /**
     * Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
     */
    id?: string;
    /**
     * Contains extension information for property 'id'.
     */
    _id?: Element;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * Longitude. The value domain and the interpretation are the same as for the text of the longitude element in KML (see notes below).
     */
    longitude: decimal;
    /**
     * Contains extension information for property 'longitude'.
     */
    _longitude?: Element;
    /**
     * Latitude. The value domain and the interpretation are the same as for the text of the latitude element in KML (see notes below).
     */
    latitude: decimal;
    /**
     * Contains extension information for property 'latitude'.
     */
    _latitude?: Element;
    /**
     * Altitude. The value domain and the interpretation are the same as for the text of the altitude element in KML (see notes below).
     */
    altitude?: decimal;
    /**
     * Contains extension information for property 'altitude'.
     */
    _altitude?: Element;
}
/**
 * What days/times during a week is this location usually open.
 */
export interface LocationHoursOfOperation {
    /**
     * Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
     */
    id?: string;
    /**
     * Contains extension information for property 'id'.
     */
    _id?: Element;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * Indicates which days of the week are available between the start and end Times.
     */
    daysOfWeek?: code[];
    /**
     * Contains extension information for property 'daysOfWeek'.
     */
    _daysOfWeek?: Element[];
    /**
     * The Location is open all day.
     */
    allDay?: boolean;
    /**
     * Contains extension information for property 'allDay'.
     */
    _allDay?: Element;
    /**
     * Time that the Location opens.
     */
    openingTime?: time;
    /**
     * Contains extension information for property 'openingTime'.
     */
    _openingTime?: Element;
    /**
     * Time that the Location closes.
     */
    closingTime?: time;
    /**
     * Contains extension information for property 'closingTime'.
     */
    _closingTime?: Element;
}
/**
 * The marketing status describes the date when a medicinal product is actually put on the market or the date as of which it is no longer available.
 */
export interface MarketingStatus {
    /**
     * Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
     */
    id?: string;
    /**
     * Contains extension information for property 'id'.
     */
    _id?: Element;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * The country in which the marketing authorisation has been granted shall be specified It should be specified using the ISO 3166 ‑ 1 alpha-2 code elements.
     */
    country: CodeableConcept;
    /**
     * Where a Medicines Regulatory Agency has granted a marketing authorisation for which specific provisions within a jurisdiction apply, the jurisdiction can be specified using an appropriate controlled terminology The controlled term and the controlled term identifier shall be specified.
     */
    jurisdiction?: CodeableConcept;
    /**
     * This attribute provides information on the status of the marketing of the medicinal product See ISO/TS 20443 for more information and examples.
     */
    status: CodeableConcept;
    /**
     * The date when the Medicinal Product is placed on the market by the Marketing Authorisation Holder (or where applicable, the manufacturer/distributor) in a country and/or jurisdiction shall be provided A complete date consisting of day, month and year shall be specified using the ISO 8601 date format NOTE “Placed on the market” refers to the release of the Medicinal Product into the distribution chain.
     */
    dateRange: Period;
    /**
     * The date when the Medicinal Product is placed on the market by the Marketing Authorisation Holder (or where applicable, the manufacturer/distributor) in a country and/or jurisdiction shall be provided A complete date consisting of day, month and year shall be specified using the ISO 8601 date format NOTE “Placed on the market” refers to the release of the Medicinal Product into the distribution chain.
     */
    restoreDate?: dateTime;
    /**
     * Contains extension information for property 'restoreDate'.
     */
    _restoreDate?: Element;
}
/**
 * The Measure resource provides the definition of a quality measure.
 */
export interface Measure {
    /**
     * The type of the resource.
     */
    resourceType: string;
    /**
     * The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes.
     */
    id?: id;
    /**
     * Contains extension information for property 'id'.
     */
    _id?: Element;
    /**
     * The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource.
     */
    meta?: Meta;
    /**
     * A reference to a set of rules that were followed when the resource was constructed, and which must be understood when processing the content. Often, this is a reference to an implementation guide that defines the special rules along with other profiles etc.
     */
    implicitRules?: uri;
    /**
     * Contains extension information for property 'implicitRules'.
     */
    _implicitRules?: Element;
    /**
     * The base language in which the resource is written.
     */
    language?: code;
    /**
     * Contains extension information for property 'language'.
     */
    _language?: Element;
    /**
     * A human-readable narrative that contains a summary of the resource and can be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it "clinically safe" for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety.
     */
    text?: Narrative;
    /**
     * These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, and nor can they have their own independent transaction scope.
     */
    contained?: Resource[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * An absolute URI that is used to identify this measure when it is referenced in a specification, model, design or an instance; also called its canonical identifier. This SHOULD be globally unique and SHOULD be a literal address at which at which an authoritative instance of this measure is (or will be) published. This URL can be the target of a canonical reference. It SHALL remain the same when the measure is stored on different servers.
     */
    url?: uri;
    /**
     * Contains extension information for property 'url'.
     */
    _url?: Element;
    /**
     * A formal identifier that is used to identify this measure when it is represented in other formats, or referenced in a specification, model, design or an instance.
     */
    identifier?: Identifier[];
    /**
     * The identifier that is used to identify this version of the measure when it is referenced in a specification, model, design or instance. This is an arbitrary value managed by the measure author and is not expected to be globally unique. For example, it might be a timestamp (e.g. yyyymmdd) if a managed version is not available. There is also no expectation that versions can be placed in a lexicographical sequence. To provide a version consistent with the Decision Support Service specification, use the format Major.Minor.Revision (e.g. 1.0.0). For more information on versioning knowledge assets, refer to the Decision Support Service specification. Note that a version is required for non-experimental active artifacts.
     */
    version?: string;
    /**
     * Contains extension information for property 'version'.
     */
    _version?: Element;
    /**
     * A natural language name identifying the measure. This name should be usable as an identifier for the module by machine processing applications such as code generation.
     */
    name?: string;
    /**
     * Contains extension information for property 'name'.
     */
    _name?: Element;
    /**
     * A short, descriptive, user-friendly title for the measure.
     */
    title?: string;
    /**
     * Contains extension information for property 'title'.
     */
    _title?: Element;
    /**
     * An explanatory or alternate title for the measure giving additional information about its content.
     */
    subtitle?: string;
    /**
     * Contains extension information for property 'subtitle'.
     */
    _subtitle?: Element;
    /**
     * The status of this measure. Enables tracking the life-cycle of the content.
     */
    status: code;
    /**
     * Contains extension information for property 'status'.
     */
    _status?: Element;
    /**
     * A Boolean value to indicate that this measure is authored for testing purposes (or education/evaluation/marketing) and is not intended to be used for genuine usage.
     */
    experimental?: boolean;
    /**
     * Contains extension information for property 'experimental'.
     */
    _experimental?: Element;
    /**
     * The intended subjects for the measure. If this element is not provided, a Patient subject is assumed, but the subject of the measure can be anything.
     */
    subjectCodeableConcept?: CodeableConcept;
    /**
     * The intended subjects for the measure. If this element is not provided, a Patient subject is assumed, but the subject of the measure can be anything.
     */
    subjectReference?: Reference;
    /**
     * The date  (and optionally time) when the measure was published. The date must change when the business version changes and it must change if the status code changes. In addition, it should change when the substantive content of the measure changes.
     */
    date?: dateTime;
    /**
     * Contains extension information for property 'date'.
     */
    _date?: Element;
    /**
     * The name of the organization or individual that published the measure.
     */
    publisher?: string;
    /**
     * Contains extension information for property 'publisher'.
     */
    _publisher?: Element;
    /**
     * Contact details to assist a user in finding and communicating with the publisher.
     */
    contact?: ContactDetail[];
    /**
     * A free text natural language description of the measure from a consumer's perspective.
     */
    description?: markdown;
    /**
     * Contains extension information for property 'description'.
     */
    _description?: Element;
    /**
     * The content was developed with a focus and intent of supporting the contexts that are listed. These contexts may be general categories (gender, age, ...) or may be references to specific programs (insurance plans, studies, ...) and may be used to assist with indexing and searching for appropriate measure instances.
     */
    useContext?: UsageContext[];
    /**
     * A legal or geographic region in which the measure is intended to be used.
     */
    jurisdiction?: CodeableConcept[];
    /**
     * Explanation of why this measure is needed and why it has been designed as it has.
     */
    purpose?: markdown;
    /**
     * Contains extension information for property 'purpose'.
     */
    _purpose?: Element;
    /**
     * A detailed description, from a clinical perspective, of how the measure is used.
     */
    usage?: string;
    /**
     * Contains extension information for property 'usage'.
     */
    _usage?: Element;
    /**
     * A copyright statement relating to the measure and/or its contents. Copyright statements are generally legal restrictions on the use and publishing of the measure.
     */
    copyright?: markdown;
    /**
     * Contains extension information for property 'copyright'.
     */
    _copyright?: Element;
    /**
     * The date on which the resource content was approved by the publisher. Approval happens once when the content is officially approved for usage.
     */
    approvalDate?: date;
    /**
     * Contains extension information for property 'approvalDate'.
     */
    _approvalDate?: Element;
    /**
     * The date on which the resource content was last reviewed. Review happens periodically after approval but does not change the original approval date.
     */
    lastReviewDate?: date;
    /**
     * Contains extension information for property 'lastReviewDate'.
     */
    _lastReviewDate?: Element;
    /**
     * The period during which the measure content was or is planned to be in active use.
     */
    effectivePeriod?: Period;
    /**
     * Descriptive topics related to the content of the measure. Topics provide a high-level categorization grouping types of measures that can be useful for filtering and searching.
     */
    topic?: CodeableConcept[];
    /**
     * An individiual or organization primarily involved in the creation and maintenance of the content.
     */
    author?: ContactDetail[];
    /**
     * An individual or organization primarily responsible for internal coherence of the content.
     */
    editor?: ContactDetail[];
    /**
     * An individual or organization primarily responsible for review of some aspect of the content.
     */
    reviewer?: ContactDetail[];
    /**
     * An individual or organization responsible for officially endorsing the content for use in some setting.
     */
    endorser?: ContactDetail[];
    /**
     * Related artifacts such as additional documentation, justification, or bibliographic references.
     */
    relatedArtifact?: RelatedArtifact[];
    /**
     * A reference to a Library resource containing the formal logic used by the measure.
     */
    library?: canonical[];
    /**
     * Notices and disclaimers regarding the use of the measure or related to intellectual property (such as code systems) referenced by the measure.
     */
    disclaimer?: markdown;
    /**
     * Contains extension information for property 'disclaimer'.
     */
    _disclaimer?: Element;
    /**
     * Indicates how the calculation is performed for the measure, including proportion, ratio, continuous-variable, and cohort. The value set is extensible, allowing additional measure scoring types to be represented.
     */
    scoring?: CodeableConcept;
    /**
     * If this is a composite measure, the scoring method used to combine the component measures to determine the composite score.
     */
    compositeScoring?: CodeableConcept;
    /**
     * Indicates whether the measure is used to examine a process, an outcome over time, a patient-reported outcome, or a structure measure such as utilization.
     */
    type?: CodeableConcept[];
    /**
     * A description of the risk adjustment factors that may impact the resulting score for the measure and how they may be accounted for when computing and reporting measure results.
     */
    riskAdjustment?: string;
    /**
     * Contains extension information for property 'riskAdjustment'.
     */
    _riskAdjustment?: Element;
    /**
     * Describes how to combine the information calculated, based on logic in each of several populations, into one summarized result.
     */
    rateAggregation?: string;
    /**
     * Contains extension information for property 'rateAggregation'.
     */
    _rateAggregation?: Element;
    /**
     * Provides a succinct statement of the need for the measure. Usually includes statements pertaining to importance criterion: impact, gap in care, and evidence.
     */
    rationale?: markdown;
    /**
     * Contains extension information for property 'rationale'.
     */
    _rationale?: Element;
    /**
     * Provides a summary of relevant clinical guidelines or other clinical recommendations supporting the measure.
     */
    clinicalRecommendationStatement?: markdown;
    /**
     * Contains extension information for property 'clinicalRecommendationStatement'.
     */
    _clinicalRecommendationStatement?: Element;
    /**
     * Information on whether an increase or decrease in score is the preferred result (e.g., a higher score indicates better quality OR a lower score indicates better quality OR quality is within a range).
     */
    improvementNotation?: CodeableConcept;
    /**
     * Provides a description of an individual term used within the measure.
     */
    definition?: markdown[];
    /**
     * Contains extension information for property 'definition'.
     */
    _definition?: Element[];
    /**
     * Additional guidance for the measure including how it can be used in a clinical context, and the intent of the measure.
     */
    guidance?: markdown;
    /**
     * Contains extension information for property 'guidance'.
     */
    _guidance?: Element;
    /**
     * A group of population criteria for the measure.
     */
    group?: MeasureGroup[];
    /**
     * The supplemental data criteria for the measure report, specified as either the name of a valid CQL expression within a referenced library, or a valid FHIR Resource Path.
     */
    supplementalData?: MeasureSupplementalData[];
}
/**
 * A group of population criteria for the measure.
 */
export interface MeasureGroup {
    /**
     * Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
     */
    id?: string;
    /**
     * Contains extension information for property 'id'.
     */
    _id?: Element;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * Indicates a meaning for the group. This can be as simple as a unique identifier, or it can establish meaning in a broader context by drawing from a terminology, allowing groups to be correlated across measures.
     */
    code?: CodeableConcept;
    /**
     * The human readable description of this population group.
     */
    description?: string;
    /**
     * Contains extension information for property 'description'.
     */
    _description?: Element;
    /**
     * A population criteria for the measure.
     */
    population?: MeasureGroupPopulation[];
    /**
     * The stratifier criteria for the measure report, specified as either the name of a valid CQL expression defined within a referenced library or a valid FHIR Resource Path.
     */
    stratifier?: MeasureGroupStratifier[];
}
/**
 * A population criteria for the measure.
 */
export interface MeasureGroupPopulation {
    /**
     * Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
     */
    id?: string;
    /**
     * Contains extension information for property 'id'.
     */
    _id?: Element;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * The type of population criteria.
     */
    code?: CodeableConcept;
    /**
     * The human readable description of this population criteria.
     */
    description?: string;
    /**
     * Contains extension information for property 'description'.
     */
    _description?: Element;
    /**
     * An expression that specifies the criteria for the population, typically the name of an expression in a library.
     */
    criteria: Expression;
}
/**
 * The stratifier criteria for the measure report, specified as either the name of a valid CQL expression defined within a referenced library or a valid FHIR Resource Path.
 */
export interface MeasureGroupStratifier {
    /**
     * Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
     */
    id?: string;
    /**
     * Contains extension information for property 'id'.
     */
    _id?: Element;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * Indicates a meaning for the stratifier. This can be as simple as a unique identifier, or it can establish meaning in a broader context by drawing from a terminology, allowing stratifiers to be correlated across measures.
     */
    code?: CodeableConcept;
    /**
     * The human readable description of this stratifier criteria.
     */
    description?: string;
    /**
     * Contains extension information for property 'description'.
     */
    _description?: Element;
    /**
     * An expression that specifies the criteria for the stratifier. This is typically the name of an expression defined within a referenced library, but it may also be a path to a stratifier element.
     */
    criteria?: Expression;
    /**
     * A component of the stratifier criteria for the measure report, specified as either the name of a valid CQL expression defined within a referenced library or a valid FHIR Resource Path.
     */
    component?: MeasureGroupStratifierComponent[];
}
/**
 * A component of the stratifier criteria for the measure report, specified as either the name of a valid CQL expression defined within a referenced library or a valid FHIR Resource Path.
 */
export interface MeasureGroupStratifierComponent {
    /**
     * Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
     */
    id?: string;
    /**
     * Contains extension information for property 'id'.
     */
    _id?: Element;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * Indicates a meaning for the stratifier component. This can be as simple as a unique identifier, or it can establish meaning in a broader context by drawing from a terminology, allowing stratifiers to be correlated across measures.
     */
    code?: CodeableConcept;
    /**
     * The human readable description of this stratifier criteria component.
     */
    description?: string;
    /**
     * Contains extension information for property 'description'.
     */
    _description?: Element;
    /**
     * An expression that specifies the criteria for this component of the stratifier. This is typically the name of an expression defined within a referenced library, but it may also be a path to a stratifier element.
     */
    criteria: Expression;
}
/**
 * The supplemental data criteria for the measure report, specified as either the name of a valid CQL expression within a referenced library, or a valid FHIR Resource Path.
 */
export interface MeasureSupplementalData {
    /**
     * Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
     */
    id?: string;
    /**
     * Contains extension information for property 'id'.
     */
    _id?: Element;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * Indicates a meaning for the supplemental data. This can be as simple as a unique identifier, or it can establish meaning in a broader context by drawing from a terminology, allowing supplemental data to be correlated across measures.
     */
    code?: CodeableConcept;
    /**
     * An indicator of the intended usage for the supplemental data element. Supplemental data indicates the data is additional information requested to augment the measure information. Risk adjustment factor indicates the data is additional information used to calculate risk adjustment factors when applying a risk model to the measure calculation.
     */
    usage?: CodeableConcept[];
    /**
     * The human readable description of this supplemental data.
     */
    description?: string;
    /**
     * Contains extension information for property 'description'.
     */
    _description?: Element;
    /**
     * The criteria for the supplemental data. This is typically the name of a valid expression defined within a referenced library, but it may also be a path to a specific data element. The criteria defines the data to be returned for this element.
     */
    criteria: Expression;
}
/**
 * The MeasureReport resource contains the results of the calculation of a measure; and optionally a reference to the resources involved in that calculation.
 */
export interface MeasureReport {
    /**
     * The type of the resource.
     */
    resourceType: string;
    /**
     * The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes.
     */
    id?: id;
    /**
     * Contains extension information for property 'id'.
     */
    _id?: Element;
    /**
     * The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource.
     */
    meta?: Meta;
    /**
     * A reference to a set of rules that were followed when the resource was constructed, and which must be understood when processing the content. Often, this is a reference to an implementation guide that defines the special rules along with other profiles etc.
     */
    implicitRules?: uri;
    /**
     * Contains extension information for property 'implicitRules'.
     */
    _implicitRules?: Element;
    /**
     * The base language in which the resource is written.
     */
    language?: code;
    /**
     * Contains extension information for property 'language'.
     */
    _language?: Element;
    /**
     * A human-readable narrative that contains a summary of the resource and can be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it "clinically safe" for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety.
     */
    text?: Narrative;
    /**
     * These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, and nor can they have their own independent transaction scope.
     */
    contained?: Resource[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * A formal identifier that is used to identify this MeasureReport when it is represented in other formats or referenced in a specification, model, design or an instance.
     */
    identifier?: Identifier[];
    /**
     * The MeasureReport status. No data will be available until the MeasureReport status is complete.
     */
    status: code;
    /**
     * Contains extension information for property 'status'.
     */
    _status?: Element;
    /**
     * The type of measure report. This may be an individual report, which provides the score for the measure for an individual member of the population; a subject-listing, which returns the list of members that meet the various criteria in the measure; a summary report, which returns a population count for each of the criteria in the measure; or a data-collection, which enables the MeasureReport to be used to exchange the data-of-interest for a quality measure.
     */
    type: code;
    /**
     * Contains extension information for property 'type'.
     */
    _type?: Element;
    /**
     * A reference to the Measure that was calculated to produce this report.
     */
    measure: canonical;
    /**
     * Optional subject identifying the individual or individuals the report is for.
     */
    subject?: Reference;
    /**
     * The date this measure report was generated.
     */
    date?: dateTime;
    /**
     * Contains extension information for property 'date'.
     */
    _date?: Element;
    /**
     * The individual, location, or organization that is reporting the data.
     */
    reporter?: Reference;
    /**
     * The reporting period for which the report was calculated.
     */
    period: Period;
    /**
     * Whether improvement in the measure is noted by an increase or decrease in the measure score.
     */
    improvementNotation?: CodeableConcept;
    /**
     * The results of the calculation, one for each population group in the measure.
     */
    group?: MeasureReportGroup[];
    /**
     * A reference to a Bundle containing the Resources that were used in the calculation of this measure.
     */
    evaluatedResource?: Reference[];
}
/**
 * The results of the calculation, one for each population group in the measure.
 */
export interface MeasureReportGroup {
    /**
     * Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
     */
    id?: string;
    /**
     * Contains extension information for property 'id'.
     */
    _id?: Element;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * The meaning of the population group as defined in the measure definition.
     */
    code?: CodeableConcept;
    /**
     * The populations that make up the population group, one for each type of population appropriate for the measure.
     */
    population?: MeasureReportGroupPopulation[];
    /**
     * The measure score for this population group, calculated as appropriate for the measure type and scoring method, and based on the contents of the populations defined in the group.
     */
    measureScore?: Quantity;
    /**
     * When a measure includes multiple stratifiers, there will be a stratifier group for each stratifier defined by the measure.
     */
    stratifier?: MeasureReportGroupStratifier[];
}
/**
 * The populations that make up the population group, one for each type of population appropriate for the measure.
 */
export interface MeasureReportGroupPopulation {
    /**
     * Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
     */
    id?: string;
    /**
     * Contains extension information for property 'id'.
     */
    _id?: Element;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * The type of the population.
     */
    code?: CodeableConcept;
    /**
     * The number of members of the population.
     */
    count?: integer;
    /**
     * Contains extension information for property 'count'.
     */
    _count?: Element;
    /**
     * This element refers to a List of subject level MeasureReport resources, one for each subject in this population.
     */
    subjectResults?: Reference;
}
/**
 * When a measure includes multiple stratifiers, there will be a stratifier group for each stratifier defined by the measure.
 */
export interface MeasureReportGroupStratifier {
    /**
     * Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
     */
    id?: string;
    /**
     * Contains extension information for property 'id'.
     */
    _id?: Element;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * The meaning of this stratifier, as defined in the measure definition.
     */
    code?: CodeableConcept[];
    /**
     * This element contains the results for a single stratum within the stratifier. For example, when stratifying on administrative gender, there will be four strata, one for each possible gender value.
     */
    stratum?: MeasureReportGroupStratifierStratum[];
}
/**
 * This element contains the results for a single stratum within the stratifier. For example, when stratifying on administrative gender, there will be four strata, one for each possible gender value.
 */
export interface MeasureReportGroupStratifierStratum {
    /**
     * Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
     */
    id?: string;
    /**
     * Contains extension information for property 'id'.
     */
    _id?: Element;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * The value for this stratum, expressed as a CodeableConcept. When defining stratifiers on complex values, the value must be rendered such that the value for each stratum within the stratifier is unique.
     */
    value?: CodeableConcept;
    /**
     * A stratifier component value.
     */
    component?: MeasureReportGroupStratifierStratumComponent[];
    /**
     * The populations that make up the stratum, one for each type of population appropriate to the measure.
     */
    population?: MeasureReportGroupStratifierStratumPopulation[];
    /**
     * The measure score for this stratum, calculated as appropriate for the measure type and scoring method, and based on only the members of this stratum.
     */
    measureScore?: Quantity;
}
/**
 * A stratifier component value.
 */
export interface MeasureReportGroupStratifierStratumComponent {
    /**
     * Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
     */
    id?: string;
    /**
     * Contains extension information for property 'id'.
     */
    _id?: Element;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * The code for the stratum component value.
     */
    code: CodeableConcept;
    /**
     * The stratum component value.
     */
    value: CodeableConcept;
}
/**
 * The populations that make up the stratum, one for each type of population appropriate to the measure.
 */
export interface MeasureReportGroupStratifierStratumPopulation {
    /**
     * Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
     */
    id?: string;
    /**
     * Contains extension information for property 'id'.
     */
    _id?: Element;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * The type of the population.
     */
    code?: CodeableConcept;
    /**
     * The number of members of the population in this stratum.
     */
    count?: integer;
    /**
     * Contains extension information for property 'count'.
     */
    _count?: Element;
    /**
     * This element refers to a List of subject level MeasureReport resources, one for each subject in this population in this stratum.
     */
    subjectResults?: Reference;
}
/**
 * A photo, video, or audio recording acquired or used in healthcare. The actual content may be inline or provided by direct reference.
 */
export interface Media {
    /**
     * The type of the resource.
     */
    resourceType: string;
    /**
     * The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes.
     */
    id?: id;
    /**
     * Contains extension information for property 'id'.
     */
    _id?: Element;
    /**
     * The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource.
     */
    meta?: Meta;
    /**
     * A reference to a set of rules that were followed when the resource was constructed, and which must be understood when processing the content. Often, this is a reference to an implementation guide that defines the special rules along with other profiles etc.
     */
    implicitRules?: uri;
    /**
     * Contains extension information for property 'implicitRules'.
     */
    _implicitRules?: Element;
    /**
     * The base language in which the resource is written.
     */
    language?: code;
    /**
     * Contains extension information for property 'language'.
     */
    _language?: Element;
    /**
     * A human-readable narrative that contains a summary of the resource and can be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it "clinically safe" for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety.
     */
    text?: Narrative;
    /**
     * These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, and nor can they have their own independent transaction scope.
     */
    contained?: Resource[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * Identifiers associated with the image - these may include identifiers for the image itself, identifiers for the context of its collection (e.g. series ids) and context ids such as accession numbers or other workflow identifiers.
     */
    identifier?: Identifier[];
    /**
     * A procedure that is fulfilled in whole or in part by the creation of this media.
     */
    basedOn?: Reference[];
    /**
     * A larger event of which this particular event is a component or step.
     */
    partOf?: Reference[];
    /**
     * The current state of the {{title}}.
     */
    status: code;
    /**
     * Contains extension information for property 'status'.
     */
    _status?: Element;
    /**
     * A code that classifies whether the media is an image, video or audio recording or some other media category.
     */
    type?: CodeableConcept;
    /**
     * Details of the type of the media - usually, how it was acquired (what type of device). If images sourced from a DICOM system, are wrapped in a Media resource, then this is the modality.
     */
    modality?: CodeableConcept;
    /**
     * The name of the imaging view e.g. Lateral or Antero-posterior (AP).
     */
    view?: CodeableConcept;
    /**
     * Who/What this Media is a record of.
     */
    subject?: Reference;
    /**
     * The encounter that establishes the context for this media.
     */
    encounter?: Reference;
    /**
     * The date and time(s) at which the media was collected.
     */
    createdDateTime?: dateTime;
    /**
     * Contains extension information for property 'createdDateTime'.
     */
    _createdDateTime?: Element;
    /**
     * The date and time(s) at which the media was collected.
     */
    createdPeriod?: Period;
    /**
     * The date and time this version of the media was made available to providers, typically after having been reviewed.
     */
    issued?: instant;
    /**
     * Contains extension information for property 'issued'.
     */
    _issued?: Element;
    /**
     * The person who administered the collection of the image.
     */
    operator?: Reference;
    /**
     * Describes why the event occurred in coded or textual form.
     */
    reasonCode?: CodeableConcept[];
    /**
     * Indicates the site on the subject's body where the observation was made (i.e. the target site).
     */
    bodySite?: CodeableConcept;
    /**
     * The name of the device / manufacturer of the device  that was used to make the recording.
     */
    deviceName?: string;
    /**
     * Contains extension information for property 'deviceName'.
     */
    _deviceName?: Element;
    /**
     * The device used to collect the media.
     */
    device?: Reference;
    /**
     * Height of the image in pixels (photo/video).
     */
    height?: positiveInt;
    /**
     * Contains extension information for property 'height'.
     */
    _height?: Element;
    /**
     * Width of the image in pixels (photo/video).
     */
    width?: positiveInt;
    /**
     * Contains extension information for property 'width'.
     */
    _width?: Element;
    /**
     * The number of frames in a photo. This is used with a multi-page fax, or an imaging acquisition context that takes multiple slices in a single image, or an animated gif. If there is more than one frame, this SHALL have a value in order to alert interface software that a multi-frame capable rendering widget is required.
     */
    frames?: positiveInt;
    /**
     * Contains extension information for property 'frames'.
     */
    _frames?: Element;
    /**
     * The duration of the recording in seconds - for audio and video.
     */
    duration?: decimal;
    /**
     * Contains extension information for property 'duration'.
     */
    _duration?: Element;
    /**
     * The actual content of the media - inline or by direct reference to the media source file.
     */
    content: Attachment;
    /**
     * Comments made about the media by the performer, subject or other participants.
     */
    note?: Annotation[];
}
/**
 * This resource is primarily used for the identification and definition of a medication for the purposes of prescribing, dispensing, and administering a medication as well as for making statements about medication use.
 */
export interface Medication {
    /**
     * The type of the resource.
     */
    resourceType: string;
    /**
     * The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes.
     */
    id?: id;
    /**
     * Contains extension information for property 'id'.
     */
    _id?: Element;
    /**
     * The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource.
     */
    meta?: Meta;
    /**
     * A reference to a set of rules that were followed when the resource was constructed, and which must be understood when processing the content. Often, this is a reference to an implementation guide that defines the special rules along with other profiles etc.
     */
    implicitRules?: uri;
    /**
     * Contains extension information for property 'implicitRules'.
     */
    _implicitRules?: Element;
    /**
     * The base language in which the resource is written.
     */
    language?: code;
    /**
     * Contains extension information for property 'language'.
     */
    _language?: Element;
    /**
     * A human-readable narrative that contains a summary of the resource and can be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it "clinically safe" for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety.
     */
    text?: Narrative;
    /**
     * These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, and nor can they have their own independent transaction scope.
     */
    contained?: Resource[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * Business identifier for this medication.
     */
    identifier?: Identifier[];
    /**
     * A code (or set of codes) that specify this medication, or a textual description if no code is available. Usage note: This could be a standard medication code such as a code from RxNorm, SNOMED CT, IDMP etc. It could also be a national or local formulary code, optionally with translations to other code systems.
     */
    code?: CodeableConcept;
    /**
     * A code to indicate if the medication is in active use.
     */
    status?: code;
    /**
     * Contains extension information for property 'status'.
     */
    _status?: Element;
    /**
     * Describes the details of the manufacturer of the medication product.  This is not intended to represent the distributor of a medication product.
     */
    manufacturer?: Reference;
    /**
     * Describes the form of the item.  Powder; tablets; capsule.
     */
    form?: CodeableConcept;
    /**
     * Specific amount of the drug in the packaged product.  For example, when specifying a product that has the same strength (For example, Insulin glargine 100 unit per mL solution for injection), this attribute provides additional clarification of the package amount (For example, 3 mL, 10mL, etc.).
     */
    amount?: Ratio;
    /**
     * Identifies a particular constituent of interest in the product.
     */
    ingredient?: MedicationIngredient[];
    /**
     * Information that only applies to packages (not products).
     */
    batch?: MedicationBatch;
}
/**
 * Identifies a particular constituent of interest in the product.
 */
export interface MedicationIngredient {
    /**
     * Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
     */
    id?: string;
    /**
     * Contains extension information for property 'id'.
     */
    _id?: Element;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * The actual ingredient - either a substance (simple ingredient) or another medication of a medication.
     */
    itemCodeableConcept: CodeableConcept;
    /**
     * The actual ingredient - either a substance (simple ingredient) or another medication of a medication.
     */
    itemReference: Reference;
    /**
     * Indication of whether this ingredient affects the therapeutic action of the drug.
     */
    isActive?: boolean;
    /**
     * Contains extension information for property 'isActive'.
     */
    _isActive?: Element;
    /**
     * Specifies how many (or how much) of the items there are in this Medication.  For example, 250 mg per tablet.  This is expressed as a ratio where the numerator is 250mg and the denominator is 1 tablet.
     */
    strength?: Ratio;
}
/**
 * Information that only applies to packages (not products).
 */
export interface MedicationBatch {
    /**
     * Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
     */
    id?: string;
    /**
     * Contains extension information for property 'id'.
     */
    _id?: Element;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * The assigned lot number of a batch of the specified product.
     */
    lotNumber?: string;
    /**
     * Contains extension information for property 'lotNumber'.
     */
    _lotNumber?: Element;
    /**
     * When this specific batch of product will expire.
     */
    expirationDate?: dateTime;
    /**
     * Contains extension information for property 'expirationDate'.
     */
    _expirationDate?: Element;
}
/**
 * Describes the event of a patient consuming or otherwise being administered a medication.  This may be as simple as swallowing a tablet or it may be a long running infusion.  Related resources tie this event to the authorizing prescription, and the specific encounter between patient and health care practitioner.
 */
export interface MedicationAdministration {
    /**
     * The type of the resource.
     */
    resourceType: string;
    /**
     * The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes.
     */
    id?: id;
    /**
     * Contains extension information for property 'id'.
     */
    _id?: Element;
    /**
     * The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource.
     */
    meta?: Meta;
    /**
     * A reference to a set of rules that were followed when the resource was constructed, and which must be understood when processing the content. Often, this is a reference to an implementation guide that defines the special rules along with other profiles etc.
     */
    implicitRules?: uri;
    /**
     * Contains extension information for property 'implicitRules'.
     */
    _implicitRules?: Element;
    /**
     * The base language in which the resource is written.
     */
    language?: code;
    /**
     * Contains extension information for property 'language'.
     */
    _language?: Element;
    /**
     * A human-readable narrative that contains a summary of the resource and can be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it "clinically safe" for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety.
     */
    text?: Narrative;
    /**
     * These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, and nor can they have their own independent transaction scope.
     */
    contained?: Resource[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * Identifiers associated with this Medication Administration that are defined by business processes and/or used to refer to it when a direct URL reference to the resource itself is not appropriate. They are business identifiers assigned to this resource by the performer or other systems and remain constant as the resource is updated and propagates from server to server.
     */
    identifier?: Identifier[];
    /**
     * A protocol, guideline, orderset, or other definition that was adhered to in whole or in part by this event.
     */
    instantiates?: uri[];
    /**
     * Contains extension information for property 'instantiates'.
     */
    _instantiates?: Element[];
    /**
     * A larger event of which this particular event is a component or step.
     */
    partOf?: Reference[];
    /**
     * Will generally be set to show that the administration has been completed.  For some long running administrations such as infusions, it is possible for an administration to be started but not completed or it may be paused while some other process is under way.
     */
    status: code;
    /**
     * Contains extension information for property 'status'.
     */
    _status?: Element;
    /**
     * A code indicating why the administration was not performed.
     */
    statusReason?: CodeableConcept[];
    /**
     * Indicates where the medication is expected to be consumed or administered.
     */
    category?: CodeableConcept;
    /**
     * Identifies the medication that was administered. This is either a link to a resource representing the details of the medication or a simple attribute carrying a code that identifies the medication from a known list of medications.
     */
    medicationCodeableConcept: CodeableConcept;
    /**
     * Identifies the medication that was administered. This is either a link to a resource representing the details of the medication or a simple attribute carrying a code that identifies the medication from a known list of medications.
     */
    medicationReference: Reference;
    /**
     * The person or animal or group receiving the medication.
     */
    subject: Reference;
    /**
     * The visit, admission, or other contact between patient and health care provider during which the medication administration was performed.
     */
    context?: Reference;
    /**
     * Additional information (for example, patient height and weight) that supports the administration of the medication.
     */
    supportingInformation?: Reference[];
    /**
     * A specific date/time or interval of time during which the administration took place (or did not take place, when the 'notGiven' attribute is true). For many administrations, such as swallowing a tablet the use of dateTime is more appropriate.
     */
    effectiveDateTime: dateTime;
    /**
     * Contains extension information for property 'effectiveDateTime'.
     */
    _effectiveDateTime?: Element;
    /**
     * A specific date/time or interval of time during which the administration took place (or did not take place, when the 'notGiven' attribute is true). For many administrations, such as swallowing a tablet the use of dateTime is more appropriate.
     */
    effectivePeriod: Period;
    /**
     * Indicates who or what performed the medication administration and how they were involved.
     */
    performer?: MedicationAdministrationPerformer[];
    /**
     * A code indicating why the medication was given.
     */
    reasonCode?: CodeableConcept[];
    /**
     * Condition or observation that supports why the medication was administered.
     */
    reasonReference?: Reference[];
    /**
     * The original request, instruction or authority to perform the administration.
     */
    request?: Reference;
    /**
     * The device used in administering the medication to the patient.  For example, a particular infusion pump.
     */
    device?: Reference[];
    /**
     * Extra information about the medication administration that is not conveyed by the other attributes.
     */
    note?: Annotation[];
    /**
     * Describes the medication dosage information details e.g. dose, rate, site, route, etc.
     */
    dosage?: MedicationAdministrationDosage;
    /**
     * A summary of the events of interest that have occurred, such as when the administration was verified.
     */
    eventHistory?: Reference[];
}
/**
 * Indicates who or what performed the medication administration and how they were involved.
 */
export interface MedicationAdministrationPerformer {
    /**
     * Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
     */
    id?: string;
    /**
     * Contains extension information for property 'id'.
     */
    _id?: Element;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * Distinguishes the type of involvement of the performer in the medication administration.
     */
    function?: CodeableConcept;
    /**
     * Indicates who or what performed the medication administration.
     */
    actor: Reference;
}
/**
 * Describes the medication dosage information details e.g. dose, rate, site, route, etc.
 */
export interface MedicationAdministrationDosage {
    /**
     * Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
     */
    id?: string;
    /**
     * Contains extension information for property 'id'.
     */
    _id?: Element;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * Free text dosage can be used for cases where the dosage administered is too complex to code. When coded dosage is present, the free text dosage may still be present for display to humans.The dosage instructions should reflect the dosage of the medication that was administered.
     */
    text?: string;
    /**
     * Contains extension information for property 'text'.
     */
    _text?: Element;
    /**
     * A coded specification of the anatomic site where the medication first entered the body.  For example, "left arm".
     */
    site?: CodeableConcept;
    /**
     * A code specifying the route or physiological path of administration of a therapeutic agent into or onto the patient.  For example, topical, intravenous, etc.
     */
    route?: CodeableConcept;
    /**
     * A coded value indicating the method by which the medication is intended to be or was introduced into or on the body.  This attribute will most often NOT be populated.  It is most commonly used for injections.  For example, Slow Push, Deep IV.
     */
    method?: CodeableConcept;
    /**
     * The amount of the medication given at one administration event.   Use this value when the administration is essentially an instantaneous event such as a swallowing a tablet or giving an injection.
     */
    dose?: Quantity;
    /**
     * Identifies the speed with which the medication was or will be introduced into the patient.  Typically, the rate for an infusion e.g. 100 ml per 1 hour or 100 ml/hr.  May also be expressed as a rate per unit of time, e.g. 500 ml per 2 hours.  Other examples:  200 mcg/min or 200 mcg/1 minute; 1 liter/8 hours.
     */
    rateRatio?: Ratio;
    /**
     * Identifies the speed with which the medication was or will be introduced into the patient.  Typically, the rate for an infusion e.g. 100 ml per 1 hour or 100 ml/hr.  May also be expressed as a rate per unit of time, e.g. 500 ml per 2 hours.  Other examples:  200 mcg/min or 200 mcg/1 minute; 1 liter/8 hours.
     */
    rateQuantity?: Quantity;
}
/**
 * Indicates that a medication product is to be or has been dispensed for a named person/patient.  This includes a description of the medication product (supply) provided and the instructions for administering the medication.  The medication dispense is the result of a pharmacy system responding to a medication order.
 */
export interface MedicationDispense {
    /**
     * The type of the resource.
     */
    resourceType: string;
    /**
     * The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes.
     */
    id?: id;
    /**
     * Contains extension information for property 'id'.
     */
    _id?: Element;
    /**
     * The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource.
     */
    meta?: Meta;
    /**
     * A reference to a set of rules that were followed when the resource was constructed, and which must be understood when processing the content. Often, this is a reference to an implementation guide that defines the special rules along with other profiles etc.
     */
    implicitRules?: uri;
    /**
     * Contains extension information for property 'implicitRules'.
     */
    _implicitRules?: Element;
    /**
     * The base language in which the resource is written.
     */
    language?: code;
    /**
     * Contains extension information for property 'language'.
     */
    _language?: Element;
    /**
     * A human-readable narrative that contains a summary of the resource and can be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it "clinically safe" for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety.
     */
    text?: Narrative;
    /**
     * These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, and nor can they have their own independent transaction scope.
     */
    contained?: Resource[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * Identifiers associated with this Medication Dispense that are defined by business processes and/or used to refer to it when a direct URL reference to the resource itself is not appropriate. They are business identifiers assigned to this resource by the performer or other systems and remain constant as the resource is updated and propagates from server to server.
     */
    identifier?: Identifier[];
    /**
     * The procedure that trigger the dispense.
     */
    partOf?: Reference[];
    /**
     * A code specifying the state of the set of dispense events.
     */
    status: code;
    /**
     * Contains extension information for property 'status'.
     */
    _status?: Element;
    /**
     * Indicates the reason why a dispense was not performed.
     */
    statusreasonCodeableConcept?: CodeableConcept;
    /**
     * Indicates the reason why a dispense was not performed.
     */
    statusreasonReference?: Reference;
    /**
     * Indicates the type of medication dispense (for example, where the medication is expected to be consumed or administered (i.e. inpatient or outpatient)).
     */
    category?: CodeableConcept;
    /**
     * Identifies the medication being administered. This is either a link to a resource representing the details of the medication or a simple attribute carrying a code that identifies the medication from a known list of medications.
     */
    medicationCodeableConcept: CodeableConcept;
    /**
     * Identifies the medication being administered. This is either a link to a resource representing the details of the medication or a simple attribute carrying a code that identifies the medication from a known list of medications.
     */
    medicationReference: Reference;
    /**
     * A link to a resource representing the person or the group to whom the medication will be given.
     */
    subject?: Reference;
    /**
     * The encounter or episode of care that establishes the context for this event.
     */
    context?: Reference;
    /**
     * Additional information that supports the medication being dispensed.
     */
    supportingInformation?: Reference[];
    /**
     * Indicates who or what performed the event.
     */
    performer?: MedicationDispensePerformer[];
    /**
     * The principal physical location where the dispense was performed.
     */
    location?: Reference;
    /**
     * Indicates the medication order that is being dispensed against.
     */
    authorizingPrescription?: Reference[];
    /**
     * Indicates the type of dispensing event that is performed. For example, Trial Fill, Completion of Trial, Partial Fill, Emergency Fill, Samples, etc.
     */
    type?: CodeableConcept;
    /**
     * The amount of medication that has been dispensed. Includes unit of measure.
     */
    quantity?: Quantity;
    /**
     * The amount of medication expressed as a timing amount.
     */
    daysSupply?: Quantity;
    /**
     * The time when the dispensed product was packaged and reviewed.
     */
    whenPrepared?: dateTime;
    /**
     * Contains extension information for property 'whenPrepared'.
     */
    _whenPrepared?: Element;
    /**
     * The time the dispensed product was provided to the patient or their representative.
     */
    whenHandedOver?: dateTime;
    /**
     * Contains extension information for property 'whenHandedOver'.
     */
    _whenHandedOver?: Element;
    /**
     * Identification of the facility/location where the medication was shipped to, as part of the dispense event.
     */
    destination?: Reference;
    /**
     * Identifies the person who picked up the medication.  This will usually be a patient or their caregiver, but some cases exist where it can be a healthcare professional.
     */
    receiver?: Reference[];
    /**
     * Extra information about the dispense that could not be conveyed in the other attributes.
     */
    note?: Annotation[];
    /**
     * Indicates how the medication is to be used by the patient.
     */
    dosageInstruction?: Dosage[];
    /**
     * Indicates whether or not substitution was made as part of the dispense.  In some cases, substitution will be expected but does not happen, in other cases substitution is not expected but does happen.  This block explains what substitution did or did not happen and why.  If nothing is specified, substitution was not done.
     */
    substitution?: MedicationDispenseSubstitution;
    /**
     * Indicates an actual or potential clinical issue with or between one or more active or proposed clinical actions for a patient; e.g. drug-drug interaction, duplicate therapy, dosage alert etc.
     */
    detectedIssue?: Reference[];
    /**
     * A summary of the events of interest that have occurred, such as when the dispense was verified.
     */
    eventHistory?: Reference[];
}
/**
 * Indicates who or what performed the event.
 */
export interface MedicationDispensePerformer {
    /**
     * Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
     */
    id?: string;
    /**
     * Contains extension information for property 'id'.
     */
    _id?: Element;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * Distinguishes the type of performer in the dispense.  For example, date enterer, packager, final checker.
     */
    function?: CodeableConcept;
    /**
     * The device, practitioner, etc. who performed the action.  It should be assumed that the actor is the dispenser of the medication.
     */
    actor: Reference;
}
/**
 * Indicates whether or not substitution was made as part of the dispense.  In some cases, substitution will be expected but does not happen, in other cases substitution is not expected but does happen.  This block explains what substitution did or did not happen and why.  If nothing is specified, substitution was not done.
 */
export interface MedicationDispenseSubstitution {
    /**
     * Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
     */
    id?: string;
    /**
     * Contains extension information for property 'id'.
     */
    _id?: Element;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * True if the dispenser dispensed a different drug or product from what was prescribed.
     */
    wasSubstituted: boolean;
    /**
     * Contains extension information for property 'wasSubstituted'.
     */
    _wasSubstituted?: Element;
    /**
     * A code signifying whether a different drug was dispensed from what was prescribed.
     */
    type?: CodeableConcept;
    /**
     * Indicates the reason for the substitution (or lack of substitution) from what was prescribed.
     */
    reason?: CodeableConcept[];
    /**
     * The person or organization that has primary responsibility for the substitution.
     */
    responsibleParty?: Reference[];
}
/**
 * Information about a medication that is used to support knowledge.
 */
export interface MedicationKnowledge {
    /**
     * The type of the resource.
     */
    resourceType: string;
    /**
     * The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes.
     */
    id?: id;
    /**
     * Contains extension information for property 'id'.
     */
    _id?: Element;
    /**
     * The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource.
     */
    meta?: Meta;
    /**
     * A reference to a set of rules that were followed when the resource was constructed, and which must be understood when processing the content. Often, this is a reference to an implementation guide that defines the special rules along with other profiles etc.
     */
    implicitRules?: uri;
    /**
     * Contains extension information for property 'implicitRules'.
     */
    _implicitRules?: Element;
    /**
     * The base language in which the resource is written.
     */
    language?: code;
    /**
     * Contains extension information for property 'language'.
     */
    _language?: Element;
    /**
     * A human-readable narrative that contains a summary of the resource and can be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it "clinically safe" for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety.
     */
    text?: Narrative;
    /**
     * These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, and nor can they have their own independent transaction scope.
     */
    contained?: Resource[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * A code that specifies this medication, or a textual description if no code is available. Usage note: This could be a standard medication code such as a code from RxNorm, SNOMED CT, IDMP etc. It could also be a national or local formulary code, optionally with translations to other code systems.
     */
    code?: CodeableConcept;
    /**
     * A code to indicate if the medication is in active use.  The status refers to the validity about the information of the medication and not to its medicinal properties.
     */
    status?: code;
    /**
     * Contains extension information for property 'status'.
     */
    _status?: Element;
    /**
     * Describes the details of the manufacturer of the medication product.  This is not intended to represent the distributor of a medication product.
     */
    manufacturer?: Reference;
    /**
     * Describes the form of the item.  Powder; tablets; capsule.
     */
    doseForm?: CodeableConcept;
    /**
     * Specific amount of the drug in the packaged product.  For example, when specifying a product that has the same strength (For example, Insulin glargine 100 unit per mL solution for injection), this attribute provides additional clarification of the package amount (For example, 3 mL, 10mL, etc.).
     */
    amount?: Quantity;
    /**
     * Additional names for a medication, for example, the name(s) given to a medication in different countries.  For example, acetaminophen and paracetamol or salbutamol and albuterol.
     */
    synonym?: string[];
    /**
     * Contains extension information for property 'synonym'.
     */
    _synonym?: Element[];
    /**
     * Associated or related knowledge about a medication.
     */
    relatedMedicationKnowledge?: MedicationKnowledgeRelatedMedicationKnowledge[];
    /**
     * Associated or related medications.  For example, if the medication is a branded product (e.g. Crestor), this is the Therapeutic Moeity (e.g. Rosuvastatin) or if this is a generic medication (e.g. Rosuvastatin), this would link to a branded product (e.g. Crestor).
     */
    associatedMedication?: Reference[];
    /**
     * Category of the medication or product (e.g. branded product, therapeutic moeity, generic product, innovator product, etc.).
     */
    productType?: CodeableConcept[];
    /**
     * Associated documentation about the medication.
     */
    monograph?: MedicationKnowledgeMonograph[];
    /**
     * Identifies a particular constituent of interest in the product.
     */
    ingredient?: MedicationKnowledgeIngredient[];
    /**
     * The instructions for preparing the medication.
     */
    preparationInstruction?: markdown;
    /**
     * Contains extension information for property 'preparationInstruction'.
     */
    _preparationInstruction?: Element;
    /**
     * The intended or approved route of administration.
     */
    intendedRoute?: CodeableConcept[];
    /**
     * The price of the medication.
     */
    cost?: MedicationKnowledgeCost[];
    /**
     * The program under which the medication is reviewed.
     */
    monitoringProgram?: MedicationKnowledgeMonitoringProgram[];
    /**
     * Guidelines for the administration of the medication.
     */
    administrationGuidelines?: MedicationKnowledgeAdministrationGuidelines[];
    /**
     * Categorization of the medication within a formulary or classification system.
     */
    medicineClassification?: MedicationKnowledgeMedicineClassification[];
    /**
     * Information that only applies to packages (not products).
     */
    packaging?: MedicationKnowledgePackaging;
    /**
     * Specifies descriptive properties of the medicine, such as color, shape, imprints, etc.
     */
    drugCharacteristic?: MedicationKnowledgeDrugCharacteristic[];
    /**
     * Potential clinical issue with or between medication(s) (for example, drug-drug interaction, drug-disease contraindication, drug-allergy interaction, etc.).
     */
    contraindication?: Reference[];
    /**
     * Regulatory information about a medication.
     */
    regulatory?: MedicationKnowledgeRegulatory[];
    /**
     * The time course of drug absorption, distribution, metabolism and excretion of a medication from the body.
     */
    kinetics?: MedicationKnowledgeKinetics[];
}
/**
 * Associated or related knowledge about a medication.
 */
export interface MedicationKnowledgeRelatedMedicationKnowledge {
    /**
     * Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
     */
    id?: string;
    /**
     * Contains extension information for property 'id'.
     */
    _id?: Element;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * The category of the associated medication knowledge reference.
     */
    type: CodeableConcept;
    /**
     * Associated documentation about the associated medication knowledge.
     */
    reference: Reference[];
}
/**
 * Associated documentation about the medication.
 */
export interface MedicationKnowledgeMonograph {
    /**
     * Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
     */
    id?: string;
    /**
     * Contains extension information for property 'id'.
     */
    _id?: Element;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * The category of documentation about the medication. (e.g. professional monograph, patient education monograph).
     */
    type?: CodeableConcept;
    /**
     * Associated documentation about the medication.
     */
    source?: Reference;
}
/**
 * Identifies a particular constituent of interest in the product.
 */
export interface MedicationKnowledgeIngredient {
    /**
     * Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
     */
    id?: string;
    /**
     * Contains extension information for property 'id'.
     */
    _id?: Element;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * The actual ingredient - either a substance (simple ingredient) or another medication.
     */
    itemCodeableConcept: CodeableConcept;
    /**
     * The actual ingredient - either a substance (simple ingredient) or another medication.
     */
    itemReference: Reference;
    /**
     * Indication of whether this ingredient affects the therapeutic action of the drug.
     */
    isActive?: boolean;
    /**
     * Contains extension information for property 'isActive'.
     */
    _isActive?: Element;
    /**
     * Specifies how many (or how much) of the items there are in this Medication.  For example, 250 mg per tablet.  This is expressed as a ratio where the numerator is 250mg and the denominator is 1 tablet.
     */
    strength?: Ratio;
}
/**
 * The price of the medication.
 */
export interface MedicationKnowledgeCost {
    /**
     * Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
     */
    id?: string;
    /**
     * Contains extension information for property 'id'.
     */
    _id?: Element;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * The category of the cost information.  For example, manufacturers' cost, patient cost, claim reimbursement cost, actual acquisition cost.
     */
    type: CodeableConcept;
    /**
     * The source or owner that assigns the price to the medication.
     */
    source?: string;
    /**
     * Contains extension information for property 'source'.
     */
    _source?: Element;
    /**
     * The price of the medication.
     */
    cost: Money;
}
/**
 * The program under which the medication is reviewed.
 */
export interface MedicationKnowledgeMonitoringProgram {
    /**
     * Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
     */
    id?: string;
    /**
     * Contains extension information for property 'id'.
     */
    _id?: Element;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * Type of program under which the medication is monitored.
     */
    type?: CodeableConcept;
    /**
     * Name of the reviewing program.
     */
    name?: string;
    /**
     * Contains extension information for property 'name'.
     */
    _name?: Element;
}
/**
 * Guidelines for the administration of the medication.
 */
export interface MedicationKnowledgeAdministrationGuidelines {
    /**
     * Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
     */
    id?: string;
    /**
     * Contains extension information for property 'id'.
     */
    _id?: Element;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * Dosage for the medication for the specific guidelines.
     */
    dosage?: MedicationKnowledgeAdministrationGuidelinesDosage[];
    /**
     * Indication for use that apply to the specific administration guidelines.
     */
    indicationCodeableConcept?: CodeableConcept;
    /**
     * Indication for use that apply to the specific administration guidelines.
     */
    indicationReference?: Reference;
    /**
     * Characteristics of the patient that are relevant to the administration guidelines (for example, height, weight, gender, etc.).
     */
    patientCharacteristics?: MedicationKnowledgeAdministrationGuidelinesPatientCharacteristics[];
}
/**
 * Dosage for the medication for the specific guidelines.
 */
export interface MedicationKnowledgeAdministrationGuidelinesDosage {
    /**
     * Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
     */
    id?: string;
    /**
     * Contains extension information for property 'id'.
     */
    _id?: Element;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * The type of dosage (for example, prophylaxis, maintenance, therapeutic, etc.).
     */
    type: CodeableConcept;
    /**
     * Dosage for the medication for the specific guidelines.
     */
    dosage: Dosage[];
}
/**
 * Characteristics of the patient that are relevant to the administration guidelines (for example, height, weight, gender, etc.).
 */
export interface MedicationKnowledgeAdministrationGuidelinesPatientCharacteristics {
    /**
     * Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
     */
    id?: string;
    /**
     * Contains extension information for property 'id'.
     */
    _id?: Element;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * Specific characteristic that is relevant to the administration guideline (e.g. height, weight, gender).
     */
    characteristicCodeableConcept: CodeableConcept;
    /**
     * Specific characteristic that is relevant to the administration guideline (e.g. height, weight, gender).
     */
    characteristicQuantity: Quantity;
    /**
     * The specific characteristic (e.g. height, weight, gender, etc.).
     */
    value?: string[];
    /**
     * Contains extension information for property 'value'.
     */
    _value?: Element[];
}
/**
 * Categorization of the medication within a formulary or classification system.
 */
export interface MedicationKnowledgeMedicineClassification {
    /**
     * Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
     */
    id?: string;
    /**
     * Contains extension information for property 'id'.
     */
    _id?: Element;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * The type of category for the medication (for example, therapeutic classification, therapeutic sub-classification).
     */
    type: CodeableConcept;
    /**
     * Specific category assigned to the medication (e.g. anti-infective, anti-hypertensive, antibiotic, etc.).
     */
    classification?: CodeableConcept[];
}
/**
 * Information that only applies to packages (not products).
 */
export interface MedicationKnowledgePackaging {
    /**
     * Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
     */
    id?: string;
    /**
     * Contains extension information for property 'id'.
     */
    _id?: Element;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * A code that defines the specific type of packaging that the medication can be found in (e.g. blister sleeve, tube, bottle).
     */
    type?: CodeableConcept;
    /**
     * The number of product units the package would contain if fully loaded.
     */
    quantity?: Quantity;
}
/**
 * Specifies descriptive properties of the medicine, such as color, shape, imprints, etc.
 */
export interface MedicationKnowledgeDrugCharacteristic {
    /**
     * Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
     */
    id?: string;
    /**
     * Contains extension information for property 'id'.
     */
    _id?: Element;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * A code specifying which characteristic of the medicine is being described (for example, colour, shape, imprint).
     */
    type?: CodeableConcept;
    /**
     * Description of the characteristic.
     */
    valueCodeableConcept?: CodeableConcept;
    /**
     * Description of the characteristic.
     */
    valueString?: string;
    /**
     * Contains extension information for property 'valueString'.
     */
    _valueString?: Element;
    /**
     * Description of the characteristic.
     */
    valueQuantity?: Quantity;
    /**
     * Description of the characteristic.
     */
    valueBase64Binary?: base64Binary;
    /**
     * Contains extension information for property 'valueBase64Binary'.
     */
    _valueBase64Binary?: Element;
}
/**
 * Regulatory information about a medication.
 */
export interface MedicationKnowledgeRegulatory {
    /**
     * Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
     */
    id?: string;
    /**
     * Contains extension information for property 'id'.
     */
    _id?: Element;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * The authority that is specifying the regulations.
     */
    regulatoryAuthority: Reference;
    /**
     * Specifies if changes are allowed when dispensing a medication from a regulatory perspective.
     */
    substitution?: MedicationKnowledgeRegulatorySubstitution[];
    /**
     * Specifies the schedule of a medication in jurisdiction.
     */
    schedule?: MedicationKnowledgeRegulatorySchedule[];
    /**
     * The maximum number of units of the medication that can be dispensed in a period.
     */
    maxDispense?: MedicationKnowledgeRegulatoryMaxDispense;
}
/**
 * Specifies if changes are allowed when dispensing a medication from a regulatory perspective.
 */
export interface MedicationKnowledgeRegulatorySubstitution {
    /**
     * Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
     */
    id?: string;
    /**
     * Contains extension information for property 'id'.
     */
    _id?: Element;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * Specifies the type of substitution allowed.
     */
    type: CodeableConcept;
    /**
     * Specifies if regulation allows for changes in the medication when dispensing.
     */
    allowed: boolean;
    /**
     * Contains extension information for property 'allowed'.
     */
    _allowed?: Element;
}
/**
 * Specifies the schedule of a medication in jurisdiction.
 */
export interface MedicationKnowledgeRegulatorySchedule {
    /**
     * Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
     */
    id?: string;
    /**
     * Contains extension information for property 'id'.
     */
    _id?: Element;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * Specifies the specific drug schedule.
     */
    schedule: CodeableConcept;
}
/**
 * The maximum number of units of the medication that can be dispensed in a period.
 */
export interface MedicationKnowledgeRegulatoryMaxDispense {
    /**
     * Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
     */
    id?: string;
    /**
     * Contains extension information for property 'id'.
     */
    _id?: Element;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * The maximum number of units of the medication that can be dispensed.
     */
    quantity: Quantity;
    /**
     * The period that applies to the maximum number of units.
     */
    period?: Duration;
}
/**
 * The time course of drug absorption, distribution, metabolism and excretion of a medication from the body.
 */
export interface MedicationKnowledgeKinetics {
    /**
     * Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
     */
    id?: string;
    /**
     * Contains extension information for property 'id'.
     */
    _id?: Element;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * The drug concentration measured at certain discrete points in time.
     */
    areaUnderCurve?: Quantity[];
    /**
     * The median lethal dose of a drug.
     */
    lethalDose50?: Quantity[];
    /**
     * The time required for any specified property (e.g., the concentration of a substance in the body) to decrease by half.
     */
    halfLifePeriod?: Duration;
}
/**
 * An order or request for both supply of the medication and the instructions for administration of the medication to a patient. The resource is called "MedicationRequest" rather than "MedicationPrescription" or "MedicationOrder" to generalize the use across inpatient and outpatient settings, including care plans, etc., and to harmonize with workflow patterns.
 */
export interface MedicationRequest {
    /**
     * The type of the resource.
     */
    resourceType: string;
    /**
     * The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes.
     */
    id?: id;
    /**
     * Contains extension information for property 'id'.
     */
    _id?: Element;
    /**
     * The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource.
     */
    meta?: Meta;
    /**
     * A reference to a set of rules that were followed when the resource was constructed, and which must be understood when processing the content. Often, this is a reference to an implementation guide that defines the special rules along with other profiles etc.
     */
    implicitRules?: uri;
    /**
     * Contains extension information for property 'implicitRules'.
     */
    _implicitRules?: Element;
    /**
     * The base language in which the resource is written.
     */
    language?: code;
    /**
     * Contains extension information for property 'language'.
     */
    _language?: Element;
    /**
     * A human-readable narrative that contains a summary of the resource and can be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it "clinically safe" for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety.
     */
    text?: Narrative;
    /**
     * These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, and nor can they have their own independent transaction scope.
     */
    contained?: Resource[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * Identifiers associated with this medication request that are defined by business processes and/or used to refer to it when a direct URL reference to the resource itself is not appropriate. They are business identifiers assigned to this resource by the performer or other systems and remain constant as the resource is updated and propagates from server to server.
     */
    identifier?: Identifier[];
    /**
     * A code specifying the current state of the order.  Generally, this will be active or completed state.
     */
    status: code;
    /**
     * Contains extension information for property 'status'.
     */
    _status?: Element;
    /**
     * Captures the reason for the current state of the MedicationRequest.
     */
    statusReason?: CodeableConcept;
    /**
     * Whether the request is a proposal, plan, or an original order.
     */
    intent: code;
    /**
     * Contains extension information for property 'intent'.
     */
    _intent?: Element;
    /**
     * Indicates the type of medication request (for example, where the medication is expected to be consumed or administered (i.e. inpatient or outpatient)).
     */
    category?: CodeableConcept[];
    /**
     * Indicates how quickly the Medication Request should be addressed with respect to other requests.
     */
    priority?: code;
    /**
     * Contains extension information for property 'priority'.
     */
    _priority?: Element;
    /**
     * If true indicates that the provider is asking for the medication request not to occur.
     */
    doNotPerform?: boolean;
    /**
     * Contains extension information for property 'doNotPerform'.
     */
    _doNotPerform?: Element;
    /**
     * Indicates if this record was captured as a secondary 'reported' record rather than as an original primary source-of-truth record.  It may also indicate the source of the report.
     */
    reportedBoolean?: boolean;
    /**
     * Contains extension information for property 'reportedBoolean'.
     */
    _reportedBoolean?: Element;
    /**
     * Indicates if this record was captured as a secondary 'reported' record rather than as an original primary source-of-truth record.  It may also indicate the source of the report.
     */
    reportedReference?: Reference;
    /**
     * Identifies the medication being requested. This is a link to a resource that represents the medication which may be the details of the medication or simply an attribute carrying a code that identifies the medication from a known list of medications.
     */
    medicationCodeableConcept: CodeableConcept;
    /**
     * Identifies the medication being requested. This is a link to a resource that represents the medication which may be the details of the medication or simply an attribute carrying a code that identifies the medication from a known list of medications.
     */
    medicationReference: Reference;
    /**
     * A link to a resource representing the person or set of individuals to whom the medication will be given.
     */
    subject: Reference;
    /**
     * The Encounter during which this [x] was created or to which the creation of this record is tightly associated.
     */
    encounter?: Reference;
    /**
     * Include additional information (for example, patient height and weight) that supports the ordering of the medication.
     */
    supportingInformation?: Reference[];
    /**
     * The date (and perhaps time) when the prescription was initially written or authored on.
     */
    authoredOn?: dateTime;
    /**
     * Contains extension information for property 'authoredOn'.
     */
    _authoredOn?: Element;
    /**
     * The individual, organization, or device that initiated the request and has responsibility for its activation.
     */
    requester?: Reference;
    /**
     * The specified desired performer of the medication treatment (e.g. the performer of the medication administration).
     */
    performer?: Reference;
    /**
     * Indicates the type of performer of the administration of the medication.
     */
    performerType?: CodeableConcept;
    /**
     * The person who entered the order on behalf of another individual for example in the case of a verbal or a telephone order.
     */
    recorder?: Reference;
    /**
     * The reason or the indication for ordering or not ordering the medication.
     */
    reasonCode?: CodeableConcept[];
    /**
     * Condition or observation that supports why the medication was ordered.
     */
    reasonReference?: Reference[];
    /**
     * The URL pointing to a protocol, guideline, orderset, or other definition that is adhered to in whole or in part by this MedicationRequest.
     */
    instantiatesCanonical?: canonical[];
    /**
     * The URL pointing to an externally maintained protocol, guideline, orderset or other definition that is adhered to in whole or in part by this MedicationRequest.
     */
    instantiatesUri?: uri[];
    /**
     * Contains extension information for property 'instantiatesUri'.
     */
    _instantiatesUri?: Element[];
    /**
     * A plan or request that is fulfilled in whole or in part by this medication request.
     */
    basedOn?: Reference[];
    /**
     * A shared identifier common to all requests that were authorized more or less simultaneously by a single author, representing the identifier of the requisition or prescription.
     */
    groupIdentifier?: Identifier;
    /**
     * The description of the overall patte3rn of the administration of the medication to the patient.
     */
    courseOfTherapyType?: CodeableConcept;
    /**
     * Insurance plans, coverage extensions, pre-authorizations and/or pre-determinations that may be required for delivering the requested service.
     */
    insurance?: Reference[];
    /**
     * Extra information about the prescription that could not be conveyed by the other attributes.
     */
    note?: Annotation[];
    /**
     * Indicates how the medication is to be used by the patient.
     */
    dosageInstruction?: Dosage[];
    /**
     * Indicates the specific details for the dispense or medication supply part of a medication request (also known as a Medication Prescription or Medication Order).  Note that this information is not always sent with the order.  There may be in some settings (e.g. hospitals) institutional or system support for completing the dispense details in the pharmacy department.
     */
    dispenseRequest?: MedicationRequestDispenseRequest;
    /**
     * Indicates whether or not substitution can or should be part of the dispense. In some cases, substitution must happen, in other cases substitution must not happen. This block explains the prescriber's intent. If nothing is specified substitution may be done.
     */
    substitution?: MedicationRequestSubstitution;
    /**
     * A link to a resource representing an earlier order related order or prescription.
     */
    priorPrescription?: Reference;
    /**
     * Indicates an actual or potential clinical issue with or between one or more active or proposed clinical actions for a patient; e.g. Drug-drug interaction, duplicate therapy, dosage alert etc.
     */
    detectedIssue?: Reference[];
    /**
     * Links to Provenance records for past versions of this resource or fulfilling request or event resources that identify key state transitions or updates that are likely to be relevant to a user looking at the current version of the resource.
     */
    eventHistory?: Reference[];
}
/**
 * Indicates the specific details for the dispense or medication supply part of a medication request (also known as a Medication Prescription or Medication Order).  Note that this information is not always sent with the order.  There may be in some settings (e.g. hospitals) institutional or system support for completing the dispense details in the pharmacy department.
 */
export interface MedicationRequestDispenseRequest {
    /**
     * Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
     */
    id?: string;
    /**
     * Contains extension information for property 'id'.
     */
    _id?: Element;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * Indicates the quantity or duration for the first dispense of the medication.
     */
    initialFill?: MedicationRequestDispenseRequestInitialFill;
    /**
     * The minimum period of time that must occur between dispenses of the medication.
     */
    dispenseInterval?: Duration;
    /**
     * This indicates the validity period of a prescription (stale dating the Prescription).
     */
    validityPeriod?: Period;
    /**
     * An integer indicating the number of times, in addition to the original dispense, (aka refills or repeats) that the patient can receive the prescribed medication. Usage Notes: This integer does not include the original order dispense. This means that if an order indicates dispense 30 tablets plus "3 repeats", then the order can be dispensed a total of 4 times and the patient can receive a total of 120 tablets.  A prescriber may explicitly say that zero refills are permitted after the initial dispense.
     */
    numberOfRepeatsAllowed?: unsignedInt;
    /**
     * Contains extension information for property 'numberOfRepeatsAllowed'.
     */
    _numberOfRepeatsAllowed?: Element;
    /**
     * The amount that is to be dispensed for one fill.
     */
    quantity?: Quantity;
    /**
     * Identifies the period time over which the supplied product is expected to be used, or the length of time the dispense is expected to last.
     */
    expectedSupplyDuration?: Duration;
    /**
     * Indicates the intended dispensing Organization specified by the prescriber.
     */
    performer?: Reference;
}
/**
 * Indicates the quantity or duration for the first dispense of the medication.
 */
export interface MedicationRequestDispenseRequestInitialFill {
    /**
     * Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
     */
    id?: string;
    /**
     * Contains extension information for property 'id'.
     */
    _id?: Element;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * The amount or quantity to provide as part of the first dispense.
     */
    quantity?: Quantity;
    /**
     * The length of time that the first dispense is expected to last.
     */
    duration?: Duration;
}
/**
 * Indicates whether or not substitution can or should be part of the dispense. In some cases, substitution must happen, in other cases substitution must not happen. This block explains the prescriber's intent. If nothing is specified substitution may be done.
 */
export interface MedicationRequestSubstitution {
    /**
     * Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
     */
    id?: string;
    /**
     * Contains extension information for property 'id'.
     */
    _id?: Element;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * True if the prescriber allows a different drug to be dispensed from what was prescribed.
     */
    allowedBoolean: boolean;
    /**
     * Contains extension information for property 'allowedBoolean'.
     */
    _allowedBoolean?: Element;
    /**
     * True if the prescriber allows a different drug to be dispensed from what was prescribed.
     */
    allowedCodeableConcept: CodeableConcept;
    /**
     * Indicates the reason for the substitution, or why substitution must or must not be performed.
     */
    reason?: CodeableConcept;
}
/**
 * A record of a medication that is being consumed by a patient.   A MedicationStatement may indicate that the patient may be taking the medication now or has taken the medication in the past or will be taking the medication in the future.  The source of this information can be the patient, significant other (such as a family member or spouse), or a clinician.  A common scenario where this information is captured is during the history taking process during a patient visit or stay.   The medication information may come from sources such as the patient's memory, from a prescription bottle,  or from a list of medications the patient, clinician or other party maintains. The primary difference between a medication statement and a medication administration is that the medication administration has complete administration information and is based on actual administration information from the person who administered the medication.  A medication statement is often, if not always, less specific.  There is no required date/time when the medication was administered, in fact we only know that a source has reported the patient is taking this medication, where details such as time, quantity, or rate or even medication product may be incomplete or missing or less precise.  As stated earlier, the medication statement information may come from the patient's memory, from a prescription bottle or from a list of medications the patient, clinician or other party maintains.  Medication administration is more formal and is not missing detailed information.
 */
export interface MedicationStatement {
    /**
     * The type of the resource.
     */
    resourceType: string;
    /**
     * The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes.
     */
    id?: id;
    /**
     * Contains extension information for property 'id'.
     */
    _id?: Element;
    /**
     * The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource.
     */
    meta?: Meta;
    /**
     * A reference to a set of rules that were followed when the resource was constructed, and which must be understood when processing the content. Often, this is a reference to an implementation guide that defines the special rules along with other profiles etc.
     */
    implicitRules?: uri;
    /**
     * Contains extension information for property 'implicitRules'.
     */
    _implicitRules?: Element;
    /**
     * The base language in which the resource is written.
     */
    language?: code;
    /**
     * Contains extension information for property 'language'.
     */
    _language?: Element;
    /**
     * A human-readable narrative that contains a summary of the resource and can be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it "clinically safe" for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety.
     */
    text?: Narrative;
    /**
     * These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, and nor can they have their own independent transaction scope.
     */
    contained?: Resource[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * Identifiers associated with this Medication Statement that are defined by business processes and/or used to refer to it when a direct URL reference to the resource itself is not appropriate. They are business identifiers assigned to this resource by the performer or other systems and remain constant as the resource is updated and propagates from server to server.
     */
    identifier?: Identifier[];
    /**
     * A plan, proposal or order that is fulfilled in whole or in part by this event.
     */
    basedOn?: Reference[];
    /**
     * A larger event of which this particular event is a component or step.
     */
    partOf?: Reference[];
    /**
     * A code representing the patient or other source's judgment about the state of the medication used that this statement is about.  Generally, this will be active or completed.
     */
    status: code;
    /**
     * Contains extension information for property 'status'.
     */
    _status?: Element;
    /**
     * Captures the reason for the current state of the MedicationStatement.
     */
    statusReason?: CodeableConcept[];
    /**
     * Indicates where the medication is expected to be consumed or administered.
     */
    category?: CodeableConcept;
    /**
     * Identifies the medication being administered. This is either a link to a resource representing the details of the medication or a simple attribute carrying a code that identifies the medication from a known list of medications.
     */
    medicationCodeableConcept: CodeableConcept;
    /**
     * Identifies the medication being administered. This is either a link to a resource representing the details of the medication or a simple attribute carrying a code that identifies the medication from a known list of medications.
     */
    medicationReference: Reference;
    /**
     * The person, animal or group who is/was taking the medication.
     */
    subject: Reference;
    /**
     * The encounter or episode of care that establishes the context for this MedicationStatement.
     */
    context?: Reference;
    /**
     * The interval of time during which it is being asserted that the patient is/was/will be taking the medication (or was not taking, when the MedicationStatement.taken element is No).
     */
    effectiveDateTime?: dateTime;
    /**
     * Contains extension information for property 'effectiveDateTime'.
     */
    _effectiveDateTime?: Element;
    /**
     * The interval of time during which it is being asserted that the patient is/was/will be taking the medication (or was not taking, when the MedicationStatement.taken element is No).
     */
    effectivePeriod?: Period;
    /**
     * The date when the medication statement was asserted by the information source.
     */
    dateAsserted?: dateTime;
    /**
     * Contains extension information for property 'dateAsserted'.
     */
    _dateAsserted?: Element;
    /**
     * The person or organization that provided the information about the taking of this medication. Note: Use derivedFrom when a MedicationStatement is derived from other resources, e.g. Claim or MedicationRequest.
     */
    informationSource?: Reference;
    /**
     * Allows linking the MedicationStatement to the underlying MedicationRequest, or to other information that supports or is used to derive the MedicationStatement.
     */
    derivedFrom?: Reference[];
    /**
     * A reason for why the medication is being/was taken.
     */
    reasonCode?: CodeableConcept[];
    /**
     * Condition or observation that supports why the medication is being/was taken.
     */
    reasonReference?: Reference[];
    /**
     * Provides extra information about the medication statement that is not conveyed by the other attributes.
     */
    note?: Annotation[];
    /**
     * Indicates how the medication is/was or should be taken by the patient.
     */
    dosage?: Dosage[];
}
/**
 * Detailed definition of a medicinal product, typically for uses other than direct patient care (e.g. regulatory use).
 */
export interface MedicinalProduct {
    /**
     * The type of the resource.
     */
    resourceType: string;
    /**
     * The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes.
     */
    id?: id;
    /**
     * Contains extension information for property 'id'.
     */
    _id?: Element;
    /**
     * The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource.
     */
    meta?: Meta;
    /**
     * A reference to a set of rules that were followed when the resource was constructed, and which must be understood when processing the content. Often, this is a reference to an implementation guide that defines the special rules along with other profiles etc.
     */
    implicitRules?: uri;
    /**
     * Contains extension information for property 'implicitRules'.
     */
    _implicitRules?: Element;
    /**
     * The base language in which the resource is written.
     */
    language?: code;
    /**
     * Contains extension information for property 'language'.
     */
    _language?: Element;
    /**
     * A human-readable narrative that contains a summary of the resource and can be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it "clinically safe" for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety.
     */
    text?: Narrative;
    /**
     * These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, and nor can they have their own independent transaction scope.
     */
    contained?: Resource[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * Business identifier for this product. Could be an MPID.
     */
    identifier?: Identifier[];
    /**
     * Regulatory type, e.g. Investigational or Authorized.
     */
    type?: CodeableConcept;
    /**
     * If this medicine applies to human or veterinary uses.
     */
    domain?: Coding;
    /**
     * The dose form for a single part product, or combined form of a multiple part product.
     */
    combinedPharmaceuticalDoseForm?: CodeableConcept;
    /**
     * The legal status of supply of the medicinal product as classified by the regulator.
     */
    legalStatusOfSupply?: CodeableConcept;
    /**
     * Whether the Medicinal Product is subject to additional monitoring for regulatory reasons.
     */
    additionalMonitoringIndicator?: CodeableConcept;
    /**
     * Whether the Medicinal Product is subject to special measures for regulatory reasons.
     */
    specialMeasures?: string[];
    /**
     * Contains extension information for property 'specialMeasures'.
     */
    _specialMeasures?: Element[];
    /**
     * If authorised for use in children.
     */
    paediatricUseIndicator?: CodeableConcept;
    /**
     * Allows the product to be classified by various systems.
     */
    productClassification?: CodeableConcept[];
    /**
     * Marketing status of the medicinal product, in contrast to marketing authorizaton.
     */
    marketingStatus?: MarketingStatus[];
    /**
     * Pharmaceutical aspects of product.
     */
    pharmaceuticalProduct?: Reference[];
    /**
     * Package representation for the product.
     */
    packagedMedicinalProduct?: Reference[];
    /**
     * Supporting documentation, typically for regulatory submission.
     */
    attachedDocument?: Reference[];
    /**
     * A master file for to the medicinal product (e.g. Pharmacovigilance System Master File).
     */
    masterFile?: Reference[];
    /**
     * A product specific contact, person (in a role), or an organization.
     */
    contact?: Reference[];
    /**
     * Clinical trials or studies that this product is involved in.
     */
    clinicalTrial?: Reference[];
    /**
     * The product's name, including full name and possibly coded parts.
     */
    name: MedicinalProductName[];
    /**
     * Reference to another product, e.g. for linking authorised to investigational product.
     */
    crossReference?: Identifier[];
    /**
     * An operation applied to the product, for manufacturing or adminsitrative purpose.
     */
    manufacturingBusinessOperation?: MedicinalProductManufacturingBusinessOperation[];
    /**
     * Indicates if the medicinal product has an orphan designation for the treatment of a rare disease.
     */
    specialDesignation?: MedicinalProductSpecialDesignation[];
}
/**
 * The product's name, including full name and possibly coded parts.
 */
export interface MedicinalProductName {
    /**
     * Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
     */
    id?: string;
    /**
     * Contains extension information for property 'id'.
     */
    _id?: Element;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * The full product name.
     */
    productName: string;
    /**
     * Contains extension information for property 'productName'.
     */
    _productName?: Element;
    /**
     * Coding words or phrases of the name.
     */
    namePart?: MedicinalProductNameNamePart[];
    /**
     * Country where the name applies.
     */
    countryLanguage?: MedicinalProductNameCountryLanguage[];
}
/**
 * Coding words or phrases of the name.
 */
export interface MedicinalProductNameNamePart {
    /**
     * Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
     */
    id?: string;
    /**
     * Contains extension information for property 'id'.
     */
    _id?: Element;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * A fragment of a product name.
     */
    part: string;
    /**
     * Contains extension information for property 'part'.
     */
    _part?: Element;
    /**
     * Idenifying type for this part of the name (e.g. strength part).
     */
    type: Coding;
}
/**
 * Country where the name applies.
 */
export interface MedicinalProductNameCountryLanguage {
    /**
     * Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
     */
    id?: string;
    /**
     * Contains extension information for property 'id'.
     */
    _id?: Element;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * Country code for where this name applies.
     */
    country: CodeableConcept;
    /**
     * Jurisdiction code for where this name applies.
     */
    jurisdiction?: CodeableConcept;
    /**
     * Language code for this name.
     */
    language: CodeableConcept;
}
/**
 * An operation applied to the product, for manufacturing or adminsitrative purpose.
 */
export interface MedicinalProductManufacturingBusinessOperation {
    /**
     * Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
     */
    id?: string;
    /**
     * Contains extension information for property 'id'.
     */
    _id?: Element;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * The type of manufacturing operation.
     */
    operationType?: CodeableConcept;
    /**
     * Regulatory authorization reference number.
     */
    authorisationReferenceNumber?: Identifier;
    /**
     * Regulatory authorization date.
     */
    effectiveDate?: dateTime;
    /**
     * Contains extension information for property 'effectiveDate'.
     */
    _effectiveDate?: Element;
    /**
     * To indicate if this proces is commercially confidential.
     */
    confidentialityIndicator?: CodeableConcept;
    /**
     * The manufacturer or establishment associated with the process.
     */
    manufacturer?: Reference[];
    /**
     * A regulator which oversees the operation.
     */
    regulator?: Reference;
}
/**
 * Indicates if the medicinal product has an orphan designation for the treatment of a rare disease.
 */
export interface MedicinalProductSpecialDesignation {
    /**
     * Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
     */
    id?: string;
    /**
     * Contains extension information for property 'id'.
     */
    _id?: Element;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * Identifier for the designation, or procedure number.
     */
    identifier?: Identifier[];
    /**
     * The type of special designation, e.g. orphan drug, minor use.
     */
    type?: CodeableConcept;
    /**
     * The intended use of the product, e.g. prevention, treatment.
     */
    intendedUse?: CodeableConcept;
    /**
     * Condition for which the medicinal use applies.
     */
    indicationCodeableConcept?: CodeableConcept;
    /**
     * Condition for which the medicinal use applies.
     */
    indicationReference?: Reference;
    /**
     * For example granted, pending, expired or withdrawn.
     */
    status?: CodeableConcept;
    /**
     * Date when the designation was granted.
     */
    date?: dateTime;
    /**
     * Contains extension information for property 'date'.
     */
    _date?: Element;
    /**
     * Animal species for which this applies.
     */
    species?: CodeableConcept;
}
/**
 * The regulatory authorization of a medicinal product.
 */
export interface MedicinalProductAuthorization {
    /**
     * The type of the resource.
     */
    resourceType: string;
    /**
     * The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes.
     */
    id?: id;
    /**
     * Contains extension information for property 'id'.
     */
    _id?: Element;
    /**
     * The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource.
     */
    meta?: Meta;
    /**
     * A reference to a set of rules that were followed when the resource was constructed, and which must be understood when processing the content. Often, this is a reference to an implementation guide that defines the special rules along with other profiles etc.
     */
    implicitRules?: uri;
    /**
     * Contains extension information for property 'implicitRules'.
     */
    _implicitRules?: Element;
    /**
     * The base language in which the resource is written.
     */
    language?: code;
    /**
     * Contains extension information for property 'language'.
     */
    _language?: Element;
    /**
     * A human-readable narrative that contains a summary of the resource and can be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it "clinically safe" for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety.
     */
    text?: Narrative;
    /**
     * These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, and nor can they have their own independent transaction scope.
     */
    contained?: Resource[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * Business identifier for the marketing authorization, as assigned by a regulator.
     */
    identifier?: Identifier[];
    /**
     * The medicinal product that is being authorized.
     */
    subject?: Reference;
    /**
     * The country in which the marketing authorization has been granted.
     */
    country?: CodeableConcept[];
    /**
     * Jurisdiction within a country.
     */
    jurisdiction?: CodeableConcept[];
    /**
     * The status of the marketing authorization.
     */
    status?: CodeableConcept;
    /**
     * The date at which the given status has become applicable.
     */
    statusDate?: dateTime;
    /**
     * Contains extension information for property 'statusDate'.
     */
    _statusDate?: Element;
    /**
     * The date when a suspended the marketing or the marketing authorization of the product is anticipated to be restored.
     */
    restoreDate?: dateTime;
    /**
     * Contains extension information for property 'restoreDate'.
     */
    _restoreDate?: Element;
    /**
     * The beginning of the time period in which the marketing authorization is in the specific status shall be specified A complete date consisting of day, month and year shall be specified using the ISO 8601 date format.
     */
    validityPeriod?: Period;
    /**
     * A period of time after authorization before generic product applicatiosn can be submitted.
     */
    dataExclusivityPeriod?: Period;
    /**
     * The date when the first authorization was granted by a Medicines Regulatory Agency.
     */
    dateOfFirstAuthorization?: dateTime;
    /**
     * Contains extension information for property 'dateOfFirstAuthorization'.
     */
    _dateOfFirstAuthorization?: Element;
    /**
     * Date of first marketing authorization for a company's new medicinal product in any country in the World.
     */
    internationalBirthDate?: dateTime;
    /**
     * Contains extension information for property 'internationalBirthDate'.
     */
    _internationalBirthDate?: Element;
    /**
     * The legal framework against which this authorization is granted.
     */
    legalBasis?: CodeableConcept;
    /**
     * Authorization in areas within a country.
     */
    jurisdictionalAuthorization?: MedicinalProductAuthorizationJurisdictionalAuthorization[];
    /**
     * Marketing Authorization Holder.
     */
    holder?: Reference;
    /**
     * Medicines Regulatory Agency.
     */
    regulator?: Reference;
    /**
     * The regulatory procedure for granting or amending a marketing authorization.
     */
    procedure?: MedicinalProductAuthorizationProcedure;
}
/**
 * Authorization in areas within a country.
 */
export interface MedicinalProductAuthorizationJurisdictionalAuthorization {
    /**
     * Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
     */
    id?: string;
    /**
     * Contains extension information for property 'id'.
     */
    _id?: Element;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * The assigned number for the marketing authorization.
     */
    identifier?: Identifier[];
    /**
     * Country of authorization.
     */
    country?: CodeableConcept;
    /**
     * Jurisdiction within a country.
     */
    jurisdiction?: CodeableConcept[];
    /**
     * The legal status of supply in a jurisdiction or region.
     */
    legalStatusOfSupply?: CodeableConcept;
    /**
     * The start and expected end date of the authorization.
     */
    validityPeriod?: Period;
}
/**
 * The regulatory procedure for granting or amending a marketing authorization.
 */
export interface MedicinalProductAuthorizationProcedure {
    /**
     * Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
     */
    id?: string;
    /**
     * Contains extension information for property 'id'.
     */
    _id?: Element;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * Identifier for this procedure.
     */
    identifier?: Identifier;
    /**
     * Type of procedure.
     */
    type: CodeableConcept;
    /**
     * Date of procedure.
     */
    datePeriod?: Period;
    /**
     * Date of procedure.
     */
    dateDateTime?: dateTime;
    /**
     * Contains extension information for property 'dateDateTime'.
     */
    _dateDateTime?: Element;
    /**
     * Applcations submitted to obtain a marketing authorization.
     */
    application?: MedicinalProductAuthorizationProcedure[];
}
/**
 * The clinical particulars - indications, contraindications etc. of a medicinal product, including for regulatory purposes.
 */
export interface MedicinalProductContraindication {
    /**
     * The type of the resource.
     */
    resourceType: string;
    /**
     * The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes.
     */
    id?: id;
    /**
     * Contains extension information for property 'id'.
     */
    _id?: Element;
    /**
     * The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource.
     */
    meta?: Meta;
    /**
     * A reference to a set of rules that were followed when the resource was constructed, and which must be understood when processing the content. Often, this is a reference to an implementation guide that defines the special rules along with other profiles etc.
     */
    implicitRules?: uri;
    /**
     * Contains extension information for property 'implicitRules'.
     */
    _implicitRules?: Element;
    /**
     * The base language in which the resource is written.
     */
    language?: code;
    /**
     * Contains extension information for property 'language'.
     */
    _language?: Element;
    /**
     * A human-readable narrative that contains a summary of the resource and can be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it "clinically safe" for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety.
     */
    text?: Narrative;
    /**
     * These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, and nor can they have their own independent transaction scope.
     */
    contained?: Resource[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * The medication for which this is an indication.
     */
    subject?: Reference[];
    /**
     * The disease, symptom or procedure for the contraindication.
     */
    disease?: CodeableConcept;
    /**
     * The status of the disease or symptom for the contraindication.
     */
    diseaseStatus?: CodeableConcept;
    /**
     * A comorbidity (concurrent condition) or coinfection.
     */
    comorbidity?: CodeableConcept[];
    /**
     * Information about the use of the medicinal product in relation to other therapies as part of the indication.
     */
    therapeuticIndication?: Reference[];
    /**
     * Information about the use of the medicinal product in relation to other therapies described as part of the indication.
     */
    otherTherapy?: MedicinalProductContraindicationOtherTherapy[];
    /**
     * The population group to which this applies.
     */
    population?: Population[];
}
/**
 * Information about the use of the medicinal product in relation to other therapies described as part of the indication.
 */
export interface MedicinalProductContraindicationOtherTherapy {
    /**
     * Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
     */
    id?: string;
    /**
     * Contains extension information for property 'id'.
     */
    _id?: Element;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * The type of relationship between the medicinal product indication or contraindication and another therapy.
     */
    therapyRelationshipType: CodeableConcept;
    /**
     * Reference to a specific medication (active substance, medicinal product or class of products) as part of an indication or contraindication.
     */
    medicationCodeableConcept: CodeableConcept;
    /**
     * Reference to a specific medication (active substance, medicinal product or class of products) as part of an indication or contraindication.
     */
    medicationReference: Reference;
}
/**
 * Indication for the Medicinal Product.
 */
export interface MedicinalProductIndication {
    /**
     * The type of the resource.
     */
    resourceType: string;
    /**
     * The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes.
     */
    id?: id;
    /**
     * Contains extension information for property 'id'.
     */
    _id?: Element;
    /**
     * The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource.
     */
    meta?: Meta;
    /**
     * A reference to a set of rules that were followed when the resource was constructed, and which must be understood when processing the content. Often, this is a reference to an implementation guide that defines the special rules along with other profiles etc.
     */
    implicitRules?: uri;
    /**
     * Contains extension information for property 'implicitRules'.
     */
    _implicitRules?: Element;
    /**
     * The base language in which the resource is written.
     */
    language?: code;
    /**
     * Contains extension information for property 'language'.
     */
    _language?: Element;
    /**
     * A human-readable narrative that contains a summary of the resource and can be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it "clinically safe" for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety.
     */
    text?: Narrative;
    /**
     * These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, and nor can they have their own independent transaction scope.
     */
    contained?: Resource[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * The medication for which this is an indication.
     */
    subject?: Reference[];
    /**
     * The disease, symptom or procedure that is the indication for treatment.
     */
    diseaseSymptomProcedure?: CodeableConcept;
    /**
     * The status of the disease or symptom for which the indication applies.
     */
    diseaseStatus?: CodeableConcept;
    /**
     * Comorbidity (concurrent condition) or co-infection as part of the indication.
     */
    comorbidity?: CodeableConcept[];
    /**
     * The intended effect, aim or strategy to be achieved by the indication.
     */
    intendedEffect?: CodeableConcept;
    /**
     * Timing or duration information as part of the indication.
     */
    duration?: Quantity;
    /**
     * Information about the use of the medicinal product in relation to other therapies described as part of the indication.
     */
    otherTherapy?: MedicinalProductIndicationOtherTherapy[];
    /**
     * Describe the undesirable effects of the medicinal product.
     */
    undesirableEffect?: Reference[];
    /**
     * The population group to which this applies.
     */
    population?: Population[];
}
/**
 * Information about the use of the medicinal product in relation to other therapies described as part of the indication.
 */
export interface MedicinalProductIndicationOtherTherapy {
    /**
     * Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
     */
    id?: string;
    /**
     * Contains extension information for property 'id'.
     */
    _id?: Element;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * The type of relationship between the medicinal product indication or contraindication and another therapy.
     */
    therapyRelationshipType: CodeableConcept;
    /**
     * Reference to a specific medication (active substance, medicinal product or class of products) as part of an indication or contraindication.
     */
    medicationCodeableConcept: CodeableConcept;
    /**
     * Reference to a specific medication (active substance, medicinal product or class of products) as part of an indication or contraindication.
     */
    medicationReference: Reference;
}
/**
 * An ingredient of a manufactured item or pharmaceutical product.
 */
export interface MedicinalProductIngredient {
    /**
     * The type of the resource.
     */
    resourceType: string;
    /**
     * The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes.
     */
    id?: id;
    /**
     * Contains extension information for property 'id'.
     */
    _id?: Element;
    /**
     * The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource.
     */
    meta?: Meta;
    /**
     * A reference to a set of rules that were followed when the resource was constructed, and which must be understood when processing the content. Often, this is a reference to an implementation guide that defines the special rules along with other profiles etc.
     */
    implicitRules?: uri;
    /**
     * Contains extension information for property 'implicitRules'.
     */
    _implicitRules?: Element;
    /**
     * The base language in which the resource is written.
     */
    language?: code;
    /**
     * Contains extension information for property 'language'.
     */
    _language?: Element;
    /**
     * A human-readable narrative that contains a summary of the resource and can be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it "clinically safe" for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety.
     */
    text?: Narrative;
    /**
     * These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, and nor can they have their own independent transaction scope.
     */
    contained?: Resource[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * The identifier(s) of this Ingredient that are assigned by business processes and/or used to refer to it when a direct URL reference to the resource itself is not appropriate.
     */
    identifier?: Identifier;
    /**
     * Ingredient role e.g. Active ingredient, excipient.
     */
    role: CodeableConcept;
    /**
     * If the ingredient is a known or suspected allergen.
     */
    allergenicIndicator?: boolean;
    /**
     * Contains extension information for property 'allergenicIndicator'.
     */
    _allergenicIndicator?: Element;
    /**
     * Manufacturer of this Ingredient.
     */
    manufacturer?: Reference[];
    /**
     * A specified substance that comprises this ingredient.
     */
    specifiedSubstance?: MedicinalProductIngredientSpecifiedSubstance[];
    /**
     * The ingredient substance.
     */
    substance?: MedicinalProductIngredientSubstance;
}
/**
 * A specified substance that comprises this ingredient.
 */
export interface MedicinalProductIngredientSpecifiedSubstance {
    /**
     * Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
     */
    id?: string;
    /**
     * Contains extension information for property 'id'.
     */
    _id?: Element;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * The specified substance.
     */
    code: CodeableConcept;
    /**
     * The group of specified substance, e.g. group 1 to 4.
     */
    group: CodeableConcept;
    /**
     * Confidentiality level of the specified substance as the ingredient.
     */
    confidentiality?: CodeableConcept;
    /**
     * Quantity of the substance or specified substance present in the manufactured item or pharmaceutical product.
     */
    strength?: MedicinalProductIngredientSpecifiedSubstanceStrength[];
}
/**
 * Quantity of the substance or specified substance present in the manufactured item or pharmaceutical product.
 */
export interface MedicinalProductIngredientSpecifiedSubstanceStrength {
    /**
     * Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
     */
    id?: string;
    /**
     * Contains extension information for property 'id'.
     */
    _id?: Element;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * The quantity of substance in the unit of presentation, or in the volume (or mass) of the single pharmaceutical product or manufactured item.
     */
    presentation: Ratio;
    /**
     * A lower limit for the quantity of substance in the unit of presentation. For use when there is a range of strengths, this is the lower limit, with the presentation attribute becoming the upper limit.
     */
    presentationLowLimit?: Ratio;
    /**
     * The strength per unitary volume (or mass).
     */
    concentration?: Ratio;
    /**
     * A lower limit for the strength per unitary volume (or mass), for when there is a range. The concentration attribute then becomes the upper limit.
     */
    concentrationLowLimit?: Ratio;
    /**
     * For when strength is measured at a particular point or distance.
     */
    measurementPoint?: string;
    /**
     * Contains extension information for property 'measurementPoint'.
     */
    _measurementPoint?: Element;
    /**
     * The country or countries for which the strength range applies.
     */
    country?: CodeableConcept[];
    /**
     * Strength expressed in terms of a reference substance.
     */
    referenceStrength?: MedicinalProductIngredientSpecifiedSubstanceStrengthReferenceStrength[];
}
/**
 * Strength expressed in terms of a reference substance.
 */
export interface MedicinalProductIngredientSpecifiedSubstanceStrengthReferenceStrength {
    /**
     * Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
     */
    id?: string;
    /**
     * Contains extension information for property 'id'.
     */
    _id?: Element;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * Relevant reference substance.
     */
    substance?: CodeableConcept;
    /**
     * Strength expressed in terms of a reference substance.
     */
    strength: Ratio;
    /**
     * Strength expressed in terms of a reference substance.
     */
    strengthLowLimit?: Ratio;
    /**
     * For when strength is measured at a particular point or distance.
     */
    measurementPoint?: string;
    /**
     * Contains extension information for property 'measurementPoint'.
     */
    _measurementPoint?: Element;
    /**
     * The country or countries for which the strength range applies.
     */
    country?: CodeableConcept[];
}
/**
 * The ingredient substance.
 */
export interface MedicinalProductIngredientSubstance {
    /**
     * Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
     */
    id?: string;
    /**
     * Contains extension information for property 'id'.
     */
    _id?: Element;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * The ingredient substance.
     */
    code: CodeableConcept;
    /**
     * Quantity of the substance or specified substance present in the manufactured item or pharmaceutical product.
     */
    strength?: MedicinalProductIngredientSpecifiedSubstanceStrength[];
}
/**
 * The interactions of the medicinal product with other medicinal products, or other forms of interactions.
 */
export interface MedicinalProductInteraction {
    /**
     * The type of the resource.
     */
    resourceType: string;
    /**
     * The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes.
     */
    id?: id;
    /**
     * Contains extension information for property 'id'.
     */
    _id?: Element;
    /**
     * The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource.
     */
    meta?: Meta;
    /**
     * A reference to a set of rules that were followed when the resource was constructed, and which must be understood when processing the content. Often, this is a reference to an implementation guide that defines the special rules along with other profiles etc.
     */
    implicitRules?: uri;
    /**
     * Contains extension information for property 'implicitRules'.
     */
    _implicitRules?: Element;
    /**
     * The base language in which the resource is written.
     */
    language?: code;
    /**
     * Contains extension information for property 'language'.
     */
    _language?: Element;
    /**
     * A human-readable narrative that contains a summary of the resource and can be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it "clinically safe" for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety.
     */
    text?: Narrative;
    /**
     * These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, and nor can they have their own independent transaction scope.
     */
    contained?: Resource[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * The medication for which this is a described interaction.
     */
    subject?: Reference[];
    /**
     * The interaction described.
     */
    description?: string;
    /**
     * Contains extension information for property 'description'.
     */
    _description?: Element;
    /**
     * The specific medication, food or laboratory test that interacts.
     */
    interactant?: MedicinalProductInteractionInteractant[];
    /**
     * The type of the interaction e.g. drug-drug interaction, drug-food interaction, drug-lab test interaction.
     */
    type?: CodeableConcept;
    /**
     * The effect of the interaction, for example "reduced gastric absorption of primary medication".
     */
    effect?: CodeableConcept;
    /**
     * The incidence of the interaction, e.g. theoretical, observed.
     */
    incidence?: CodeableConcept;
    /**
     * Actions for managing the interaction.
     */
    management?: CodeableConcept;
}
/**
 * The specific medication, food or laboratory test that interacts.
 */
export interface MedicinalProductInteractionInteractant {
    /**
     * Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
     */
    id?: string;
    /**
     * Contains extension information for property 'id'.
     */
    _id?: Element;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * The specific medication, food or laboratory test that interacts.
     */
    itemReference: Reference;
    /**
     * The specific medication, food or laboratory test that interacts.
     */
    itemCodeableConcept: CodeableConcept;
}
/**
 * The manufactured item as contained in the packaged medicinal product.
 */
export interface MedicinalProductManufactured {
    /**
     * The type of the resource.
     */
    resourceType: string;
    /**
     * The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes.
     */
    id?: id;
    /**
     * Contains extension information for property 'id'.
     */
    _id?: Element;
    /**
     * The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource.
     */
    meta?: Meta;
    /**
     * A reference to a set of rules that were followed when the resource was constructed, and which must be understood when processing the content. Often, this is a reference to an implementation guide that defines the special rules along with other profiles etc.
     */
    implicitRules?: uri;
    /**
     * Contains extension information for property 'implicitRules'.
     */
    _implicitRules?: Element;
    /**
     * The base language in which the resource is written.
     */
    language?: code;
    /**
     * Contains extension information for property 'language'.
     */
    _language?: Element;
    /**
     * A human-readable narrative that contains a summary of the resource and can be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it "clinically safe" for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety.
     */
    text?: Narrative;
    /**
     * These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, and nor can they have their own independent transaction scope.
     */
    contained?: Resource[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * Dose form as manufactured and before any transformation into the pharmaceutical product.
     */
    manufacturedDoseForm: CodeableConcept;
    /**
     * The “real world” units in which the quantity of the manufactured item is described.
     */
    unitOfPresentation?: CodeableConcept;
    /**
     * The quantity or "count number" of the manufactured item.
     */
    quantity: Quantity;
    /**
     * Manufacturer of the item (Note that this should be named "manufacturer" but it currently causes technical issues).
     */
    manufacturer?: Reference[];
    /**
     * Ingredient.
     */
    ingredient?: Reference[];
    /**
     * Dimensions, color etc.
     */
    physicalCharacteristics?: ProdCharacteristic;
    /**
     * Other codeable characteristics.
     */
    otherCharacteristics?: CodeableConcept[];
}
/**
 * A medicinal product in a container or package.
 */
export interface MedicinalProductPackaged {
    /**
     * The type of the resource.
     */
    resourceType: string;
    /**
     * The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes.
     */
    id?: id;
    /**
     * Contains extension information for property 'id'.
     */
    _id?: Element;
    /**
     * The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource.
     */
    meta?: Meta;
    /**
     * A reference to a set of rules that were followed when the resource was constructed, and which must be understood when processing the content. Often, this is a reference to an implementation guide that defines the special rules along with other profiles etc.
     */
    implicitRules?: uri;
    /**
     * Contains extension information for property 'implicitRules'.
     */
    _implicitRules?: Element;
    /**
     * The base language in which the resource is written.
     */
    language?: code;
    /**
     * Contains extension information for property 'language'.
     */
    _language?: Element;
    /**
     * A human-readable narrative that contains a summary of the resource and can be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it "clinically safe" for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety.
     */
    text?: Narrative;
    /**
     * These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, and nor can they have their own independent transaction scope.
     */
    contained?: Resource[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * Unique identifier.
     */
    identifier?: Identifier[];
    /**
     * The product with this is a pack for.
     */
    subject?: Reference[];
    /**
     * Textual description.
     */
    description?: string;
    /**
     * Contains extension information for property 'description'.
     */
    _description?: Element;
    /**
     * The legal status of supply of the medicinal product as classified by the regulator.
     */
    legalStatusOfSupply?: CodeableConcept;
    /**
     * Marketing information.
     */
    marketingStatus?: MarketingStatus[];
    /**
     * Manufacturer of this Package Item.
     */
    marketingAuthorization?: Reference;
    /**
     * Manufacturer of this Package Item.
     */
    manufacturer?: Reference[];
    /**
     * Batch numbering.
     */
    batchIdentifier?: MedicinalProductPackagedBatchIdentifier[];
    /**
     * A packaging item, as a contained for medicine, possibly with other packaging items within.
     */
    packageItem: MedicinalProductPackagedPackageItem[];
}
/**
 * Batch numbering.
 */
export interface MedicinalProductPackagedBatchIdentifier {
    /**
     * Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
     */
    id?: string;
    /**
     * Contains extension information for property 'id'.
     */
    _id?: Element;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * A number appearing on the outer packaging of a specific batch.
     */
    outerPackaging: Identifier;
    /**
     * A number appearing on the immediate packaging (and not the outer packaging).
     */
    immediatePackaging?: Identifier;
}
/**
 * A packaging item, as a contained for medicine, possibly with other packaging items within.
 */
export interface MedicinalProductPackagedPackageItem {
    /**
     * Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
     */
    id?: string;
    /**
     * Contains extension information for property 'id'.
     */
    _id?: Element;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * Including possibly Data Carrier Identifier.
     */
    identifier?: Identifier[];
    /**
     * The physical type of the container of the medicine.
     */
    type: CodeableConcept;
    /**
     * The quantity of this package in the medicinal product, at the current level of packaging. The outermost is always 1.
     */
    quantity: Quantity;
    /**
     * Material type of the package item.
     */
    material?: CodeableConcept[];
    /**
     * A possible alternate material for the packaging.
     */
    alternateMaterial?: CodeableConcept[];
    /**
     * A device accompanying a medicinal product.
     */
    device?: Reference[];
    /**
     * The manufactured item as contained in the packaged medicinal product.
     */
    manufacturedItem?: Reference[];
    /**
     * Allows containers within containers.
     */
    packageItem?: MedicinalProductPackagedPackageItem[];
    /**
     * Dimensions, color etc.
     */
    physicalCharacteristics?: ProdCharacteristic;
    /**
     * Other codeable characteristics.
     */
    otherCharacteristics?: CodeableConcept[];
    /**
     * Shelf Life and storage information.
     */
    shelfLifeStorage?: ProductShelfLife[];
    /**
     * Manufacturer of this Package Item.
     */
    manufacturer?: Reference[];
}
/**
 * A pharmaceutical product described in terms of its composition and dose form.
 */
export interface MedicinalProductPharmaceutical {
    /**
     * The type of the resource.
     */
    resourceType: string;
    /**
     * The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes.
     */
    id?: id;
    /**
     * Contains extension information for property 'id'.
     */
    _id?: Element;
    /**
     * The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource.
     */
    meta?: Meta;
    /**
     * A reference to a set of rules that were followed when the resource was constructed, and which must be understood when processing the content. Often, this is a reference to an implementation guide that defines the special rules along with other profiles etc.
     */
    implicitRules?: uri;
    /**
     * Contains extension information for property 'implicitRules'.
     */
    _implicitRules?: Element;
    /**
     * The base language in which the resource is written.
     */
    language?: code;
    /**
     * Contains extension information for property 'language'.
     */
    _language?: Element;
    /**
     * A human-readable narrative that contains a summary of the resource and can be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it "clinically safe" for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety.
     */
    text?: Narrative;
    /**
     * These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, and nor can they have their own independent transaction scope.
     */
    contained?: Resource[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * An identifier for the pharmaceutical medicinal product.
     */
    identifier?: Identifier[];
    /**
     * The administrable dose form, after necessary reconstitution.
     */
    administrableDoseForm: CodeableConcept;
    /**
     * Todo.
     */
    unitOfPresentation?: CodeableConcept;
    /**
     * Ingredient.
     */
    ingredient?: Reference[];
    /**
     * Accompanying device.
     */
    device?: Reference[];
    /**
     * Characteristics e.g. a products onset of action.
     */
    characteristics?: MedicinalProductPharmaceuticalCharacteristics[];
    /**
     * The path by which the pharmaceutical product is taken into or makes contact with the body.
     */
    routeOfAdministration: MedicinalProductPharmaceuticalRouteOfAdministration[];
}
/**
 * Characteristics e.g. a products onset of action.
 */
export interface MedicinalProductPharmaceuticalCharacteristics {
    /**
     * Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
     */
    id?: string;
    /**
     * Contains extension information for property 'id'.
     */
    _id?: Element;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * A coded characteristic.
     */
    code: CodeableConcept;
    /**
     * The status of characteristic e.g. assigned or pending.
     */
    status?: CodeableConcept;
}
/**
 * The path by which the pharmaceutical product is taken into or makes contact with the body.
 */
export interface MedicinalProductPharmaceuticalRouteOfAdministration {
    /**
     * Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
     */
    id?: string;
    /**
     * Contains extension information for property 'id'.
     */
    _id?: Element;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * Coded expression for the route.
     */
    code: CodeableConcept;
    /**
     * The first dose (dose quantity) administered in humans can be specified, for a product under investigation, using a numerical value and its unit of measurement.
     */
    firstDose?: Quantity;
    /**
     * The maximum single dose that can be administered as per the protocol of a clinical trial can be specified using a numerical value and its unit of measurement.
     */
    maxSingleDose?: Quantity;
    /**
     * The maximum dose per day (maximum dose quantity to be administered in any one 24-h period) that can be administered as per the protocol referenced in the clinical trial authorisation.
     */
    maxDosePerDay?: Quantity;
    /**
     * The maximum dose per treatment period that can be administered as per the protocol referenced in the clinical trial authorisation.
     */
    maxDosePerTreatmentPeriod?: Ratio;
    /**
     * The maximum treatment period during which an Investigational Medicinal Product can be administered as per the protocol referenced in the clinical trial authorisation.
     */
    maxTreatmentPeriod?: Duration;
    /**
     * A species for which this route applies.
     */
    targetSpecies?: MedicinalProductPharmaceuticalRouteOfAdministrationTargetSpecies[];
}
/**
 * A species for which this route applies.
 */
export interface MedicinalProductPharmaceuticalRouteOfAdministrationTargetSpecies {
    /**
     * Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
     */
    id?: string;
    /**
     * Contains extension information for property 'id'.
     */
    _id?: Element;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * Coded expression for the species.
     */
    code: CodeableConcept;
    /**
     * A species specific time during which consumption of animal product is not appropriate.
     */
    withdrawalPeriod?: MedicinalProductPharmaceuticalRouteOfAdministrationTargetSpeciesWithdrawalPeriod[];
}
/**
 * A species specific time during which consumption of animal product is not appropriate.
 */
export interface MedicinalProductPharmaceuticalRouteOfAdministrationTargetSpeciesWithdrawalPeriod {
    /**
     * Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
     */
    id?: string;
    /**
     * Contains extension information for property 'id'.
     */
    _id?: Element;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * Coded expression for the type of tissue for which the withdrawal period applues, e.g. meat, milk.
     */
    tissue: CodeableConcept;
    /**
     * A value for the time.
     */
    value: Quantity;
    /**
     * Extra information about the withdrawal period.
     */
    supportingInformation?: string;
    /**
     * Contains extension information for property 'supportingInformation'.
     */
    _supportingInformation?: Element;
}
/**
 * Describe the undesirable effects of the medicinal product.
 */
export interface MedicinalProductUndesirableEffect {
    /**
     * The type of the resource.
     */
    resourceType: string;
    /**
     * The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes.
     */
    id?: id;
    /**
     * Contains extension information for property 'id'.
     */
    _id?: Element;
    /**
     * The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource.
     */
    meta?: Meta;
    /**
     * A reference to a set of rules that were followed when the resource was constructed, and which must be understood when processing the content. Often, this is a reference to an implementation guide that defines the special rules along with other profiles etc.
     */
    implicitRules?: uri;
    /**
     * Contains extension information for property 'implicitRules'.
     */
    _implicitRules?: Element;
    /**
     * The base language in which the resource is written.
     */
    language?: code;
    /**
     * Contains extension information for property 'language'.
     */
    _language?: Element;
    /**
     * A human-readable narrative that contains a summary of the resource and can be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it "clinically safe" for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety.
     */
    text?: Narrative;
    /**
     * These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, and nor can they have their own independent transaction scope.
     */
    contained?: Resource[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * The medication for which this is an indication.
     */
    subject?: Reference[];
    /**
     * The symptom, condition or undesirable effect.
     */
    symptomConditionEffect?: CodeableConcept;
    /**
     * Classification of the effect.
     */
    classification?: CodeableConcept;
    /**
     * The frequency of occurrence of the effect.
     */
    frequencyOfOccurrence?: CodeableConcept;
    /**
     * The population group to which this applies.
     */
    population?: Population[];
}
/**
 * Defines the characteristics of a message that can be shared between systems, including the type of event that initiates the message, the content to be transmitted and what response(s), if any, are permitted.
 */
export interface MessageDefinition {
    /**
     * The type of the resource.
     */
    resourceType: string;
    /**
     * The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes.
     */
    id?: id;
    /**
     * Contains extension information for property 'id'.
     */
    _id?: Element;
    /**
     * The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource.
     */
    meta?: Meta;
    /**
     * A reference to a set of rules that were followed when the resource was constructed, and which must be understood when processing the content. Often, this is a reference to an implementation guide that defines the special rules along with other profiles etc.
     */
    implicitRules?: uri;
    /**
     * Contains extension information for property 'implicitRules'.
     */
    _implicitRules?: Element;
    /**
     * The base language in which the resource is written.
     */
    language?: code;
    /**
     * Contains extension information for property 'language'.
     */
    _language?: Element;
    /**
     * A human-readable narrative that contains a summary of the resource and can be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it "clinically safe" for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety.
     */
    text?: Narrative;
    /**
     * These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, and nor can they have their own independent transaction scope.
     */
    contained?: Resource[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * The business identifier that is used to reference the MessageDefinition and *is* expected to be consistent from server to server.
     */
    url?: uri;
    /**
     * Contains extension information for property 'url'.
     */
    _url?: Element;
    /**
     * A formal identifier that is used to identify this message definition when it is represented in other formats, or referenced in a specification, model, design or an instance.
     */
    identifier?: Identifier[];
    /**
     * The identifier that is used to identify this version of the message definition when it is referenced in a specification, model, design or instance. This is an arbitrary value managed by the message definition author and is not expected to be globally unique. For example, it might be a timestamp (e.g. yyyymmdd) if a managed version is not available. There is also no expectation that versions can be placed in a lexicographical sequence.
     */
    version?: string;
    /**
     * Contains extension information for property 'version'.
     */
    _version?: Element;
    /**
     * A natural language name identifying the message definition. This name should be usable as an identifier for the module by machine processing applications such as code generation.
     */
    name?: string;
    /**
     * Contains extension information for property 'name'.
     */
    _name?: Element;
    /**
     * A short, descriptive, user-friendly title for the message definition.
     */
    title?: string;
    /**
     * Contains extension information for property 'title'.
     */
    _title?: Element;
    /**
     * A MessageDefinition that is superseded by this definition.
     */
    replaces?: canonical[];
    /**
     * The status of this message definition. Enables tracking the life-cycle of the content.
     */
    status: code;
    /**
     * Contains extension information for property 'status'.
     */
    _status?: Element;
    /**
     * A Boolean value to indicate that this message definition is authored for testing purposes (or education/evaluation/marketing) and is not intended to be used for genuine usage.
     */
    experimental?: boolean;
    /**
     * Contains extension information for property 'experimental'.
     */
    _experimental?: Element;
    /**
     * The date  (and optionally time) when the message definition was published. The date must change when the business version changes and it must change if the status code changes. In addition, it should change when the substantive content of the message definition changes.
     */
    date: dateTime;
    /**
     * Contains extension information for property 'date'.
     */
    _date?: Element;
    /**
     * The name of the organization or individual that published the message definition.
     */
    publisher?: string;
    /**
     * Contains extension information for property 'publisher'.
     */
    _publisher?: Element;
    /**
     * Contact details to assist a user in finding and communicating with the publisher.
     */
    contact?: ContactDetail[];
    /**
     * A free text natural language description of the message definition from a consumer's perspective.
     */
    description?: markdown;
    /**
     * Contains extension information for property 'description'.
     */
    _description?: Element;
    /**
     * The content was developed with a focus and intent of supporting the contexts that are listed. These contexts may be general categories (gender, age, ...) or may be references to specific programs (insurance plans, studies, ...) and may be used to assist with indexing and searching for appropriate message definition instances.
     */
    useContext?: UsageContext[];
    /**
     * A legal or geographic region in which the message definition is intended to be used.
     */
    jurisdiction?: CodeableConcept[];
    /**
     * Explanation of why this message definition is needed and why it has been designed as it has.
     */
    purpose?: markdown;
    /**
     * Contains extension information for property 'purpose'.
     */
    _purpose?: Element;
    /**
     * A copyright statement relating to the message definition and/or its contents. Copyright statements are generally legal restrictions on the use and publishing of the message definition.
     */
    copyright?: markdown;
    /**
     * Contains extension information for property 'copyright'.
     */
    _copyright?: Element;
    /**
     * The MessageDefinition that is the basis for the contents of this resource.
     */
    base?: canonical;
    /**
     * Identifies a protocol or workflow that this MessageDefinition represents a step in.
     */
    parent?: canonical[];
    /**
     * Event code or link to the EventDefinition.
     */
    eventCoding: Coding;
    /**
     * Event code or link to the EventDefinition.
     */
    eventUri: uri;
    /**
     * Contains extension information for property 'eventUri'.
     */
    _eventUri?: Element;
    /**
     * The impact of the content of the message.
     */
    category?: code;
    /**
     * Contains extension information for property 'category'.
     */
    _category?: Element;
    /**
     * Identifies the resource (or resources) that are being addressed by the event.  For example, the Encounter for an admit message or two Account records for a merge.
     */
    focus?: MessageDefinitionFocus[];
    /**
     * Declare at a message definition level whether a response is required or only upon error or success, or never.
     */
    responseRequired?: code;
    /**
     * Contains extension information for property 'responseRequired'.
     */
    _responseRequired?: Element;
    /**
     * Indicates what types of messages may be sent as an application-level response to this message.
     */
    allowedResponse?: MessageDefinitionAllowedResponse[];
    /**
     * Canonical reference to a GraphDefinition. If a URL is provided, it is the canonical reference to a [GraphDefinition](graphdefinition.html) that it controls what resources are to be added to the bundle when building the document. The GraphDefinition can also specify profiles that apply to the various resources.
     */
    graph?: canonical[];
}
/**
 * Identifies the resource (or resources) that are being addressed by the event.  For example, the Encounter for an admit message or two Account records for a merge.
 */
export interface MessageDefinitionFocus {
    /**
     * Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
     */
    id?: string;
    /**
     * Contains extension information for property 'id'.
     */
    _id?: Element;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * The kind of resource that must be the focus for this message.
     */
    code: code;
    /**
     * Contains extension information for property 'code'.
     */
    _code?: Element;
    /**
     * A profile that reflects constraints for the focal resource (and potentially for related resources).
     */
    profile?: canonical;
    /**
     * Identifies the minimum number of resources of this type that must be pointed to by a message in order for it to be valid against this MessageDefinition.
     */
    min: unsignedInt;
    /**
     * Contains extension information for property 'min'.
     */
    _min?: Element;
    /**
     * Identifies the maximum number of resources of this type that must be pointed to by a message in order for it to be valid against this MessageDefinition.
     */
    max?: string;
    /**
     * Contains extension information for property 'max'.
     */
    _max?: Element;
}
/**
 * Indicates what types of messages may be sent as an application-level response to this message.
 */
export interface MessageDefinitionAllowedResponse {
    /**
     * Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
     */
    id?: string;
    /**
     * Contains extension information for property 'id'.
     */
    _id?: Element;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * A reference to the message definition that must be adhered to by this supported response.
     */
    message: canonical;
    /**
     * Provides a description of the circumstances in which this response should be used (as opposed to one of the alternative responses).
     */
    situation?: markdown;
    /**
     * Contains extension information for property 'situation'.
     */
    _situation?: Element;
}
/**
 * The header for a message exchange that is either requesting or responding to an action.  The reference(s) that are the subject of the action as well as other information related to the action are typically transmitted in a bundle in which the MessageHeader resource instance is the first resource in the bundle.
 */
export interface MessageHeader {
    /**
     * The type of the resource.
     */
    resourceType: string;
    /**
     * The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes.
     */
    id?: id;
    /**
     * Contains extension information for property 'id'.
     */
    _id?: Element;
    /**
     * The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource.
     */
    meta?: Meta;
    /**
     * A reference to a set of rules that were followed when the resource was constructed, and which must be understood when processing the content. Often, this is a reference to an implementation guide that defines the special rules along with other profiles etc.
     */
    implicitRules?: uri;
    /**
     * Contains extension information for property 'implicitRules'.
     */
    _implicitRules?: Element;
    /**
     * The base language in which the resource is written.
     */
    language?: code;
    /**
     * Contains extension information for property 'language'.
     */
    _language?: Element;
    /**
     * A human-readable narrative that contains a summary of the resource and can be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it "clinically safe" for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety.
     */
    text?: Narrative;
    /**
     * These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, and nor can they have their own independent transaction scope.
     */
    contained?: Resource[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * Code that identifies the event this message represents and connects it with its definition. Events defined as part of the FHIR specification have the system value "http://terminology.hl7.org/CodeSystem/message-events".  Alternatively uri to the EventDefinition.
     */
    eventCoding: Coding;
    /**
     * Code that identifies the event this message represents and connects it with its definition. Events defined as part of the FHIR specification have the system value "http://terminology.hl7.org/CodeSystem/message-events".  Alternatively uri to the EventDefinition.
     */
    eventUri: uri;
    /**
     * Contains extension information for property 'eventUri'.
     */
    _eventUri?: Element;
    /**
     * The destination application which the message is intended for.
     */
    destination?: MessageHeaderDestination[];
    /**
     * Identifies the sending system to allow the use of a trust relationship.
     */
    sender?: Reference;
    /**
     * The person or device that performed the data entry leading to this message. When there is more than one candidate, pick the most proximal to the message. Can provide other enterers in extensions.
     */
    enterer?: Reference;
    /**
     * The logical author of the message - the person or device that decided the described event should happen. When there is more than one candidate, pick the most proximal to the MessageHeader. Can provide other authors in extensions.
     */
    author?: Reference;
    /**
     * The source application from which this message originated.
     */
    source: MessageHeaderSource;
    /**
     * The person or organization that accepts overall responsibility for the contents of the message. The implication is that the message event happened under the policies of the responsible party.
     */
    responsible?: Reference;
    /**
     * Coded indication of the cause for the event - indicates  a reason for the occurrence of the event that is a focus of this message.
     */
    reason?: CodeableConcept;
    /**
     * Information about the message that this message is a response to.  Only present if this message is a response.
     */
    response?: MessageHeaderResponse;
    /**
     * The actual data of the message - a reference to the root/focus class of the event.
     */
    focus?: Reference[];
    /**
     * Permanent link to the MessageDefinition for this message.
     */
    definition?: canonical;
}
/**
 * The destination application which the message is intended for.
 */
export interface MessageHeaderDestination {
    /**
     * Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
     */
    id?: string;
    /**
     * Contains extension information for property 'id'.
     */
    _id?: Element;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * Human-readable name for the target system.
     */
    name?: string;
    /**
     * Contains extension information for property 'name'.
     */
    _name?: Element;
    /**
     * Identifies the target end system in situations where the initial message transmission is to an intermediary system.
     */
    target?: Reference;
    /**
     * Indicates where the message should be routed to.
     */
    endpoint: url;
    /**
     * Allows data conveyed by a message to be addressed to a particular person or department when routing to a specific application isn't sufficient.
     */
    receiver?: Reference;
}
/**
 * The source application from which this message originated.
 */
export interface MessageHeaderSource {
    /**
     * Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
     */
    id?: string;
    /**
     * Contains extension information for property 'id'.
     */
    _id?: Element;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * Human-readable name for the source system.
     */
    name?: string;
    /**
     * Contains extension information for property 'name'.
     */
    _name?: Element;
    /**
     * May include configuration or other information useful in debugging.
     */
    software?: string;
    /**
     * Contains extension information for property 'software'.
     */
    _software?: Element;
    /**
     * Can convey versions of multiple systems in situations where a message passes through multiple hands.
     */
    version?: string;
    /**
     * Contains extension information for property 'version'.
     */
    _version?: Element;
    /**
     * An e-mail, phone, website or other contact point to use to resolve issues with message communications.
     */
    contact?: ContactPoint;
    /**
     * Identifies the routing target to send acknowledgements to.
     */
    endpoint: url;
}
/**
 * Information about the message that this message is a response to.  Only present if this message is a response.
 */
export interface MessageHeaderResponse {
    /**
     * Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
     */
    id?: string;
    /**
     * Contains extension information for property 'id'.
     */
    _id?: Element;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * The MessageHeader.id of the message to which this message is a response.
     */
    identifier: id;
    /**
     * Contains extension information for property 'identifier'.
     */
    _identifier?: Element;
    /**
     * Code that identifies the type of response to the message - whether it was successful or not, and whether it should be resent or not.
     */
    code: code;
    /**
     * Contains extension information for property 'code'.
     */
    _code?: Element;
    /**
     * Full details of any issues found in the message.
     */
    details?: Reference;
}
/**
 * The metadata about a resource. This is content in the resource that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource.
 */
export interface Meta {
    /**
     * Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
     */
    id?: string;
    /**
     * Contains extension information for property 'id'.
     */
    _id?: Element;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * The version specific identifier, as it appears in the version portion of the URL. This value changes when the resource is created, updated, or deleted.
     */
    versionId?: id;
    /**
     * Contains extension information for property 'versionId'.
     */
    _versionId?: Element;
    /**
     * When the resource last changed - e.g. when the version changed.
     */
    lastUpdated?: instant;
    /**
     * Contains extension information for property 'lastUpdated'.
     */
    _lastUpdated?: Element;
    /**
     * A uri that identifies the source system of the resource. This provides a minimal amount of [Provenance](provenance.html#) information that can be used to track or differentiate the source of information in the resource. The source may identify another FHIR server, document, message, database, etc.
     */
    source?: uri;
    /**
     * Contains extension information for property 'source'.
     */
    _source?: Element;
    /**
     * A list of profiles (references to [StructureDefinition](structuredefinition.html#) resources) that this resource claims to conform to. The URL is a reference to [StructureDefinition.url](structuredefinition-definitions.html#StructureDefinition.url).
     */
    profile?: canonical[];
    /**
     * Security labels applied to this resource. These tags connect specific resources to the overall security policy and infrastructure.
     */
    security?: Coding[];
    /**
     * Tags applied to this resource. Tags are intended to be used to identify and relate resources to process and workflow, and applications are not required to consider the tags when interpreting the meaning of a resource.
     */
    tag?: Coding[];
}
/**
 * Raw data describing a biological sequence.
 */
export interface MolecularSequence {
    /**
     * The type of the resource.
     */
    resourceType: string;
    /**
     * The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes.
     */
    id?: id;
    /**
     * Contains extension information for property 'id'.
     */
    _id?: Element;
    /**
     * The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource.
     */
    meta?: Meta;
    /**
     * A reference to a set of rules that were followed when the resource was constructed, and which must be understood when processing the content. Often, this is a reference to an implementation guide that defines the special rules along with other profiles etc.
     */
    implicitRules?: uri;
    /**
     * Contains extension information for property 'implicitRules'.
     */
    _implicitRules?: Element;
    /**
     * The base language in which the resource is written.
     */
    language?: code;
    /**
     * Contains extension information for property 'language'.
     */
    _language?: Element;
    /**
     * A human-readable narrative that contains a summary of the resource and can be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it "clinically safe" for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety.
     */
    text?: Narrative;
    /**
     * These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, and nor can they have their own independent transaction scope.
     */
    contained?: Resource[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * A unique identifier for this particular sequence instance. This is a FHIR-defined id.
     */
    identifier?: Identifier[];
    /**
     * Amino Acid Sequence/ DNA Sequence / RNA Sequence.
     */
    type?: code;
    /**
     * Contains extension information for property 'type'.
     */
    _type?: Element;
    /**
     * Whether the sequence is numbered starting at 0 (0-based numbering or coordinates, inclusive start, exclusive end) or starting at 1 (1-based numbering, inclusive start and inclusive end).
     */
    coordinateSystem: integer;
    /**
     * Contains extension information for property 'coordinateSystem'.
     */
    _coordinateSystem?: Element;
    /**
     * The patient whose sequencing results are described by this resource.
     */
    patient?: Reference;
    /**
     * Specimen used for sequencing.
     */
    specimen?: Reference;
    /**
     * The method for sequencing, for example, chip information.
     */
    device?: Reference;
    /**
     * The organization or lab that should be responsible for this result.
     */
    performer?: Reference;
    /**
     * The number of copies of the sequence of interest. (RNASeq).
     */
    quantity?: Quantity;
    /**
     * A sequence that is used as a reference to describe variants that are present in a sequence analyzed.
     */
    referenceSeq?: MolecularSequenceReferenceSeq;
    /**
     * The definition of variant here originates from Sequence ontology ([variant_of](http://www.sequenceontology.org/browser/current_svn/term/variant_of)). This element can represent amino acid or nucleic sequence change(including insertion,deletion,SNP,etc.)  It can represent some complex mutation or segment variation with the assist of CIGAR string.
     */
    variant?: MolecularSequenceVariant[];
    /**
     * Sequence that was observed. It is the result marked by referenceSeq along with variant records on referenceSeq. This shall start from referenceSeq.windowStart and end by referenceSeq.windowEnd.
     */
    observedSeq?: string;
    /**
     * Contains extension information for property 'observedSeq'.
     */
    _observedSeq?: Element;
    /**
     * An experimental feature attribute that defines the quality of the feature in a quantitative way, such as a phred quality score ([SO:0001686](http://www.sequenceontology.org/browser/current_svn/term/SO:0001686)).
     */
    quality?: MolecularSequenceQuality[];
    /**
     * Coverage (read depth or depth) is the average number of reads representing a given nucleotide in the reconstructed sequence.
     */
    readCoverage?: integer;
    /**
     * Contains extension information for property 'readCoverage'.
     */
    _readCoverage?: Element;
    /**
     * Configurations of the external repository. The repository shall store target's observedSeq or records related with target's observedSeq.
     */
    repository?: MolecularSequenceRepository[];
    /**
     * Pointer to next atomic sequence which at most contains one variant.
     */
    pointer?: Reference[];
    /**
     * Information about chromosome structure variation.
     */
    structureVariant?: MolecularSequenceStructureVariant[];
}
/**
 * A sequence that is used as a reference to describe variants that are present in a sequence analyzed.
 */
export interface MolecularSequenceReferenceSeq {
    /**
     * Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
     */
    id?: string;
    /**
     * Contains extension information for property 'id'.
     */
    _id?: Element;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * Structural unit composed of a nucleic acid molecule which controls its own replication through the interaction of specific proteins at one or more origins of replication ([SO:0000340](http://www.sequenceontology.org/browser/current_svn/term/SO:0000340)).
     */
    chromosome?: CodeableConcept;
    /**
     * The Genome Build used for reference, following GRCh build versions e.g. 'GRCh 37'.  Version number must be included if a versioned release of a primary build was used.
     */
    genomeBuild?: string;
    /**
     * Contains extension information for property 'genomeBuild'.
     */
    _genomeBuild?: Element;
    /**
     * A relative reference to a DNA strand based on gene orientation. The strand that contains the open reading frame of the gene is the "sense" strand, and the opposite complementary strand is the "antisense" strand.
     */
    orientation?: code;
    /**
     * Contains extension information for property 'orientation'.
     */
    _orientation?: Element;
    /**
     * Reference identifier of reference sequence submitted to NCBI. It must match the type in the MolecularSequence.type field. For example, the prefix, “NG_” identifies reference sequence for genes, “NM_” for messenger RNA transcripts, and “NP_” for amino acid sequences.
     */
    referenceSeqId?: CodeableConcept;
    /**
     * A pointer to another MolecularSequence entity as reference sequence.
     */
    referenceSeqPointer?: Reference;
    /**
     * A string like "ACGT".
     */
    referenceSeqString?: string;
    /**
     * Contains extension information for property 'referenceSeqString'.
     */
    _referenceSeqString?: Element;
    /**
     * An absolute reference to a strand. The Watson strand is the strand whose 5'-end is on the short arm of the chromosome, and the Crick strand as the one whose 5'-end is on the long arm.
     */
    strand?: code;
    /**
     * Contains extension information for property 'strand'.
     */
    _strand?: Element;
    /**
     * Start position of the window on the reference sequence. If the coordinate system is either 0-based or 1-based, then start position is inclusive.
     */
    windowStart?: integer;
    /**
     * Contains extension information for property 'windowStart'.
     */
    _windowStart?: Element;
    /**
     * End position of the window on the reference sequence. If the coordinate system is 0-based then end is exclusive and does not include the last position. If the coordinate system is 1-base, then end is inclusive and includes the last position.
     */
    windowEnd?: integer;
    /**
     * Contains extension information for property 'windowEnd'.
     */
    _windowEnd?: Element;
}
/**
 * The definition of variant here originates from Sequence ontology ([variant_of](http://www.sequenceontology.org/browser/current_svn/term/variant_of)). This element can represent amino acid or nucleic sequence change(including insertion,deletion,SNP,etc.)  It can represent some complex mutation or segment variation with the assist of CIGAR string.
 */
export interface MolecularSequenceVariant {
    /**
     * Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
     */
    id?: string;
    /**
     * Contains extension information for property 'id'.
     */
    _id?: Element;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * Start position of the variant on the  reference sequence. If the coordinate system is either 0-based or 1-based, then start position is inclusive.
     */
    start?: integer;
    /**
     * Contains extension information for property 'start'.
     */
    _start?: Element;
    /**
     * End position of the variant on the reference sequence. If the coordinate system is 0-based then end is exclusive and does not include the last position. If the coordinate system is 1-base, then end is inclusive and includes the last position.
     */
    end?: integer;
    /**
     * Contains extension information for property 'end'.
     */
    _end?: Element;
    /**
     * An allele is one of a set of coexisting sequence variants of a gene ([SO:0001023](http://www.sequenceontology.org/browser/current_svn/term/SO:0001023)).  Nucleotide(s)/amino acids from start position of sequence to stop position of sequence on the positive (+) strand of the observed  sequence. When the sequence  type is DNA, it should be the sequence on the positive (+) strand. This will lay in the range between variant.start and variant.end.
     */
    observedAllele?: string;
    /**
     * Contains extension information for property 'observedAllele'.
     */
    _observedAllele?: Element;
    /**
     * An allele is one of a set of coexisting sequence variants of a gene ([SO:0001023](http://www.sequenceontology.org/browser/current_svn/term/SO:0001023)). Nucleotide(s)/amino acids from start position of sequence to stop position of sequence on the positive (+) strand of the reference sequence. When the sequence  type is DNA, it should be the sequence on the positive (+) strand. This will lay in the range between variant.start and variant.end.
     */
    referenceAllele?: string;
    /**
     * Contains extension information for property 'referenceAllele'.
     */
    _referenceAllele?: Element;
    /**
     * Extended CIGAR string for aligning the sequence with reference bases. See detailed documentation [here](http://support.illumina.com/help/SequencingAnalysisWorkflow/Content/Vault/Informatics/Sequencing_Analysis/CASAVA/swSEQ_mCA_ExtendedCIGARFormat.htm).
     */
    cigar?: string;
    /**
     * Contains extension information for property 'cigar'.
     */
    _cigar?: Element;
    /**
     * A pointer to an Observation containing variant information.
     */
    variantPointer?: Reference;
}
/**
 * An experimental feature attribute that defines the quality of the feature in a quantitative way, such as a phred quality score ([SO:0001686](http://www.sequenceontology.org/browser/current_svn/term/SO:0001686)).
 */
export interface MolecularSequenceQuality {
    /**
     * Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
     */
    id?: string;
    /**
     * Contains extension information for property 'id'.
     */
    _id?: Element;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * INDEL / SNP / Undefined variant.
     */
    type: code;
    /**
     * Contains extension information for property 'type'.
     */
    _type?: Element;
    /**
     * Gold standard sequence used for comparing against.
     */
    standardSequence?: CodeableConcept;
    /**
     * Start position of the sequence. If the coordinate system is either 0-based or 1-based, then start position is inclusive.
     */
    start?: integer;
    /**
     * Contains extension information for property 'start'.
     */
    _start?: Element;
    /**
     * End position of the sequence. If the coordinate system is 0-based then end is exclusive and does not include the last position. If the coordinate system is 1-base, then end is inclusive and includes the last position.
     */
    end?: integer;
    /**
     * Contains extension information for property 'end'.
     */
    _end?: Element;
    /**
     * The score of an experimentally derived feature such as a p-value ([SO:0001685](http://www.sequenceontology.org/browser/current_svn/term/SO:0001685)).
     */
    score?: Quantity;
    /**
     * Which method is used to get sequence quality.
     */
    method?: CodeableConcept;
    /**
     * True positives, from the perspective of the truth data, i.e. the number of sites in the Truth Call Set for which there are paths through the Query Call Set that are consistent with all of the alleles at this site, and for which there is an accurate genotype call for the event.
     */
    truthTP?: decimal;
    /**
     * Contains extension information for property 'truthTP'.
     */
    _truthTP?: Element;
    /**
     * True positives, from the perspective of the query data, i.e. the number of sites in the Query Call Set for which there are paths through the Truth Call Set that are consistent with all of the alleles at this site, and for which there is an accurate genotype call for the event.
     */
    queryTP?: decimal;
    /**
     * Contains extension information for property 'queryTP'.
     */
    _queryTP?: Element;
    /**
     * False negatives, i.e. the number of sites in the Truth Call Set for which there is no path through the Query Call Set that is consistent with all of the alleles at this site, or sites for which there is an inaccurate genotype call for the event. Sites with correct variant but incorrect genotype are counted here.
     */
    truthFN?: decimal;
    /**
     * Contains extension information for property 'truthFN'.
     */
    _truthFN?: Element;
    /**
     * False positives, i.e. the number of sites in the Query Call Set for which there is no path through the Truth Call Set that is consistent with this site. Sites with correct variant but incorrect genotype are counted here.
     */
    queryFP?: decimal;
    /**
     * Contains extension information for property 'queryFP'.
     */
    _queryFP?: Element;
    /**
     * The number of false positives where the non-REF alleles in the Truth and Query Call Sets match (i.e. cases where the truth is 1/1 and the query is 0/1 or similar).
     */
    gtFP?: decimal;
    /**
     * Contains extension information for property 'gtFP'.
     */
    _gtFP?: Element;
    /**
     * QUERY.TP / (QUERY.TP + QUERY.FP).
     */
    precision?: decimal;
    /**
     * Contains extension information for property 'precision'.
     */
    _precision?: Element;
    /**
     * TRUTH.TP / (TRUTH.TP + TRUTH.FN).
     */
    recall?: decimal;
    /**
     * Contains extension information for property 'recall'.
     */
    _recall?: Element;
    /**
     * Harmonic mean of Recall and Precision, computed as: 2 * precision * recall / (precision + recall).
     */
    fScore?: decimal;
    /**
     * Contains extension information for property 'fScore'.
     */
    _fScore?: Element;
    /**
     * Receiver Operator Characteristic (ROC) Curve  to give sensitivity/specificity tradeoff.
     */
    roc?: MolecularSequenceQualityRoc;
}
/**
 * Receiver Operator Characteristic (ROC) Curve  to give sensitivity/specificity tradeoff.
 */
export interface MolecularSequenceQualityRoc {
    /**
     * Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
     */
    id?: string;
    /**
     * Contains extension information for property 'id'.
     */
    _id?: Element;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * Invidual data point representing the GQ (genotype quality) score threshold.
     */
    score?: integer[];
    /**
     * Contains extension information for property 'score'.
     */
    _score?: Element[];
    /**
     * The number of true positives if the GQ score threshold was set to "score" field value.
     */
    numTP?: integer[];
    /**
     * Contains extension information for property 'numTP'.
     */
    _numTP?: Element[];
    /**
     * The number of false positives if the GQ score threshold was set to "score" field value.
     */
    numFP?: integer[];
    /**
     * Contains extension information for property 'numFP'.
     */
    _numFP?: Element[];
    /**
     * The number of false negatives if the GQ score threshold was set to "score" field value.
     */
    numFN?: integer[];
    /**
     * Contains extension information for property 'numFN'.
     */
    _numFN?: Element[];
    /**
     * Calculated precision if the GQ score threshold was set to "score" field value.
     */
    precision?: decimal[];
    /**
     * Contains extension information for property 'precision'.
     */
    _precision?: Element[];
    /**
     * Calculated sensitivity if the GQ score threshold was set to "score" field value.
     */
    sensitivity?: decimal[];
    /**
     * Contains extension information for property 'sensitivity'.
     */
    _sensitivity?: Element[];
    /**
     * Calculated fScore if the GQ score threshold was set to "score" field value.
     */
    fMeasure?: decimal[];
    /**
     * Contains extension information for property 'fMeasure'.
     */
    _fMeasure?: Element[];
}
/**
 * Configurations of the external repository. The repository shall store target's observedSeq or records related with target's observedSeq.
 */
export interface MolecularSequenceRepository {
    /**
     * Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
     */
    id?: string;
    /**
     * Contains extension information for property 'id'.
     */
    _id?: Element;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * Click and see / RESTful API / Need login to see / RESTful API with authentication / Other ways to see resource.
     */
    type: code;
    /**
     * Contains extension information for property 'type'.
     */
    _type?: Element;
    /**
     * URI of an external repository which contains further details about the genetics data.
     */
    url?: uri;
    /**
     * Contains extension information for property 'url'.
     */
    _url?: Element;
    /**
     * URI of an external repository which contains further details about the genetics data.
     */
    name?: string;
    /**
     * Contains extension information for property 'name'.
     */
    _name?: Element;
    /**
     * Id of the variant in this external repository. The server will understand how to use this id to call for more info about datasets in external repository.
     */
    datasetId?: string;
    /**
     * Contains extension information for property 'datasetId'.
     */
    _datasetId?: Element;
    /**
     * Id of the variantset in this external repository. The server will understand how to use this id to call for more info about variantsets in external repository.
     */
    variantsetId?: string;
    /**
     * Contains extension information for property 'variantsetId'.
     */
    _variantsetId?: Element;
    /**
     * Id of the read in this external repository.
     */
    readsetId?: string;
    /**
     * Contains extension information for property 'readsetId'.
     */
    _readsetId?: Element;
}
/**
 * Information about chromosome structure variation.
 */
export interface MolecularSequenceStructureVariant {
    /**
     * Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
     */
    id?: string;
    /**
     * Contains extension information for property 'id'.
     */
    _id?: Element;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * Information about chromosome structure variation DNA change type.
     */
    variantType?: CodeableConcept;
    /**
     * Used to indicate if the outer and inner start-end values have the same meaning.
     */
    exact?: boolean;
    /**
     * Contains extension information for property 'exact'.
     */
    _exact?: Element;
    /**
     * Length of the variant chromosome.
     */
    length?: integer;
    /**
     * Contains extension information for property 'length'.
     */
    _length?: Element;
    /**
     * Structural variant outer.
     */
    outer?: MolecularSequenceStructureVariantOuter;
    /**
     * Structural variant inner.
     */
    inner?: MolecularSequenceStructureVariantInner;
}
/**
 * Structural variant outer.
 */
export interface MolecularSequenceStructureVariantOuter {
    /**
     * Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
     */
    id?: string;
    /**
     * Contains extension information for property 'id'.
     */
    _id?: Element;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * Structural variant outer start. If the coordinate system is either 0-based or 1-based, then start position is inclusive.
     */
    start?: integer;
    /**
     * Contains extension information for property 'start'.
     */
    _start?: Element;
    /**
     * Structural variant outer end. If the coordinate system is 0-based then end is exclusive and does not include the last position. If the coordinate system is 1-base, then end is inclusive and includes the last position.
     */
    end?: integer;
    /**
     * Contains extension information for property 'end'.
     */
    _end?: Element;
}
/**
 * Structural variant inner.
 */
export interface MolecularSequenceStructureVariantInner {
    /**
     * Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
     */
    id?: string;
    /**
     * Contains extension information for property 'id'.
     */
    _id?: Element;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * Structural variant inner start. If the coordinate system is either 0-based or 1-based, then start position is inclusive.
     */
    start?: integer;
    /**
     * Contains extension information for property 'start'.
     */
    _start?: Element;
    /**
     * Structural variant inner end. If the coordinate system is 0-based then end is exclusive and does not include the last position. If the coordinate system is 1-base, then end is inclusive and includes the last position.
     */
    end?: integer;
    /**
     * Contains extension information for property 'end'.
     */
    _end?: Element;
}
/**
 * An amount of economic utility in some recognized currency.
 */
export interface Money {
    /**
     * Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
     */
    id?: string;
    /**
     * Contains extension information for property 'id'.
     */
    _id?: Element;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * Numerical value (with implicit precision).
     */
    value?: decimal;
    /**
     * Contains extension information for property 'value'.
     */
    _value?: Element;
    /**
     * ISO 4217 Currency Code.
     */
    currency?: code;
    /**
     * Contains extension information for property 'currency'.
     */
    _currency?: Element;
}
/**
 * There SHALL be a code if there is a value and it SHALL be an expression of currency.  If system is present, it SHALL be ISO 4217 (system = "urn:iso:std:iso:4217" - currency).
 */
export interface Quantity {
    /**
     * Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
     */
    id?: string;
    /**
     * Contains extension information for property 'id'.
     */
    _id?: Element;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * The value of the measured amount. The value includes an implicit precision in the presentation of the value.
     */
    value?: decimal;
    /**
     * Contains extension information for property 'value'.
     */
    _value?: Element;
    /**
     * How the value should be understood and represented - whether the actual value is greater or less than the stated value due to measurement issues; e.g. if the comparator is "<" , then the real value is < stated value.
     */
    comparator?: code;
    /**
     * Contains extension information for property 'comparator'.
     */
    _comparator?: Element;
    /**
     * A human-readable form of the unit.
     */
    unit?: string;
    /**
     * Contains extension information for property 'unit'.
     */
    _unit?: Element;
    /**
     * The identification of the system that provides the coded form of the unit.
     */
    system?: uri;
    /**
     * Contains extension information for property 'system'.
     */
    _system?: Element;
    /**
     * A computer processable form of the unit in some unit representation system.
     */
    code?: code;
    /**
     * Contains extension information for property 'code'.
     */
    _code?: Element;
}
/**
 * A curated namespace that issues unique symbols within that namespace for the identification of concepts, people, devices, etc.  Represents a "System" used within the Identifier and Coding data types.
 */
export interface NamingSystem {
    /**
     * The type of the resource.
     */
    resourceType: string;
    /**
     * The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes.
     */
    id?: id;
    /**
     * Contains extension information for property 'id'.
     */
    _id?: Element;
    /**
     * The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource.
     */
    meta?: Meta;
    /**
     * A reference to a set of rules that were followed when the resource was constructed, and which must be understood when processing the content. Often, this is a reference to an implementation guide that defines the special rules along with other profiles etc.
     */
    implicitRules?: uri;
    /**
     * Contains extension information for property 'implicitRules'.
     */
    _implicitRules?: Element;
    /**
     * The base language in which the resource is written.
     */
    language?: code;
    /**
     * Contains extension information for property 'language'.
     */
    _language?: Element;
    /**
     * A human-readable narrative that contains a summary of the resource and can be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it "clinically safe" for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety.
     */
    text?: Narrative;
    /**
     * These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, and nor can they have their own independent transaction scope.
     */
    contained?: Resource[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * A natural language name identifying the naming system. This name should be usable as an identifier for the module by machine processing applications such as code generation.
     */
    name: string;
    /**
     * Contains extension information for property 'name'.
     */
    _name?: Element;
    /**
     * The status of this naming system. Enables tracking the life-cycle of the content.
     */
    status: code;
    /**
     * Contains extension information for property 'status'.
     */
    _status?: Element;
    /**
     * Indicates the purpose for the naming system - what kinds of things does it make unique?
     */
    kind: code;
    /**
     * Contains extension information for property 'kind'.
     */
    _kind?: Element;
    /**
     * The date  (and optionally time) when the naming system was published. The date must change when the business version changes and it must change if the status code changes. In addition, it should change when the substantive content of the naming system changes.
     */
    date: dateTime;
    /**
     * Contains extension information for property 'date'.
     */
    _date?: Element;
    /**
     * The name of the organization or individual that published the naming system.
     */
    publisher?: string;
    /**
     * Contains extension information for property 'publisher'.
     */
    _publisher?: Element;
    /**
     * Contact details to assist a user in finding and communicating with the publisher.
     */
    contact?: ContactDetail[];
    /**
     * The name of the organization that is responsible for issuing identifiers or codes for this namespace and ensuring their non-collision.
     */
    responsible?: string;
    /**
     * Contains extension information for property 'responsible'.
     */
    _responsible?: Element;
    /**
     * Categorizes a naming system for easier search by grouping related naming systems.
     */
    type?: CodeableConcept;
    /**
     * A free text natural language description of the naming system from a consumer's perspective. Details about what the namespace identifies including scope, granularity, version labeling, etc.
     */
    description?: markdown;
    /**
     * Contains extension information for property 'description'.
     */
    _description?: Element;
    /**
     * The content was developed with a focus and intent of supporting the contexts that are listed. These contexts may be general categories (gender, age, ...) or may be references to specific programs (insurance plans, studies, ...) and may be used to assist with indexing and searching for appropriate naming system instances.
     */
    useContext?: UsageContext[];
    /**
     * A legal or geographic region in which the naming system is intended to be used.
     */
    jurisdiction?: CodeableConcept[];
    /**
     * Provides guidance on the use of the namespace, including the handling of formatting characters, use of upper vs. lower case, etc.
     */
    usage?: string;
    /**
     * Contains extension information for property 'usage'.
     */
    _usage?: Element;
    /**
     * Indicates how the system may be identified when referenced in electronic exchange.
     */
    uniqueId: NamingSystemUniqueId[];
}
/**
 * Indicates how the system may be identified when referenced in electronic exchange.
 */
export interface NamingSystemUniqueId {
    /**
     * Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
     */
    id?: string;
    /**
     * Contains extension information for property 'id'.
     */
    _id?: Element;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * Identifies the unique identifier scheme used for this particular identifier.
     */
    type: code;
    /**
     * Contains extension information for property 'type'.
     */
    _type?: Element;
    /**
     * The string that should be sent over the wire to identify the code system or identifier system.
     */
    value: string;
    /**
     * Contains extension information for property 'value'.
     */
    _value?: Element;
    /**
     * Indicates whether this identifier is the "preferred" identifier of this type.
     */
    preferred?: boolean;
    /**
     * Contains extension information for property 'preferred'.
     */
    _preferred?: Element;
    /**
     * Notes about the past or intended usage of this identifier.
     */
    comment?: string;
    /**
     * Contains extension information for property 'comment'.
     */
    _comment?: Element;
    /**
     * Identifies the period of time over which this identifier is considered appropriate to refer to the naming system.  Outside of this window, the identifier might be non-deterministic.
     */
    period?: Period;
}
/**
 * A human-readable summary of the resource conveying the essential clinical and business information for the resource.
 */
export interface Narrative {
    /**
     * Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
     */
    id?: string;
    /**
     * Contains extension information for property 'id'.
     */
    _id?: Element;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * The status of the narrative - whether it's entirely generated (from just the defined data or the extensions too), or whether a human authored it and it may contain additional data.
     */
    status: code;
    /**
     * Contains extension information for property 'status'.
     */
    _status?: Element;
    /**
     * The actual narrative content, a stripped down version of XHTML.
     */
    div: xhtml;
    /**
     * Contains extension information for property 'div'.
     */
    _div?: Element;
}
/**
 * A request to supply a diet, formula feeding (enteral) or oral nutritional supplement to a patient/resident.
 */
export interface NutritionOrder {
    /**
     * The type of the resource.
     */
    resourceType: string;
    /**
     * The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes.
     */
    id?: id;
    /**
     * Contains extension information for property 'id'.
     */
    _id?: Element;
    /**
     * The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource.
     */
    meta?: Meta;
    /**
     * A reference to a set of rules that were followed when the resource was constructed, and which must be understood when processing the content. Often, this is a reference to an implementation guide that defines the special rules along with other profiles etc.
     */
    implicitRules?: uri;
    /**
     * Contains extension information for property 'implicitRules'.
     */
    _implicitRules?: Element;
    /**
     * The base language in which the resource is written.
     */
    language?: code;
    /**
     * Contains extension information for property 'language'.
     */
    _language?: Element;
    /**
     * A human-readable narrative that contains a summary of the resource and can be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it "clinically safe" for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety.
     */
    text?: Narrative;
    /**
     * These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, and nor can they have their own independent transaction scope.
     */
    contained?: Resource[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * Identifiers assigned to this order by the order sender or by the order receiver.
     */
    identifier?: Identifier[];
    /**
     * The URL pointing to a FHIR-defined protocol, guideline, orderset or other definition that is adhered to in whole or in part by this NutritionOrder.
     */
    instantiatesCanonical?: canonical[];
    /**
     * The URL pointing to an externally maintained protocol, guideline, orderset or other definition that is adhered to in whole or in part by this NutritionOrder.
     */
    instantiatesUri?: uri[];
    /**
     * Contains extension information for property 'instantiatesUri'.
     */
    _instantiatesUri?: Element[];
    /**
     * The URL pointing to a protocol, guideline, orderset or other definition that is adhered to in whole or in part by this NutritionOrder.
     */
    instantiates?: uri[];
    /**
     * Contains extension information for property 'instantiates'.
     */
    _instantiates?: Element[];
    /**
     * The workflow status of the nutrition order/request.
     */
    status: code;
    /**
     * Contains extension information for property 'status'.
     */
    _status?: Element;
    /**
     * Indicates the level of authority/intentionality associated with the NutrionOrder and where the request fits into the workflow chain.
     */
    intent: code;
    /**
     * Contains extension information for property 'intent'.
     */
    _intent?: Element;
    /**
     * The person (patient) who needs the nutrition order for an oral diet, nutritional supplement and/or enteral or formula feeding.
     */
    patient: Reference;
    /**
     * An encounter that provides additional information about the healthcare context in which this request is made.
     */
    encounter?: Reference;
    /**
     * The date and time that this nutrition order was requested.
     */
    dateTime: dateTime;
    /**
     * Contains extension information for property 'dateTime'.
     */
    _dateTime?: Element;
    /**
     * The practitioner that holds legal responsibility for ordering the diet, nutritional supplement, or formula feedings.
     */
    orderer?: Reference;
    /**
     * A link to a record of allergies or intolerances  which should be included in the nutrition order.
     */
    allergyIntolerance?: Reference[];
    /**
     * This modifier is used to convey order-specific modifiers about the type of food that should be given. These can be derived from patient allergies, intolerances, or preferences such as Halal, Vegan or Kosher. This modifier applies to the entire nutrition order inclusive of the oral diet, nutritional supplements and enteral formula feedings.
     */
    foodPreferenceModifier?: CodeableConcept[];
    /**
     * This modifier is used to convey Order-specific modifier about the type of oral food or oral fluids that should not be given. These can be derived from patient allergies, intolerances, or preferences such as No Red Meat, No Soy or No Wheat or  Gluten-Free.  While it should not be necessary to repeat allergy or intolerance information captured in the referenced AllergyIntolerance resource in the excludeFoodModifier, this element may be used to convey additional specificity related to foods that should be eliminated from the patient’s diet for any reason.  This modifier applies to the entire nutrition order inclusive of the oral diet, nutritional supplements and enteral formula feedings.
     */
    excludeFoodModifier?: CodeableConcept[];
    /**
     * Diet given orally in contrast to enteral (tube) feeding.
     */
    oralDiet?: NutritionOrderOralDiet;
    /**
     * Oral nutritional products given in order to add further nutritional value to the patient's diet.
     */
    supplement?: NutritionOrderSupplement[];
    /**
     * Feeding provided through the gastrointestinal tract via a tube, catheter, or stoma that delivers nutrition distal to the oral cavity.
     */
    enteralFormula?: NutritionOrderEnteralFormula;
    /**
     * Comments made about the {{title}} by the requester, performer, subject or other participants.
     */
    note?: Annotation[];
}
/**
 * Diet given orally in contrast to enteral (tube) feeding.
 */
export interface NutritionOrderOralDiet {
    /**
     * Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
     */
    id?: string;
    /**
     * Contains extension information for property 'id'.
     */
    _id?: Element;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * The kind of diet or dietary restriction such as fiber restricted diet or diabetic diet.
     */
    type?: CodeableConcept[];
    /**
     * The time period and frequency at which the diet should be given.  The diet should be given for the combination of all schedules if more than one schedule is present.
     */
    schedule?: Timing[];
    /**
     * Class that defines the quantity and type of nutrient modifications (for example carbohydrate, fiber or sodium) required for the oral diet.
     */
    nutrient?: NutritionOrderOralDietNutrient[];
    /**
     * Class that describes any texture modifications required for the patient to safely consume various types of solid foods.
     */
    texture?: NutritionOrderOralDietTexture[];
    /**
     * The required consistency (e.g. honey-thick, nectar-thick, thin, thickened.) of liquids or fluids served to the patient.
     */
    fluidConsistencyType?: CodeableConcept[];
    /**
     * Free text or additional instructions or information pertaining to the oral diet.
     */
    instruction?: string;
    /**
     * Contains extension information for property 'instruction'.
     */
    _instruction?: Element;
}
/**
 * Class that defines the quantity and type of nutrient modifications (for example carbohydrate, fiber or sodium) required for the oral diet.
 */
export interface NutritionOrderOralDietNutrient {
    /**
     * Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
     */
    id?: string;
    /**
     * Contains extension information for property 'id'.
     */
    _id?: Element;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * The nutrient that is being modified such as carbohydrate or sodium.
     */
    modifier?: CodeableConcept;
    /**
     * The quantity of the specified nutrient to include in diet.
     */
    amount?: Quantity;
}
/**
 * Class that describes any texture modifications required for the patient to safely consume various types of solid foods.
 */
export interface NutritionOrderOralDietTexture {
    /**
     * Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
     */
    id?: string;
    /**
     * Contains extension information for property 'id'.
     */
    _id?: Element;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * Any texture modifications (for solid foods) that should be made, e.g. easy to chew, chopped, ground, and pureed.
     */
    modifier?: CodeableConcept;
    /**
     * The food type(s) (e.g. meats, all foods)  that the texture modification applies to.  This could be all foods types.
     */
    foodType?: CodeableConcept;
}
/**
 * Oral nutritional products given in order to add further nutritional value to the patient's diet.
 */
export interface NutritionOrderSupplement {
    /**
     * Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
     */
    id?: string;
    /**
     * Contains extension information for property 'id'.
     */
    _id?: Element;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * The kind of nutritional supplement product required such as a high protein or pediatric clear liquid supplement.
     */
    type?: CodeableConcept;
    /**
     * The product or brand name of the nutritional supplement such as "Acme Protein Shake".
     */
    productName?: string;
    /**
     * Contains extension information for property 'productName'.
     */
    _productName?: Element;
    /**
     * The time period and frequency at which the supplement(s) should be given.  The supplement should be given for the combination of all schedules if more than one schedule is present.
     */
    schedule?: Timing[];
    /**
     * The amount of the nutritional supplement to be given.
     */
    quantity?: Quantity;
    /**
     * Free text or additional instructions or information pertaining to the oral supplement.
     */
    instruction?: string;
    /**
     * Contains extension information for property 'instruction'.
     */
    _instruction?: Element;
}
/**
 * Feeding provided through the gastrointestinal tract via a tube, catheter, or stoma that delivers nutrition distal to the oral cavity.
 */
export interface NutritionOrderEnteralFormula {
    /**
     * Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
     */
    id?: string;
    /**
     * Contains extension information for property 'id'.
     */
    _id?: Element;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * The type of enteral or infant formula such as an adult standard formula with fiber or a soy-based infant formula.
     */
    baseFormulaType?: CodeableConcept;
    /**
     * The product or brand name of the enteral or infant formula product such as "ACME Adult Standard Formula".
     */
    baseFormulaProductName?: string;
    /**
     * Contains extension information for property 'baseFormulaProductName'.
     */
    _baseFormulaProductName?: Element;
    /**
     * Indicates the type of modular component such as protein, carbohydrate, fat or fiber to be provided in addition to or mixed with the base formula.
     */
    additiveType?: CodeableConcept;
    /**
     * The product or brand name of the type of modular component to be added to the formula.
     */
    additiveProductName?: string;
    /**
     * Contains extension information for property 'additiveProductName'.
     */
    _additiveProductName?: Element;
    /**
     * The amount of energy (calories) that the formula should provide per specified volume, typically per mL or fluid oz.  For example, an infant may require a formula that provides 24 calories per fluid ounce or an adult may require an enteral formula that provides 1.5 calorie/mL.
     */
    caloricDensity?: Quantity;
    /**
     * The route or physiological path of administration into the patient's gastrointestinal  tract for purposes of providing the formula feeding, e.g. nasogastric tube.
     */
    routeofAdministration?: CodeableConcept;
    /**
     * Formula administration instructions as structured data.  This repeating structure allows for changing the administration rate or volume over time for both bolus and continuous feeding.  An example of this would be an instruction to increase the rate of continuous feeding every 2 hours.
     */
    administration?: NutritionOrderEnteralFormulaAdministration[];
    /**
     * The maximum total quantity of formula that may be administered to a subject over the period of time, e.g. 1440 mL over 24 hours.
     */
    maxVolumeToDeliver?: Quantity;
    /**
     * Free text formula administration, feeding instructions or additional instructions or information.
     */
    administrationInstruction?: string;
    /**
     * Contains extension information for property 'administrationInstruction'.
     */
    _administrationInstruction?: Element;
}
/**
 * Formula administration instructions as structured data.  This repeating structure allows for changing the administration rate or volume over time for both bolus and continuous feeding.  An example of this would be an instruction to increase the rate of continuous feeding every 2 hours.
 */
export interface NutritionOrderEnteralFormulaAdministration {
    /**
     * Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
     */
    id?: string;
    /**
     * Contains extension information for property 'id'.
     */
    _id?: Element;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * The time period and frequency at which the enteral formula should be delivered to the patient.
     */
    schedule?: Timing;
    /**
     * The volume of formula to provide to the patient per the specified administration schedule.
     */
    quantity?: Quantity;
    /**
     * The rate of administration of formula via a feeding pump, e.g. 60 mL per hour, according to the specified schedule.
     */
    rateQuantity?: Quantity;
    /**
     * The rate of administration of formula via a feeding pump, e.g. 60 mL per hour, according to the specified schedule.
     */
    rateRatio?: Ratio;
}
/**
 * Measurements and simple assertions made about a patient, device or other subject.
 */
export interface Observation {
    /**
     * The type of the resource.
     */
    resourceType: string;
    /**
     * The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes.
     */
    id?: id;
    /**
     * Contains extension information for property 'id'.
     */
    _id?: Element;
    /**
     * The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource.
     */
    meta?: Meta;
    /**
     * A reference to a set of rules that were followed when the resource was constructed, and which must be understood when processing the content. Often, this is a reference to an implementation guide that defines the special rules along with other profiles etc.
     */
    implicitRules?: uri;
    /**
     * Contains extension information for property 'implicitRules'.
     */
    _implicitRules?: Element;
    /**
     * The base language in which the resource is written.
     */
    language?: code;
    /**
     * Contains extension information for property 'language'.
     */
    _language?: Element;
    /**
     * A human-readable narrative that contains a summary of the resource and can be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it "clinically safe" for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety.
     */
    text?: Narrative;
    /**
     * These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, and nor can they have their own independent transaction scope.
     */
    contained?: Resource[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * A unique identifier assigned to this observation.
     */
    identifier?: Identifier[];
    /**
     * A plan, proposal or order that is fulfilled in whole or in part by this event.  For example, a MedicationRequest may require a patient to have laboratory test performed before  it is dispensed.
     */
    basedOn?: Reference[];
    /**
     * A larger event of which this particular Observation is a component or step.  For example,  an observation as part of a procedure.
     */
    partOf?: Reference[];
    /**
     * The status of the result value.
     */
    status: code;
    /**
     * Contains extension information for property 'status'.
     */
    _status?: Element;
    /**
     * A code that classifies the general type of observation being made.
     */
    category?: CodeableConcept[];
    /**
     * Describes what was observed. Sometimes this is called the observation "name".
     */
    code: CodeableConcept;
    /**
     * The patient, or group of patients, location, or device this observation is about and into whose record the observation is placed. If the actual focus of the observation is different from the subject (or a sample of, part, or region of the subject), the `focus` element or the `code` itself specifies the actual focus of the observation.
     */
    subject?: Reference;
    /**
     * The actual focus of an observation when it is not the patient of record representing something or someone associated with the patient such as a spouse, parent, fetus, or donor. For example, fetus observations in a mother's record.  The focus of an observation could also be an existing condition,  an intervention, the subject's diet,  another observation of the subject,  or a body structure such as tumor or implanted device.   An example use case would be using the Observation resource to capture whether the mother is trained to change her child's tracheostomy tube. In this example, the child is the patient of record and the mother is the focus.
     */
    focus?: Reference[];
    /**
     * The healthcare event  (e.g. a patient and healthcare provider interaction) during which this observation is made.
     */
    encounter?: Reference;
    /**
     * The time or time-period the observed value is asserted as being true. For biological subjects - e.g. human patients - this is usually called the "physiologically relevant time". This is usually either the time of the procedure or of specimen collection, but very often the source of the date/time is not known, only the date/time itself.
     */
    effectiveDateTime?: dateTime;
    /**
     * Contains extension information for property 'effectiveDateTime'.
     */
    _effectiveDateTime?: Element;
    /**
     * The time or time-period the observed value is asserted as being true. For biological subjects - e.g. human patients - this is usually called the "physiologically relevant time". This is usually either the time of the procedure or of specimen collection, but very often the source of the date/time is not known, only the date/time itself.
     */
    effectivePeriod?: Period;
    /**
     * The time or time-period the observed value is asserted as being true. For biological subjects - e.g. human patients - this is usually called the "physiologically relevant time". This is usually either the time of the procedure or of specimen collection, but very often the source of the date/time is not known, only the date/time itself.
     */
    effectiveTiming?: Timing;
    /**
     * The time or time-period the observed value is asserted as being true. For biological subjects - e.g. human patients - this is usually called the "physiologically relevant time". This is usually either the time of the procedure or of specimen collection, but very often the source of the date/time is not known, only the date/time itself.
     */
    effectiveInstant?: instant;
    /**
     * Contains extension information for property 'effectiveInstant'.
     */
    _effectiveInstant?: Element;
    /**
     * The date and time this version of the observation was made available to providers, typically after the results have been reviewed and verified.
     */
    issued?: instant;
    /**
     * Contains extension information for property 'issued'.
     */
    _issued?: Element;
    /**
     * Who was responsible for asserting the observed value as "true".
     */
    performer?: Reference[];
    /**
     * The information determined as a result of making the observation, if the information has a simple value.
     */
    valueQuantity?: Quantity;
    /**
     * The information determined as a result of making the observation, if the information has a simple value.
     */
    valueCodeableConcept?: CodeableConcept;
    /**
     * The information determined as a result of making the observation, if the information has a simple value.
     */
    valueString?: string;
    /**
     * Contains extension information for property 'valueString'.
     */
    _valueString?: Element;
    /**
     * The information determined as a result of making the observation, if the information has a simple value.
     */
    valueBoolean?: boolean;
    /**
     * Contains extension information for property 'valueBoolean'.
     */
    _valueBoolean?: Element;
    /**
     * The information determined as a result of making the observation, if the information has a simple value.
     */
    valueInteger?: integer;
    /**
     * Contains extension information for property 'valueInteger'.
     */
    _valueInteger?: Element;
    /**
     * The information determined as a result of making the observation, if the information has a simple value.
     */
    valueRange?: Range;
    /**
     * The information determined as a result of making the observation, if the information has a simple value.
     */
    valueRatio?: Ratio;
    /**
     * The information determined as a result of making the observation, if the information has a simple value.
     */
    valueSampledData?: SampledData;
    /**
     * The information determined as a result of making the observation, if the information has a simple value.
     */
    valueTime?: time;
    /**
     * Contains extension information for property 'valueTime'.
     */
    _valueTime?: Element;
    /**
     * The information determined as a result of making the observation, if the information has a simple value.
     */
    valueDateTime?: dateTime;
    /**
     * Contains extension information for property 'valueDateTime'.
     */
    _valueDateTime?: Element;
    /**
     * The information determined as a result of making the observation, if the information has a simple value.
     */
    valuePeriod?: Period;
    /**
     * Provides a reason why the expected value in the element Observation.value[x] is missing.
     */
    dataAbsentReason?: CodeableConcept;
    /**
     * A categorical assessment of an observation value.  For example, high, low, normal.
     */
    interpretation?: CodeableConcept[];
    /**
     * Comments about the observation or the results.
     */
    note?: Annotation[];
    /**
     * Indicates the site on the subject's body where the observation was made (i.e. the target site).
     */
    bodySite?: CodeableConcept;
    /**
     * Indicates the mechanism used to perform the observation.
     */
    method?: CodeableConcept;
    /**
     * The specimen that was used when this observation was made.
     */
    specimen?: Reference;
    /**
     * The device used to generate the observation data.
     */
    device?: Reference;
    /**
     * Guidance on how to interpret the value by comparison to a normal or recommended range.  Multiple reference ranges are interpreted as an "OR".   In other words, to represent two distinct target populations, two `referenceRange` elements would be used.
     */
    referenceRange?: ObservationReferenceRange[];
    /**
     * This observation is a group observation (e.g. a battery, a panel of tests, a set of vital sign measurements) that includes the target as a member of the group.
     */
    hasMember?: Reference[];
    /**
     * The target resource that represents a measurement from which this observation value is derived. For example, a calculated anion gap or a fetal measurement based on an ultrasound image.
     */
    derivedFrom?: Reference[];
    /**
     * Some observations have multiple component observations.  These component observations are expressed as separate code value pairs that share the same attributes.  Examples include systolic and diastolic component observations for blood pressure measurement and multiple component observations for genetics observations.
     */
    component?: ObservationComponent[];
}
/**
 * Guidance on how to interpret the value by comparison to a normal or recommended range.  Multiple reference ranges are interpreted as an "OR".   In other words, to represent two distinct target populations, two `referenceRange` elements would be used.
 */
export interface ObservationReferenceRange {
    /**
     * Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
     */
    id?: string;
    /**
     * Contains extension information for property 'id'.
     */
    _id?: Element;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * The value of the low bound of the reference range.  The low bound of the reference range endpoint is inclusive of the value (e.g.  reference range is >=5 - <=9). If the low bound is omitted,  it is assumed to be meaningless (e.g. reference range is <=2.3).
     */
    low?: Quantity;
    /**
     * The value of the high bound of the reference range.  The high bound of the reference range endpoint is inclusive of the value (e.g.  reference range is >=5 - <=9). If the high bound is omitted,  it is assumed to be meaningless (e.g. reference range is >= 2.3).
     */
    high?: Quantity;
    /**
     * Codes to indicate the what part of the targeted reference population it applies to. For example, the normal or therapeutic range.
     */
    type?: CodeableConcept;
    /**
     * Codes to indicate the target population this reference range applies to.  For example, a reference range may be based on the normal population or a particular sex or race.  Multiple `appliesTo`  are interpreted as an "AND" of the target populations.  For example, to represent a target population of African American females, both a code of female and a code for African American would be used.
     */
    appliesTo?: CodeableConcept[];
    /**
     * The age at which this reference range is applicable. This is a neonatal age (e.g. number of weeks at term) if the meaning says so.
     */
    age?: Range;
    /**
     * Text based reference range in an observation which may be used when a quantitative range is not appropriate for an observation.  An example would be a reference value of "Negative" or a list or table of "normals".
     */
    text?: string;
    /**
     * Contains extension information for property 'text'.
     */
    _text?: Element;
}
/**
 * Some observations have multiple component observations.  These component observations are expressed as separate code value pairs that share the same attributes.  Examples include systolic and diastolic component observations for blood pressure measurement and multiple component observations for genetics observations.
 */
export interface ObservationComponent {
    /**
     * Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
     */
    id?: string;
    /**
     * Contains extension information for property 'id'.
     */
    _id?: Element;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * Describes what was observed. Sometimes this is called the observation "code".
     */
    code: CodeableConcept;
    /**
     * The information determined as a result of making the observation, if the information has a simple value.
     */
    valueQuantity?: Quantity;
    /**
     * The information determined as a result of making the observation, if the information has a simple value.
     */
    valueCodeableConcept?: CodeableConcept;
    /**
     * The information determined as a result of making the observation, if the information has a simple value.
     */
    valueString?: string;
    /**
     * Contains extension information for property 'valueString'.
     */
    _valueString?: Element;
    /**
     * The information determined as a result of making the observation, if the information has a simple value.
     */
    valueBoolean?: boolean;
    /**
     * Contains extension information for property 'valueBoolean'.
     */
    _valueBoolean?: Element;
    /**
     * The information determined as a result of making the observation, if the information has a simple value.
     */
    valueInteger?: integer;
    /**
     * Contains extension information for property 'valueInteger'.
     */
    _valueInteger?: Element;
    /**
     * The information determined as a result of making the observation, if the information has a simple value.
     */
    valueRange?: Range;
    /**
     * The information determined as a result of making the observation, if the information has a simple value.
     */
    valueRatio?: Ratio;
    /**
     * The information determined as a result of making the observation, if the information has a simple value.
     */
    valueSampledData?: SampledData;
    /**
     * The information determined as a result of making the observation, if the information has a simple value.
     */
    valueTime?: time;
    /**
     * Contains extension information for property 'valueTime'.
     */
    _valueTime?: Element;
    /**
     * The information determined as a result of making the observation, if the information has a simple value.
     */
    valueDateTime?: dateTime;
    /**
     * Contains extension information for property 'valueDateTime'.
     */
    _valueDateTime?: Element;
    /**
     * The information determined as a result of making the observation, if the information has a simple value.
     */
    valuePeriod?: Period;
    /**
     * Provides a reason why the expected value in the element Observation.component.value[x] is missing.
     */
    dataAbsentReason?: CodeableConcept;
    /**
     * A categorical assessment of an observation value.  For example, high, low, normal.
     */
    interpretation?: CodeableConcept[];
    /**
     * Guidance on how to interpret the value by comparison to a normal or recommended range.
     */
    referenceRange?: ObservationReferenceRange[];
}
/**
 * Set of definitional characteristics for a kind of observation or measurement produced or consumed by an orderable health care service.
 */
export interface ObservationDefinition {
    /**
     * The type of the resource.
     */
    resourceType: string;
    /**
     * The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes.
     */
    id?: id;
    /**
     * Contains extension information for property 'id'.
     */
    _id?: Element;
    /**
     * The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource.
     */
    meta?: Meta;
    /**
     * A reference to a set of rules that were followed when the resource was constructed, and which must be understood when processing the content. Often, this is a reference to an implementation guide that defines the special rules along with other profiles etc.
     */
    implicitRules?: uri;
    /**
     * Contains extension information for property 'implicitRules'.
     */
    _implicitRules?: Element;
    /**
     * The base language in which the resource is written.
     */
    language?: code;
    /**
     * Contains extension information for property 'language'.
     */
    _language?: Element;
    /**
     * A human-readable narrative that contains a summary of the resource and can be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it "clinically safe" for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety.
     */
    text?: Narrative;
    /**
     * These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, and nor can they have their own independent transaction scope.
     */
    contained?: Resource[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * A code that classifies the general type of observation.
     */
    category?: CodeableConcept[];
    /**
     * Describes what will be observed. Sometimes this is called the observation "name".
     */
    code: CodeableConcept;
    /**
     * A unique identifier assigned to this ObservationDefinition artifact.
     */
    identifier?: Identifier[];
    /**
     * The data types allowed for the value element of the instance observations conforming to this ObservationDefinition.
     */
    permittedDataType?: code[];
    /**
     * Contains extension information for property 'permittedDataType'.
     */
    _permittedDataType?: Element[];
    /**
     * Multiple results allowed for observations conforming to this ObservationDefinition.
     */
    multipleResultsAllowed?: boolean;
    /**
     * Contains extension information for property 'multipleResultsAllowed'.
     */
    _multipleResultsAllowed?: Element;
    /**
     * The method or technique used to perform the observation.
     */
    method?: CodeableConcept;
    /**
     * The preferred name to be used when reporting the results of observations conforming to this ObservationDefinition.
     */
    preferredReportName?: string;
    /**
     * Contains extension information for property 'preferredReportName'.
     */
    _preferredReportName?: Element;
    /**
     * Characteristics for quantitative results of this observation.
     */
    quantitativeDetails?: ObservationDefinitionQuantitativeDetails;
    /**
     * Multiple  ranges of results qualified by different contexts for ordinal or continuous observations conforming to this ObservationDefinition.
     */
    qualifiedInterval?: ObservationDefinitionQualifiedInterval[];
    /**
     * The set of valid coded results for the observations  conforming to this ObservationDefinition.
     */
    validCodedValueSet?: Reference;
    /**
     * The set of normal coded results for the observations conforming to this ObservationDefinition.
     */
    normalCodedValueSet?: Reference;
    /**
     * The set of abnormal coded results for the observation conforming to this ObservationDefinition.
     */
    abnormalCodedValueSet?: Reference;
    /**
     * The set of critical coded results for the observation conforming to this ObservationDefinition.
     */
    criticalCodedValueSet?: Reference;
}
/**
 * Characteristics for quantitative results of this observation.
 */
export interface ObservationDefinitionQuantitativeDetails {
    /**
     * Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
     */
    id?: string;
    /**
     * Contains extension information for property 'id'.
     */
    _id?: Element;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * Customary unit used to report quantitative results of observations conforming to this ObservationDefinition.
     */
    customaryUnit?: CodeableConcept;
    /**
     * SI unit used to report quantitative results of observations conforming to this ObservationDefinition.
     */
    unit?: CodeableConcept;
    /**
     * Factor for converting value expressed with SI unit to value expressed with customary unit.
     */
    conversionFactor?: decimal;
    /**
     * Contains extension information for property 'conversionFactor'.
     */
    _conversionFactor?: Element;
    /**
     * Number of digits after decimal separator when the results of such observations are of type Quantity.
     */
    decimalPrecision?: integer;
    /**
     * Contains extension information for property 'decimalPrecision'.
     */
    _decimalPrecision?: Element;
}
/**
 * Multiple  ranges of results qualified by different contexts for ordinal or continuous observations conforming to this ObservationDefinition.
 */
export interface ObservationDefinitionQualifiedInterval {
    /**
     * Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
     */
    id?: string;
    /**
     * Contains extension information for property 'id'.
     */
    _id?: Element;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * The category of interval of values for continuous or ordinal observations conforming to this ObservationDefinition.
     */
    category?: code;
    /**
     * Contains extension information for property 'category'.
     */
    _category?: Element;
    /**
     * The low and high values determining the interval. There may be only one of the two.
     */
    range?: Range;
    /**
     * Codes to indicate the health context the range applies to. For example, the normal or therapeutic range.
     */
    context?: CodeableConcept;
    /**
     * Codes to indicate the target population this reference range applies to.
     */
    appliesTo?: CodeableConcept[];
    /**
     * Sex of the population the range applies to.
     */
    gender?: code;
    /**
     * Contains extension information for property 'gender'.
     */
    _gender?: Element;
    /**
     * The age at which this reference range is applicable. This is a neonatal age (e.g. number of weeks at term) if the meaning says so.
     */
    age?: Range;
    /**
     * The gestational age to which this reference range is applicable, in the context of pregnancy.
     */
    gestationalAge?: Range;
    /**
     * Text based condition for which the reference range is valid.
     */
    condition?: string;
    /**
     * Contains extension information for property 'condition'.
     */
    _condition?: Element;
}
/**
 * A formal computable definition of an operation (on the RESTful interface) or a named query (using the search interaction).
 */
export interface OperationDefinition {
    /**
     * The type of the resource.
     */
    resourceType: string;
    /**
     * The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes.
     */
    id?: id;
    /**
     * Contains extension information for property 'id'.
     */
    _id?: Element;
    /**
     * The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource.
     */
    meta?: Meta;
    /**
     * A reference to a set of rules that were followed when the resource was constructed, and which must be understood when processing the content. Often, this is a reference to an implementation guide that defines the special rules along with other profiles etc.
     */
    implicitRules?: uri;
    /**
     * Contains extension information for property 'implicitRules'.
     */
    _implicitRules?: Element;
    /**
     * The base language in which the resource is written.
     */
    language?: code;
    /**
     * Contains extension information for property 'language'.
     */
    _language?: Element;
    /**
     * A human-readable narrative that contains a summary of the resource and can be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it "clinically safe" for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety.
     */
    text?: Narrative;
    /**
     * These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, and nor can they have their own independent transaction scope.
     */
    contained?: Resource[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * An absolute URI that is used to identify this operation definition when it is referenced in a specification, model, design or an instance; also called its canonical identifier. This SHOULD be globally unique and SHOULD be a literal address at which at which an authoritative instance of this operation definition is (or will be) published. This URL can be the target of a canonical reference. It SHALL remain the same when the operation definition is stored on different servers.
     */
    url?: uri;
    /**
     * Contains extension information for property 'url'.
     */
    _url?: Element;
    /**
     * The identifier that is used to identify this version of the operation definition when it is referenced in a specification, model, design or instance. This is an arbitrary value managed by the operation definition author and is not expected to be globally unique. For example, it might be a timestamp (e.g. yyyymmdd) if a managed version is not available. There is also no expectation that versions can be placed in a lexicographical sequence.
     */
    version?: string;
    /**
     * Contains extension information for property 'version'.
     */
    _version?: Element;
    /**
     * A natural language name identifying the operation definition. This name should be usable as an identifier for the module by machine processing applications such as code generation.
     */
    name: string;
    /**
     * Contains extension information for property 'name'.
     */
    _name?: Element;
    /**
     * A short, descriptive, user-friendly title for the operation definition.
     */
    title?: string;
    /**
     * Contains extension information for property 'title'.
     */
    _title?: Element;
    /**
     * The status of this operation definition. Enables tracking the life-cycle of the content.
     */
    status: code;
    /**
     * Contains extension information for property 'status'.
     */
    _status?: Element;
    /**
     * Whether this is an operation or a named query.
     */
    kind: code;
    /**
     * Contains extension information for property 'kind'.
     */
    _kind?: Element;
    /**
     * A Boolean value to indicate that this operation definition is authored for testing purposes (or education/evaluation/marketing) and is not intended to be used for genuine usage.
     */
    experimental?: boolean;
    /**
     * Contains extension information for property 'experimental'.
     */
    _experimental?: Element;
    /**
     * The date  (and optionally time) when the operation definition was published. The date must change when the business version changes and it must change if the status code changes. In addition, it should change when the substantive content of the operation definition changes.
     */
    date?: dateTime;
    /**
     * Contains extension information for property 'date'.
     */
    _date?: Element;
    /**
     * The name of the organization or individual that published the operation definition.
     */
    publisher?: string;
    /**
     * Contains extension information for property 'publisher'.
     */
    _publisher?: Element;
    /**
     * Contact details to assist a user in finding and communicating with the publisher.
     */
    contact?: ContactDetail[];
    /**
     * A free text natural language description of the operation definition from a consumer's perspective.
     */
    description?: markdown;
    /**
     * Contains extension information for property 'description'.
     */
    _description?: Element;
    /**
     * The content was developed with a focus and intent of supporting the contexts that are listed. These contexts may be general categories (gender, age, ...) or may be references to specific programs (insurance plans, studies, ...) and may be used to assist with indexing and searching for appropriate operation definition instances.
     */
    useContext?: UsageContext[];
    /**
     * A legal or geographic region in which the operation definition is intended to be used.
     */
    jurisdiction?: CodeableConcept[];
    /**
     * Explanation of why this operation definition is needed and why it has been designed as it has.
     */
    purpose?: markdown;
    /**
     * Contains extension information for property 'purpose'.
     */
    _purpose?: Element;
    /**
     * Whether the operation affects state. Side effects such as producing audit trail entries do not count as 'affecting  state'.
     */
    affectsState?: boolean;
    /**
     * Contains extension information for property 'affectsState'.
     */
    _affectsState?: Element;
    /**
     * The name used to invoke the operation.
     */
    code: code;
    /**
     * Contains extension information for property 'code'.
     */
    _code?: Element;
    /**
     * Additional information about how to use this operation or named query.
     */
    comment?: markdown;
    /**
     * Contains extension information for property 'comment'.
     */
    _comment?: Element;
    /**
     * Indicates that this operation definition is a constraining profile on the base.
     */
    base?: canonical;
    /**
     * The types on which this operation can be executed.
     */
    resource?: code[];
    /**
     * Contains extension information for property 'resource'.
     */
    _resource?: Element[];
    /**
     * Indicates whether this operation or named query can be invoked at the system level (e.g. without needing to choose a resource type for the context).
     */
    system: boolean;
    /**
     * Contains extension information for property 'system'.
     */
    _system?: Element;
    /**
     * Indicates whether this operation or named query can be invoked at the resource type level for any given resource type level (e.g. without needing to choose a specific resource id for the context).
     */
    type: boolean;
    /**
     * Contains extension information for property 'type'.
     */
    _type?: Element;
    /**
     * Indicates whether this operation can be invoked on a particular instance of one of the given types.
     */
    instance: boolean;
    /**
     * Contains extension information for property 'instance'.
     */
    _instance?: Element;
    /**
     * Additional validation information for the in parameters - a single profile that covers all the parameters. The profile is a constraint on the parameters resource as a whole.
     */
    inputProfile?: canonical;
    /**
     * Additional validation information for the out parameters - a single profile that covers all the parameters. The profile is a constraint on the parameters resource.
     */
    outputProfile?: canonical;
    /**
     * The parameters for the operation/query.
     */
    parameter?: OperationDefinitionParameter[];
    /**
     * Defines an appropriate combination of parameters to use when invoking this operation, to help code generators when generating overloaded parameter sets for this operation.
     */
    overload?: OperationDefinitionOverload[];
}
/**
 * The parameters for the operation/query.
 */
export interface OperationDefinitionParameter {
    /**
     * Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
     */
    id?: string;
    /**
     * Contains extension information for property 'id'.
     */
    _id?: Element;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * The name of used to identify the parameter.
     */
    name: code;
    /**
     * Contains extension information for property 'name'.
     */
    _name?: Element;
    /**
     * Whether this is an input or an output parameter.
     */
    use: code;
    /**
     * Contains extension information for property 'use'.
     */
    _use?: Element;
    /**
     * The minimum number of times this parameter SHALL appear in the request or response.
     */
    min: integer;
    /**
     * Contains extension information for property 'min'.
     */
    _min?: Element;
    /**
     * The maximum number of times this element is permitted to appear in the request or response.
     */
    max: string;
    /**
     * Contains extension information for property 'max'.
     */
    _max?: Element;
    /**
     * Describes the meaning or use of this parameter.
     */
    documentation?: string;
    /**
     * Contains extension information for property 'documentation'.
     */
    _documentation?: Element;
    /**
     * The type for this parameter.
     */
    type?: code;
    /**
     * Contains extension information for property 'type'.
     */
    _type?: Element;
    /**
     * Used when the type is "Reference" or "canonical", and identifies a profile structure or implementation Guide that applies to the target of the reference this parameter refers to. If any profiles are specified, then the content must conform to at least one of them. The URL can be a local reference - to a contained StructureDefinition, or a reference to another StructureDefinition or Implementation Guide by a canonical URL. When an implementation guide is specified, the target resource SHALL conform to at least one profile defined in the implementation guide.
     */
    targetProfile?: canonical[];
    /**
     * How the parameter is understood as a search parameter. This is only used if the parameter type is 'string'.
     */
    searchType?: code;
    /**
     * Contains extension information for property 'searchType'.
     */
    _searchType?: Element;
    /**
     * Binds to a value set if this parameter is coded (code, Coding, CodeableConcept).
     */
    binding?: OperationDefinitionParameterBinding;
    /**
     * Identifies other resource parameters within the operation invocation that are expected to resolve to this resource.
     */
    referencedFrom?: OperationDefinitionParameterReferencedFrom[];
    /**
     * The parts of a nested Parameter.
     */
    part?: OperationDefinitionParameter[];
}
/**
 * Binds to a value set if this parameter is coded (code, Coding, CodeableConcept).
 */
export interface OperationDefinitionParameterBinding {
    /**
     * Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
     */
    id?: string;
    /**
     * Contains extension information for property 'id'.
     */
    _id?: Element;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * Indicates the degree of conformance expectations associated with this binding - that is, the degree to which the provided value set must be adhered to in the instances.
     */
    strength: code;
    /**
     * Contains extension information for property 'strength'.
     */
    _strength?: Element;
    /**
     * Points to the value set or external definition (e.g. implicit value set) that identifies the set of codes to be used.
     */
    valueSet: canonical;
}
/**
 * Identifies other resource parameters within the operation invocation that are expected to resolve to this resource.
 */
export interface OperationDefinitionParameterReferencedFrom {
    /**
     * Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
     */
    id?: string;
    /**
     * Contains extension information for property 'id'.
     */
    _id?: Element;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * The name of the parameter or dot-separated path of parameter names pointing to the resource parameter that is expected to contain a reference to this resource.
     */
    source: string;
    /**
     * Contains extension information for property 'source'.
     */
    _source?: Element;
    /**
     * The id of the element in the referencing resource that is expected to resolve to this resource.
     */
    sourceId?: string;
    /**
     * Contains extension information for property 'sourceId'.
     */
    _sourceId?: Element;
}
/**
 * Defines an appropriate combination of parameters to use when invoking this operation, to help code generators when generating overloaded parameter sets for this operation.
 */
export interface OperationDefinitionOverload {
    /**
     * Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
     */
    id?: string;
    /**
     * Contains extension information for property 'id'.
     */
    _id?: Element;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * Name of parameter to include in overload.
     */
    parameterName?: string[];
    /**
     * Contains extension information for property 'parameterName'.
     */
    _parameterName?: Element[];
    /**
     * Comments to go on overload.
     */
    comment?: string;
    /**
     * Contains extension information for property 'comment'.
     */
    _comment?: Element;
}
/**
 * A collection of error, warning, or information messages that result from a system action.
 */
export interface OperationOutcome {
    /**
     * The type of the resource.
     */
    resourceType: string;
    /**
     * The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes.
     */
    id?: id;
    /**
     * Contains extension information for property 'id'.
     */
    _id?: Element;
    /**
     * The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource.
     */
    meta?: Meta;
    /**
     * A reference to a set of rules that were followed when the resource was constructed, and which must be understood when processing the content. Often, this is a reference to an implementation guide that defines the special rules along with other profiles etc.
     */
    implicitRules?: uri;
    /**
     * Contains extension information for property 'implicitRules'.
     */
    _implicitRules?: Element;
    /**
     * The base language in which the resource is written.
     */
    language?: code;
    /**
     * Contains extension information for property 'language'.
     */
    _language?: Element;
    /**
     * A human-readable narrative that contains a summary of the resource and can be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it "clinically safe" for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety.
     */
    text?: Narrative;
    /**
     * These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, and nor can they have their own independent transaction scope.
     */
    contained?: Resource[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * An error, warning, or information message that results from a system action.
     */
    issue: OperationOutcomeIssue[];
}
/**
 * An error, warning, or information message that results from a system action.
 */
export interface OperationOutcomeIssue {
    /**
     * Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
     */
    id?: string;
    /**
     * Contains extension information for property 'id'.
     */
    _id?: Element;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * Indicates whether the issue indicates a variation from successful processing.
     */
    severity: code;
    /**
     * Contains extension information for property 'severity'.
     */
    _severity?: Element;
    /**
     * Describes the type of the issue. The system that creates an OperationOutcome SHALL choose the most applicable code from the IssueType value set, and may additional provide its own code for the error in the details element.
     */
    code: code;
    /**
     * Contains extension information for property 'code'.
     */
    _code?: Element;
    /**
     * Additional details about the error. This may be a text description of the error or a system code that identifies the error.
     */
    details?: CodeableConcept;
    /**
     * Additional diagnostic information about the issue.
     */
    diagnostics?: string;
    /**
     * Contains extension information for property 'diagnostics'.
     */
    _diagnostics?: Element;
    /**
     * This element is deprecated because it is XML specific. It is replaced by issue.expression, which is format independent, and simpler to parse. For resource issues, this will be a simple XPath limited to element names, repetition indicators and the default child accessor that identifies one of the elements in the resource that caused this issue to be raised.  For HTTP errors, will be "http." + the parameter name.
     */
    location?: string[];
    /**
     * Contains extension information for property 'location'.
     */
    _location?: Element[];
    /**
     * A [simple subset of FHIRPath](fhirpath.html#simple) limited to element names, repetition indicators and the default child accessor that identifies one of the elements in the resource that caused this issue to be raised.
     */
    expression?: string[];
    /**
     * Contains extension information for property 'expression'.
     */
    _expression?: Element[];
}
/**
 * A formally or informally recognized grouping of people or organizations formed for the purpose of achieving some form of collective action.  Includes companies, institutions, corporations, departments, community groups, healthcare practice groups, payer/insurer, etc.
 */
export interface Organization {
    /**
     * The type of the resource.
     */
    resourceType: string;
    /**
     * The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes.
     */
    id?: id;
    /**
     * Contains extension information for property 'id'.
     */
    _id?: Element;
    /**
     * The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource.
     */
    meta?: Meta;
    /**
     * A reference to a set of rules that were followed when the resource was constructed, and which must be understood when processing the content. Often, this is a reference to an implementation guide that defines the special rules along with other profiles etc.
     */
    implicitRules?: uri;
    /**
     * Contains extension information for property 'implicitRules'.
     */
    _implicitRules?: Element;
    /**
     * The base language in which the resource is written.
     */
    language?: code;
    /**
     * Contains extension information for property 'language'.
     */
    _language?: Element;
    /**
     * A human-readable narrative that contains a summary of the resource and can be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it "clinically safe" for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety.
     */
    text?: Narrative;
    /**
     * These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, and nor can they have their own independent transaction scope.
     */
    contained?: Resource[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * Identifier for the organization that is used to identify the organization across multiple disparate systems.
     */
    identifier?: Identifier[];
    /**
     * Whether the organization's record is still in active use.
     */
    active?: boolean;
    /**
     * Contains extension information for property 'active'.
     */
    _active?: Element;
    /**
     * The kind(s) of organization that this is.
     */
    type?: CodeableConcept[];
    /**
     * A name associated with the organization.
     */
    name?: string;
    /**
     * Contains extension information for property 'name'.
     */
    _name?: Element;
    /**
     * A list of alternate names that the organization is known as, or was known as in the past.
     */
    alias?: string[];
    /**
     * Contains extension information for property 'alias'.
     */
    _alias?: Element[];
    /**
     * A contact detail for the organization.
     */
    telecom?: ContactPoint[];
    /**
     * An address for the organization.
     */
    address?: Address[];
    /**
     * The organization of which this organization forms a part.
     */
    partOf?: Reference;
    /**
     * Contact for the organization for a certain purpose.
     */
    contact?: OrganizationContact[];
    /**
     * Technical endpoints providing access to services operated for the organization.
     */
    endpoint?: Reference[];
}
/**
 * Contact for the organization for a certain purpose.
 */
export interface OrganizationContact {
    /**
     * Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
     */
    id?: string;
    /**
     * Contains extension information for property 'id'.
     */
    _id?: Element;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * Indicates a purpose for which the contact can be reached.
     */
    purpose?: CodeableConcept;
    /**
     * A name associated with the contact.
     */
    name?: HumanName;
    /**
     * A contact detail (e.g. a telephone number or an email address) by which the party may be contacted.
     */
    telecom?: ContactPoint[];
    /**
     * Visiting or postal addresses for the contact.
     */
    address?: Address;
}
/**
 * Defines an affiliation/assotiation/relationship between 2 distinct oganizations, that is not a part-of relationship/sub-division relationship.
 */
export interface OrganizationAffiliation {
    /**
     * The type of the resource.
     */
    resourceType: string;
    /**
     * The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes.
     */
    id?: id;
    /**
     * Contains extension information for property 'id'.
     */
    _id?: Element;
    /**
     * The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource.
     */
    meta?: Meta;
    /**
     * A reference to a set of rules that were followed when the resource was constructed, and which must be understood when processing the content. Often, this is a reference to an implementation guide that defines the special rules along with other profiles etc.
     */
    implicitRules?: uri;
    /**
     * Contains extension information for property 'implicitRules'.
     */
    _implicitRules?: Element;
    /**
     * The base language in which the resource is written.
     */
    language?: code;
    /**
     * Contains extension information for property 'language'.
     */
    _language?: Element;
    /**
     * A human-readable narrative that contains a summary of the resource and can be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it "clinically safe" for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety.
     */
    text?: Narrative;
    /**
     * These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, and nor can they have their own independent transaction scope.
     */
    contained?: Resource[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * Business identifiers that are specific to this role.
     */
    identifier?: Identifier[];
    /**
     * Whether this organization affiliation record is in active use.
     */
    active?: boolean;
    /**
     * Contains extension information for property 'active'.
     */
    _active?: Element;
    /**
     * The period during which the participatingOrganization is affiliated with the primary organization.
     */
    period?: Period;
    /**
     * Organization where the role is available (primary organization/has members).
     */
    organization?: Reference;
    /**
     * The Participating Organization provides/performs the role(s) defined by the code to the Primary Organization (e.g. providing services or is a member of).
     */
    participatingOrganization?: Reference;
    /**
     * Health insurance provider network in which the participatingOrganization provides the role's services (if defined) at the indicated locations (if defined).
     */
    network?: Reference[];
    /**
     * Definition of the role the participatingOrganization plays in the association.
     */
    code?: CodeableConcept[];
    /**
     * Specific specialty of the participatingOrganization in the context of the role.
     */
    specialty?: CodeableConcept[];
    /**
     * The location(s) at which the role occurs.
     */
    location?: Reference[];
    /**
     * Healthcare services provided through the role.
     */
    healthcareService?: Reference[];
    /**
     * Contact details at the participatingOrganization relevant to this Affiliation.
     */
    telecom?: ContactPoint[];
    /**
     * Technical endpoints providing access to services operated for this role.
     */
    endpoint?: Reference[];
}
/**
 * The parameters to the module. This collection specifies both the input and output parameters. Input parameters are provided by the caller as part of the $evaluate operation. Output parameters are included in the GuidanceResponse.
 */
export interface ParameterDefinition {
    /**
     * Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
     */
    id?: string;
    /**
     * Contains extension information for property 'id'.
     */
    _id?: Element;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * The name of the parameter used to allow access to the value of the parameter in evaluation contexts.
     */
    name?: code;
    /**
     * Contains extension information for property 'name'.
     */
    _name?: Element;
    /**
     * Whether the parameter is input or output for the module.
     */
    use: code;
    /**
     * Contains extension information for property 'use'.
     */
    _use?: Element;
    /**
     * The minimum number of times this parameter SHALL appear in the request or response.
     */
    min?: integer;
    /**
     * Contains extension information for property 'min'.
     */
    _min?: Element;
    /**
     * The maximum number of times this element is permitted to appear in the request or response.
     */
    max?: string;
    /**
     * Contains extension information for property 'max'.
     */
    _max?: Element;
    /**
     * A brief discussion of what the parameter is for and how it is used by the module.
     */
    documentation?: string;
    /**
     * Contains extension information for property 'documentation'.
     */
    _documentation?: Element;
    /**
     * The type of the parameter.
     */
    type: code;
    /**
     * Contains extension information for property 'type'.
     */
    _type?: Element;
    /**
     * If specified, this indicates a profile that the input data must conform to, or that the output data will conform to.
     */
    profile?: canonical;
}
/**
 * Demographics and other administrative information about an individual or animal receiving care or other health-related services.
 */
export interface Patient {
    /**
     * The type of the resource.
     */
    resourceType: string;
    /**
     * The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes.
     */
    id?: id;
    /**
     * Contains extension information for property 'id'.
     */
    _id?: Element;
    /**
     * The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource.
     */
    meta?: Meta;
    /**
     * A reference to a set of rules that were followed when the resource was constructed, and which must be understood when processing the content. Often, this is a reference to an implementation guide that defines the special rules along with other profiles etc.
     */
    implicitRules?: uri;
    /**
     * Contains extension information for property 'implicitRules'.
     */
    _implicitRules?: Element;
    /**
     * The base language in which the resource is written.
     */
    language?: code;
    /**
     * Contains extension information for property 'language'.
     */
    _language?: Element;
    /**
     * A human-readable narrative that contains a summary of the resource and can be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it "clinically safe" for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety.
     */
    text?: Narrative;
    /**
     * These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, and nor can they have their own independent transaction scope.
     */
    contained?: Resource[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * An identifier for this patient.
     */
    identifier?: Identifier[];
    /**
     * Whether this patient record is in active use. Many systems use this property to mark as non-current patients, such as those that have not been seen for a period of time based on an organization's business rules.It is often used to filter patient lists to exclude inactive patientsDeceased patients may also be marked as inactive for the same reasons, but may be active for some time after death.
     */
    active?: boolean;
    /**
     * Contains extension information for property 'active'.
     */
    _active?: Element;
    /**
     * A name associated with the individual.
     */
    name?: HumanName[];
    /**
     * A contact detail (e.g. a telephone number or an email address) by which the individual may be contacted.
     */
    telecom?: ContactPoint[];
    /**
     * Administrative Gender - the gender that the patient is considered to have for administration and record keeping purposes.
     */
    gender?: code;
    /**
     * Contains extension information for property 'gender'.
     */
    _gender?: Element;
    /**
     * The date of birth for the individual.
     */
    birthDate?: date;
    /**
     * Contains extension information for property 'birthDate'.
     */
    _birthDate?: Element;
    /**
     * Indicates if the individual is deceased or not.
     */
    deceasedBoolean?: boolean;
    /**
     * Contains extension information for property 'deceasedBoolean'.
     */
    _deceasedBoolean?: Element;
    /**
     * Indicates if the individual is deceased or not.
     */
    deceasedDateTime?: dateTime;
    /**
     * Contains extension information for property 'deceasedDateTime'.
     */
    _deceasedDateTime?: Element;
    /**
     * An address for the individual.
     */
    address?: Address[];
    /**
     * This field contains a patient's most recent marital (civil) status.
     */
    maritalStatus?: CodeableConcept;
    /**
     * Indicates whether the patient is part of a multiple (boolean) or indicates the actual birth order (integer).
     */
    multiplebirthBoolean?: boolean;
    /**
     * Contains extension information for property 'multiplebirthBoolean'.
     */
    _multiplebirthBoolean?: Element;
    /**
     * Indicates whether the patient is part of a multiple (boolean) or indicates the actual birth order (integer).
     */
    multiplebirthInteger?: integer;
    /**
     * Contains extension information for property 'multiplebirthInteger'.
     */
    _multiplebirthInteger?: Element;
    /**
     * Image of the patient.
     */
    photo?: Attachment[];
    /**
     * A contact party (e.g. guardian, partner, friend) for the patient.
     */
    contact?: PatientContact[];
    /**
     * A language which may be used to communicate with the patient about his or her health.
     */
    communication?: PatientCommunication[];
    /**
     * Patient's nominated care provider.
     */
    generalPractitioner?: Reference[];
    /**
     * Organization that is the custodian of the patient record.
     */
    managingOrganization?: Reference;
    /**
     * Link to another patient resource that concerns the same actual patient.
     */
    link?: PatientLink[];
}
/**
 * A contact party (e.g. guardian, partner, friend) for the patient.
 */
export interface PatientContact {
    /**
     * Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
     */
    id?: string;
    /**
     * Contains extension information for property 'id'.
     */
    _id?: Element;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * The nature of the relationship between the patient and the contact person.
     */
    relationship?: CodeableConcept[];
    /**
     * A name associated with the contact person.
     */
    name?: HumanName;
    /**
     * A contact detail for the person, e.g. a telephone number or an email address.
     */
    telecom?: ContactPoint[];
    /**
     * Address for the contact person.
     */
    address?: Address;
    /**
     * Administrative Gender - the gender that the contact person is considered to have for administration and record keeping purposes.
     */
    gender?: code;
    /**
     * Contains extension information for property 'gender'.
     */
    _gender?: Element;
    /**
     * Organization on behalf of which the contact is acting or for which the contact is working.
     */
    organization?: Reference;
    /**
     * The period during which this contact person or organization is valid to be contacted relating to this patient.
     */
    period?: Period;
}
/**
 * A language which may be used to communicate with the patient about his or her health.
 */
export interface PatientCommunication {
    /**
     * Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
     */
    id?: string;
    /**
     * Contains extension information for property 'id'.
     */
    _id?: Element;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * The ISO-639-1 alpha 2 code in lower case for the language, optionally followed by a hyphen and the ISO-3166-1 alpha 2 code for the region in upper case; e.g. "en" for English, or "en-US" for American English versus "en-EN" for England English.
     */
    language: CodeableConcept;
    /**
     * Indicates whether or not the patient prefers this language (over other languages he masters up a certain level).
     */
    preferred?: boolean;
    /**
     * Contains extension information for property 'preferred'.
     */
    _preferred?: Element;
}
/**
 * Link to another patient resource that concerns the same actual patient.
 */
export interface PatientLink {
    /**
     * Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
     */
    id?: string;
    /**
     * Contains extension information for property 'id'.
     */
    _id?: Element;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * The other patient resource that the link refers to.
     */
    other: Reference;
    /**
     * The type of link between this patient resource and another patient resource.
     */
    type: code;
    /**
     * Contains extension information for property 'type'.
     */
    _type?: Element;
}
/**
 * This resource provides the status of the payment for goods and services rendered, and the request and response resource references.
 */
export interface PaymentNotice {
    /**
     * The type of the resource.
     */
    resourceType: string;
    /**
     * The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes.
     */
    id?: id;
    /**
     * Contains extension information for property 'id'.
     */
    _id?: Element;
    /**
     * The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource.
     */
    meta?: Meta;
    /**
     * A reference to a set of rules that were followed when the resource was constructed, and which must be understood when processing the content. Often, this is a reference to an implementation guide that defines the special rules along with other profiles etc.
     */
    implicitRules?: uri;
    /**
     * Contains extension information for property 'implicitRules'.
     */
    _implicitRules?: Element;
    /**
     * The base language in which the resource is written.
     */
    language?: code;
    /**
     * Contains extension information for property 'language'.
     */
    _language?: Element;
    /**
     * A human-readable narrative that contains a summary of the resource and can be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it "clinically safe" for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety.
     */
    text?: Narrative;
    /**
     * These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, and nor can they have their own independent transaction scope.
     */
    contained?: Resource[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * A unique identifier assigned to this payment notice.
     */
    identifier?: Identifier[];
    /**
     * The status of the resource instance.
     */
    status: code;
    /**
     * Contains extension information for property 'status'.
     */
    _status?: Element;
    /**
     * Reference of resource for which payment is being made.
     */
    request?: Reference;
    /**
     * Reference of response to resource for which payment is being made.
     */
    response?: Reference;
    /**
     * The date when this resource was created.
     */
    created: dateTime;
    /**
     * Contains extension information for property 'created'.
     */
    _created?: Element;
    /**
     * The practitioner who is responsible for the services rendered to the patient.
     */
    provider?: Reference;
    /**
     * A reference to the payment which is the subject of this notice.
     */
    payment: Reference;
    /**
     * The date when the above payment action occurred.
     */
    paymentDate?: date;
    /**
     * Contains extension information for property 'paymentDate'.
     */
    _paymentDate?: Element;
    /**
     * The party who will receive or has received payment that is the subject of this notification.
     */
    payee?: Reference;
    /**
     * The party who is notified of the payment status.
     */
    recipient: Reference;
    /**
     * The amount sent to the payee.
     */
    amount: Money;
    /**
     * A code indicating whether payment has been sent or cleared.
     */
    paymentStatus?: CodeableConcept;
}
/**
 * This resource provides the details including amount of a payment and allocates the payment items being paid.
 */
export interface PaymentReconciliation {
    /**
     * The type of the resource.
     */
    resourceType: string;
    /**
     * The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes.
     */
    id?: id;
    /**
     * Contains extension information for property 'id'.
     */
    _id?: Element;
    /**
     * The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource.
     */
    meta?: Meta;
    /**
     * A reference to a set of rules that were followed when the resource was constructed, and which must be understood when processing the content. Often, this is a reference to an implementation guide that defines the special rules along with other profiles etc.
     */
    implicitRules?: uri;
    /**
     * Contains extension information for property 'implicitRules'.
     */
    _implicitRules?: Element;
    /**
     * The base language in which the resource is written.
     */
    language?: code;
    /**
     * Contains extension information for property 'language'.
     */
    _language?: Element;
    /**
     * A human-readable narrative that contains a summary of the resource and can be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it "clinically safe" for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety.
     */
    text?: Narrative;
    /**
     * These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, and nor can they have their own independent transaction scope.
     */
    contained?: Resource[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * A unique identifier assigned to this payment reconciliation.
     */
    identifier?: Identifier[];
    /**
     * The status of the resource instance.
     */
    status: code;
    /**
     * Contains extension information for property 'status'.
     */
    _status?: Element;
    /**
     * The period of time for which payments have been gathered into this bulk payment for settlement.
     */
    period?: Period;
    /**
     * The date when the resource was created.
     */
    created: dateTime;
    /**
     * Contains extension information for property 'created'.
     */
    _created?: Element;
    /**
     * The party who generated the payment.
     */
    paymentIssuer?: Reference;
    /**
     * Original request resource reference.
     */
    request?: Reference;
    /**
     * The practitioner who is responsible for the services rendered to the patient.
     */
    requestor?: Reference;
    /**
     * The outcome of a request for a reconciliation.
     */
    outcome?: code;
    /**
     * Contains extension information for property 'outcome'.
     */
    _outcome?: Element;
    /**
     * A human readable description of the status of the request for the reconciliation.
     */
    disposition?: string;
    /**
     * Contains extension information for property 'disposition'.
     */
    _disposition?: Element;
    /**
     * The date of payment as indicated on the financial instrument.
     */
    paymentDate: date;
    /**
     * Contains extension information for property 'paymentDate'.
     */
    _paymentDate?: Element;
    /**
     * Total payment amount as indicated on the financial instrument.
     */
    paymentAmount: Money;
    /**
     * Issuer's unique identifier for the payment instrument.
     */
    paymentIdentifier?: Identifier;
    /**
     * Distribution of the payment amount for a previously acknowledged payable.
     */
    detail?: PaymentReconciliationDetail[];
    /**
     * A code for the form to be used for printing the content.
     */
    formCode?: CodeableConcept;
    /**
     * A note that describes or explains the processing in a human readable form.
     */
    processNote?: PaymentReconciliationProcessNote[];
}
/**
 * Distribution of the payment amount for a previously acknowledged payable.
 */
export interface PaymentReconciliationDetail {
    /**
     * Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
     */
    id?: string;
    /**
     * Contains extension information for property 'id'.
     */
    _id?: Element;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * Unique identifier for the current payment item for the referenced payable.
     */
    identifier?: Identifier;
    /**
     * Unique identifier for the prior payment item for the referenced payable.
     */
    predecessor?: Identifier;
    /**
     * Code to indicate the nature of the payment.
     */
    type: CodeableConcept;
    /**
     * A resource, such as a Claim, the evaluation of which could lead to payment.
     */
    request?: Reference;
    /**
     * The party which submitted the claim or financial transaction.
     */
    submitter?: Reference;
    /**
     * A resource, such as a ClaimResponse, which contains a commitment to payment.
     */
    response?: Reference;
    /**
     * The date from the response resource containing a commitment to pay.
     */
    date?: date;
    /**
     * Contains extension information for property 'date'.
     */
    _date?: Element;
    /**
     * A reference to the individual who is responsible for inquiries regarding the response and its payment.
     */
    responsible?: Reference;
    /**
     * The party which is receiving the payment.
     */
    payee?: Reference;
    /**
     * The monetary amount allocated from the total payment to the payable.
     */
    amount?: Money;
}
/**
 * A note that describes or explains the processing in a human readable form.
 */
export interface PaymentReconciliationProcessNote {
    /**
     * Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
     */
    id?: string;
    /**
     * Contains extension information for property 'id'.
     */
    _id?: Element;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * The business purpose of the note text.
     */
    type?: code;
    /**
     * Contains extension information for property 'type'.
     */
    _type?: Element;
    /**
     * The explanation or description associated with the processing.
     */
    text?: string;
    /**
     * Contains extension information for property 'text'.
     */
    _text?: Element;
}
/**
 * A time period defined by a start and end date and optionally time.
 */
export interface Period {
    /**
     * Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
     */
    id?: string;
    /**
     * Contains extension information for property 'id'.
     */
    _id?: Element;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * The start of the period. The boundary is inclusive.
     */
    start?: dateTime;
    /**
     * Contains extension information for property 'start'.
     */
    _start?: Element;
    /**
     * The end of the period. If the end of the period is missing, it means no end was known or planned at the time the instance was created. The start may be in the past, and the end date in the future, which means that period is expected/planned to end at that time.
     */
    end?: dateTime;
    /**
     * Contains extension information for property 'end'.
     */
    _end?: Element;
}
/**
 * Demographics and administrative information about a person independent of a specific health-related context.
 */
export interface Person {
    /**
     * The type of the resource.
     */
    resourceType: string;
    /**
     * The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes.
     */
    id?: id;
    /**
     * Contains extension information for property 'id'.
     */
    _id?: Element;
    /**
     * The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource.
     */
    meta?: Meta;
    /**
     * A reference to a set of rules that were followed when the resource was constructed, and which must be understood when processing the content. Often, this is a reference to an implementation guide that defines the special rules along with other profiles etc.
     */
    implicitRules?: uri;
    /**
     * Contains extension information for property 'implicitRules'.
     */
    _implicitRules?: Element;
    /**
     * The base language in which the resource is written.
     */
    language?: code;
    /**
     * Contains extension information for property 'language'.
     */
    _language?: Element;
    /**
     * A human-readable narrative that contains a summary of the resource and can be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it "clinically safe" for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety.
     */
    text?: Narrative;
    /**
     * These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, and nor can they have their own independent transaction scope.
     */
    contained?: Resource[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * Identifier for a person within a particular scope.
     */
    identifier?: Identifier[];
    /**
     * A name associated with the person.
     */
    name?: HumanName[];
    /**
     * A contact detail for the person, e.g. a telephone number or an email address.
     */
    telecom?: ContactPoint[];
    /**
     * Administrative Gender.
     */
    gender?: code;
    /**
     * Contains extension information for property 'gender'.
     */
    _gender?: Element;
    /**
     * The birth date for the person.
     */
    birthDate?: date;
    /**
     * Contains extension information for property 'birthDate'.
     */
    _birthDate?: Element;
    /**
     * One or more addresses for the person.
     */
    address?: Address[];
    /**
     * An image that can be displayed as a thumbnail of the person to enhance the identification of the individual.
     */
    photo?: Attachment;
    /**
     * The organization that is the custodian of the person record.
     */
    managingOrganization?: Reference;
    /**
     * Whether this person's record is in active use.
     */
    active?: boolean;
    /**
     * Contains extension information for property 'active'.
     */
    _active?: Element;
    /**
     * Link to a resource that concerns the same actual person.
     */
    link?: PersonLink[];
}
/**
 * Link to a resource that concerns the same actual person.
 */
export interface PersonLink {
    /**
     * Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
     */
    id?: string;
    /**
     * Contains extension information for property 'id'.
     */
    _id?: Element;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * The resource to which this actual person is associated.
     */
    target: Reference;
    /**
     * Level of assurance that this link is associated with the target resource.
     */
    assurance?: code;
    /**
     * Contains extension information for property 'assurance'.
     */
    _assurance?: Element;
}
/**
 * This resource allows for the definition of various types of plans as a sharable, consumable, and executable artifact. The resource is general enough to support the description of a broad range of clinical artifacts such as clinical decision support rules, order sets and protocols.
 */
export interface PlanDefinition {
    /**
     * The type of the resource.
     */
    resourceType: string;
    /**
     * The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes.
     */
    id?: id;
    /**
     * Contains extension information for property 'id'.
     */
    _id?: Element;
    /**
     * The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource.
     */
    meta?: Meta;
    /**
     * A reference to a set of rules that were followed when the resource was constructed, and which must be understood when processing the content. Often, this is a reference to an implementation guide that defines the special rules along with other profiles etc.
     */
    implicitRules?: uri;
    /**
     * Contains extension information for property 'implicitRules'.
     */
    _implicitRules?: Element;
    /**
     * The base language in which the resource is written.
     */
    language?: code;
    /**
     * Contains extension information for property 'language'.
     */
    _language?: Element;
    /**
     * A human-readable narrative that contains a summary of the resource and can be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it "clinically safe" for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety.
     */
    text?: Narrative;
    /**
     * These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, and nor can they have their own independent transaction scope.
     */
    contained?: Resource[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * An absolute URI that is used to identify this plan definition when it is referenced in a specification, model, design or an instance; also called its canonical identifier. This SHOULD be globally unique and SHOULD be a literal address at which at which an authoritative instance of this plan definition is (or will be) published. This URL can be the target of a canonical reference. It SHALL remain the same when the plan definition is stored on different servers.
     */
    url?: uri;
    /**
     * Contains extension information for property 'url'.
     */
    _url?: Element;
    /**
     * A formal identifier that is used to identify this plan definition when it is represented in other formats, or referenced in a specification, model, design or an instance.
     */
    identifier?: Identifier[];
    /**
     * The identifier that is used to identify this version of the plan definition when it is referenced in a specification, model, design or instance. This is an arbitrary value managed by the plan definition author and is not expected to be globally unique. For example, it might be a timestamp (e.g. yyyymmdd) if a managed version is not available. There is also no expectation that versions can be placed in a lexicographical sequence. To provide a version consistent with the Decision Support Service specification, use the format Major.Minor.Revision (e.g. 1.0.0). For more information on versioning knowledge assets, refer to the Decision Support Service specification. Note that a version is required for non-experimental active artifacts.
     */
    version?: string;
    /**
     * Contains extension information for property 'version'.
     */
    _version?: Element;
    /**
     * A natural language name identifying the plan definition. This name should be usable as an identifier for the module by machine processing applications such as code generation.
     */
    name?: string;
    /**
     * Contains extension information for property 'name'.
     */
    _name?: Element;
    /**
     * A short, descriptive, user-friendly title for the plan definition.
     */
    title?: string;
    /**
     * Contains extension information for property 'title'.
     */
    _title?: Element;
    /**
     * An explanatory or alternate title for the plan definition giving additional information about its content.
     */
    subtitle?: string;
    /**
     * Contains extension information for property 'subtitle'.
     */
    _subtitle?: Element;
    /**
     * A high-level category for the plan definition that distinguishes the kinds of systems that would be interested in the plan definition.
     */
    type?: CodeableConcept;
    /**
     * The status of this plan definition. Enables tracking the life-cycle of the content.
     */
    status: code;
    /**
     * Contains extension information for property 'status'.
     */
    _status?: Element;
    /**
     * A Boolean value to indicate that this plan definition is authored for testing purposes (or education/evaluation/marketing) and is not intended to be used for genuine usage.
     */
    experimental?: boolean;
    /**
     * Contains extension information for property 'experimental'.
     */
    _experimental?: Element;
    /**
     * A code or group definition that describes the intended subject of the plan definition.
     */
    subjectCodeableConcept?: CodeableConcept;
    /**
     * A code or group definition that describes the intended subject of the plan definition.
     */
    subjectReference?: Reference;
    /**
     * The date  (and optionally time) when the plan definition was published. The date must change when the business version changes and it must change if the status code changes. In addition, it should change when the substantive content of the plan definition changes.
     */
    date?: dateTime;
    /**
     * Contains extension information for property 'date'.
     */
    _date?: Element;
    /**
     * The name of the organization or individual that published the plan definition.
     */
    publisher?: string;
    /**
     * Contains extension information for property 'publisher'.
     */
    _publisher?: Element;
    /**
     * Contact details to assist a user in finding and communicating with the publisher.
     */
    contact?: ContactDetail[];
    /**
     * A free text natural language description of the plan definition from a consumer's perspective.
     */
    description?: markdown;
    /**
     * Contains extension information for property 'description'.
     */
    _description?: Element;
    /**
     * The content was developed with a focus and intent of supporting the contexts that are listed. These contexts may be general categories (gender, age, ...) or may be references to specific programs (insurance plans, studies, ...) and may be used to assist with indexing and searching for appropriate plan definition instances.
     */
    useContext?: UsageContext[];
    /**
     * A legal or geographic region in which the plan definition is intended to be used.
     */
    jurisdiction?: CodeableConcept[];
    /**
     * Explanation of why this plan definition is needed and why it has been designed as it has.
     */
    purpose?: markdown;
    /**
     * Contains extension information for property 'purpose'.
     */
    _purpose?: Element;
    /**
     * A detailed description of how the plan definition is used from a clinical perspective.
     */
    usage?: string;
    /**
     * Contains extension information for property 'usage'.
     */
    _usage?: Element;
    /**
     * A copyright statement relating to the plan definition and/or its contents. Copyright statements are generally legal restrictions on the use and publishing of the plan definition.
     */
    copyright?: markdown;
    /**
     * Contains extension information for property 'copyright'.
     */
    _copyright?: Element;
    /**
     * The date on which the resource content was approved by the publisher. Approval happens once when the content is officially approved for usage.
     */
    approvalDate?: date;
    /**
     * Contains extension information for property 'approvalDate'.
     */
    _approvalDate?: Element;
    /**
     * The date on which the resource content was last reviewed. Review happens periodically after approval but does not change the original approval date.
     */
    lastReviewDate?: date;
    /**
     * Contains extension information for property 'lastReviewDate'.
     */
    _lastReviewDate?: Element;
    /**
     * The period during which the plan definition content was or is planned to be in active use.
     */
    effectivePeriod?: Period;
    /**
     * Descriptive topics related to the content of the plan definition. Topics provide a high-level categorization of the definition that can be useful for filtering and searching.
     */
    topic?: CodeableConcept[];
    /**
     * An individiual or organization primarily involved in the creation and maintenance of the content.
     */
    author?: ContactDetail[];
    /**
     * An individual or organization primarily responsible for internal coherence of the content.
     */
    editor?: ContactDetail[];
    /**
     * An individual or organization primarily responsible for review of some aspect of the content.
     */
    reviewer?: ContactDetail[];
    /**
     * An individual or organization responsible for officially endorsing the content for use in some setting.
     */
    endorser?: ContactDetail[];
    /**
     * Related artifacts such as additional documentation, justification, or bibliographic references.
     */
    relatedArtifact?: RelatedArtifact[];
    /**
     * A reference to a Library resource containing any formal logic used by the plan definition.
     */
    library?: canonical[];
    /**
     * Goals that describe what the activities within the plan are intended to achieve. For example, weight loss, restoring an activity of daily living, obtaining herd immunity via immunization, meeting a process improvement objective, etc.
     */
    goal?: PlanDefinitionGoal[];
    /**
     * An action or group of actions to be taken as part of the plan.
     */
    action?: PlanDefinitionAction[];
}
/**
 * Goals that describe what the activities within the plan are intended to achieve. For example, weight loss, restoring an activity of daily living, obtaining herd immunity via immunization, meeting a process improvement objective, etc.
 */
export interface PlanDefinitionGoal {
    /**
     * Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
     */
    id?: string;
    /**
     * Contains extension information for property 'id'.
     */
    _id?: Element;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * Indicates a category the goal falls within.
     */
    category?: CodeableConcept;
    /**
     * Human-readable and/or coded description of a specific desired objective of care, such as "control blood pressure" or "negotiate an obstacle course" or "dance with child at wedding".
     */
    description: CodeableConcept;
    /**
     * Identifies the expected level of importance associated with reaching/sustaining the defined goal.
     */
    priority?: CodeableConcept;
    /**
     * The event after which the goal should begin being pursued.
     */
    start?: CodeableConcept;
    /**
     * Identifies problems, conditions, issues, or concerns the goal is intended to address.
     */
    addresses?: CodeableConcept[];
    /**
     * Didactic or other informational resources associated with the goal that provide further supporting information about the goal. Information resources can include inline text commentary and links to web resources.
     */
    documentation?: RelatedArtifact[];
    /**
     * Indicates what should be done and within what timeframe.
     */
    target?: PlanDefinitionGoalTarget[];
}
/**
 * Indicates what should be done and within what timeframe.
 */
export interface PlanDefinitionGoalTarget {
    /**
     * Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
     */
    id?: string;
    /**
     * Contains extension information for property 'id'.
     */
    _id?: Element;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * The parameter whose value is to be tracked, e.g. body weight, blood pressure, or hemoglobin A1c level.
     */
    measure?: CodeableConcept;
    /**
     * The target value of the measure to be achieved to signify fulfillment of the goal, e.g. 150 pounds or 7.0%. Either the high or low or both values of the range can be specified. When a low value is missing, it indicates that the goal is achieved at any value at or below the high value. Similarly, if the high value is missing, it indicates that the goal is achieved at any value at or above the low value.
     */
    detailQuantity?: Quantity;
    /**
     * The target value of the measure to be achieved to signify fulfillment of the goal, e.g. 150 pounds or 7.0%. Either the high or low or both values of the range can be specified. When a low value is missing, it indicates that the goal is achieved at any value at or below the high value. Similarly, if the high value is missing, it indicates that the goal is achieved at any value at or above the low value.
     */
    detailRange?: Range;
    /**
     * The target value of the measure to be achieved to signify fulfillment of the goal, e.g. 150 pounds or 7.0%. Either the high or low or both values of the range can be specified. When a low value is missing, it indicates that the goal is achieved at any value at or below the high value. Similarly, if the high value is missing, it indicates that the goal is achieved at any value at or above the low value.
     */
    detailCodeableConcept?: CodeableConcept;
    /**
     * Indicates the timeframe after the start of the goal in which the goal should be met.
     */
    due?: Duration;
}
/**
 * An action or group of actions to be taken as part of the plan.
 */
export interface PlanDefinitionAction {
    /**
     * Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
     */
    id?: string;
    /**
     * Contains extension information for property 'id'.
     */
    _id?: Element;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * A user-visible prefix for the action.
     */
    prefix?: string;
    /**
     * Contains extension information for property 'prefix'.
     */
    _prefix?: Element;
    /**
     * The title of the action displayed to a user.
     */
    title?: string;
    /**
     * Contains extension information for property 'title'.
     */
    _title?: Element;
    /**
     * A brief description of the action used to provide a summary to display to the user.
     */
    description?: string;
    /**
     * Contains extension information for property 'description'.
     */
    _description?: Element;
    /**
     * A text equivalent of the action to be performed. This provides a human-interpretable description of the action when the definition is consumed by a system that might not be capable of interpreting it dynamically.
     */
    textEquivalent?: string;
    /**
     * Contains extension information for property 'textEquivalent'.
     */
    _textEquivalent?: Element;
    /**
     * Indicates how quickly the action should be addressed with respect to other actions.
     */
    priority?: code;
    /**
     * Contains extension information for property 'priority'.
     */
    _priority?: Element;
    /**
     * A code that provides meaning for the action or action group. For example, a section may have a LOINC code for the section of a documentation template.
     */
    code?: CodeableConcept[];
    /**
     * A description of why this action is necessary or appropriate.
     */
    reason?: CodeableConcept[];
    /**
     * Didactic or other informational resources associated with the action that can be provided to the CDS recipient. Information resources can include inline text commentary and links to web resources.
     */
    documentation?: RelatedArtifact[];
    /**
     * Identifies goals that this action supports. The reference must be to a goal element defined within this plan definition.
     */
    goalId?: id[];
    /**
     * Contains extension information for property 'goalId'.
     */
    _goalId?: Element[];
    /**
     * A code or group definition that describes the intended subject of the action and its children, if any.
     */
    subjectCodeableConcept?: CodeableConcept;
    /**
     * A code or group definition that describes the intended subject of the action and its children, if any.
     */
    subjectReference?: Reference;
    /**
     * A description of when the action should be triggered.
     */
    trigger?: TriggerDefinition[];
    /**
     * An expression that describes applicability criteria or start/stop conditions for the action.
     */
    condition?: PlanDefinitionActionCondition[];
    /**
     * Defines input data requirements for the action.
     */
    input?: DataRequirement[];
    /**
     * Defines the outputs of the action, if any.
     */
    output?: DataRequirement[];
    /**
     * A relationship to another action such as "before" or "30-60 minutes after start of".
     */
    relatedAction?: PlanDefinitionActionRelatedAction[];
    /**
     * An optional value describing when the action should be performed.
     */
    timingDateTime?: dateTime;
    /**
     * Contains extension information for property 'timingDateTime'.
     */
    _timingDateTime?: Element;
    /**
     * An optional value describing when the action should be performed.
     */
    timingAge?: Age;
    /**
     * An optional value describing when the action should be performed.
     */
    timingPeriod?: Period;
    /**
     * An optional value describing when the action should be performed.
     */
    timingDuration?: Duration;
    /**
     * An optional value describing when the action should be performed.
     */
    timingRange?: Range;
    /**
     * An optional value describing when the action should be performed.
     */
    timingTiming?: Timing;
    /**
     * Indicates who should participate in performing the action described.
     */
    participant?: PlanDefinitionActionParticipant[];
    /**
     * The type of action to perform (create, update, remove).
     */
    type?: CodeableConcept;
    /**
     * Defines the grouping behavior for the action and its children.
     */
    groupingBehavior?: code;
    /**
     * Contains extension information for property 'groupingBehavior'.
     */
    _groupingBehavior?: Element;
    /**
     * Defines the selection behavior for the action and its children.
     */
    selectionBehavior?: code;
    /**
     * Contains extension information for property 'selectionBehavior'.
     */
    _selectionBehavior?: Element;
    /**
     * Defines the required behavior for the action.
     */
    requiredBehavior?: code;
    /**
     * Contains extension information for property 'requiredBehavior'.
     */
    _requiredBehavior?: Element;
    /**
     * Defines whether the action should usually be preselected.
     */
    precheckBehavior?: code;
    /**
     * Contains extension information for property 'precheckBehavior'.
     */
    _precheckBehavior?: Element;
    /**
     * Defines whether the action can be selected multiple times.
     */
    cardinalityBehavior?: code;
    /**
     * Contains extension information for property 'cardinalityBehavior'.
     */
    _cardinalityBehavior?: Element;
    /**
     * A reference to an ActivityDefinition that describes the action to be taken in detail, or a PlanDefinition that describes a series of actions to be taken.
     */
    definitionCanonical?: canonical;
    /**
     * A reference to an ActivityDefinition that describes the action to be taken in detail, or a PlanDefinition that describes a series of actions to be taken.
     */
    definitionUri?: uri;
    /**
     * Contains extension information for property 'definitionUri'.
     */
    _definitionUri?: Element;
    /**
     * A reference to a StructureMap resource that defines a transform that can be executed to produce the intent resource using the ActivityDefinition instance as the input.
     */
    transform?: canonical;
    /**
     * Customizations that should be applied to the statically defined resource. For example, if the dosage of a medication must be computed based on the patient's weight, a customization would be used to specify an expression that calculated the weight, and the path on the resource that would contain the result.
     */
    dynamicValue?: PlanDefinitionActionDynamicValue[];
    /**
     * Sub actions that are contained within the action. The behavior of this action determines the functionality of the sub-actions. For example, a selection behavior of at-most-one indicates that of the sub-actions, at most one may be chosen as part of realizing the action definition.
     */
    action?: PlanDefinitionAction[];
}
/**
 * An expression that describes applicability criteria or start/stop conditions for the action.
 */
export interface PlanDefinitionActionCondition {
    /**
     * Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
     */
    id?: string;
    /**
     * Contains extension information for property 'id'.
     */
    _id?: Element;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * The kind of condition.
     */
    kind: code;
    /**
     * Contains extension information for property 'kind'.
     */
    _kind?: Element;
    /**
     * An expression that returns true or false, indicating whether the condition is satisfied.
     */
    expression?: Expression;
}
/**
 * A relationship to another action such as "before" or "30-60 minutes after start of".
 */
export interface PlanDefinitionActionRelatedAction {
    /**
     * Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
     */
    id?: string;
    /**
     * Contains extension information for property 'id'.
     */
    _id?: Element;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * The element id of the related action.
     */
    actionId: id;
    /**
     * Contains extension information for property 'actionId'.
     */
    _actionId?: Element;
    /**
     * The relationship of this action to the related action.
     */
    relationship: code;
    /**
     * Contains extension information for property 'relationship'.
     */
    _relationship?: Element;
    /**
     * A duration or range of durations to apply to the relationship. For example, 30-60 minutes before.
     */
    offsetDuration?: Duration;
    /**
     * A duration or range of durations to apply to the relationship. For example, 30-60 minutes before.
     */
    offsetRange?: Range;
}
/**
 * Indicates who should participate in performing the action described.
 */
export interface PlanDefinitionActionParticipant {
    /**
     * Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
     */
    id?: string;
    /**
     * Contains extension information for property 'id'.
     */
    _id?: Element;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * The type of participant in the action.
     */
    type: code;
    /**
     * Contains extension information for property 'type'.
     */
    _type?: Element;
    /**
     * The role the participant should play in performing the described action.
     */
    role?: CodeableConcept;
}
/**
 * Customizations that should be applied to the statically defined resource. For example, if the dosage of a medication must be computed based on the patient's weight, a customization would be used to specify an expression that calculated the weight, and the path on the resource that would contain the result.
 */
export interface PlanDefinitionActionDynamicValue {
    /**
     * Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
     */
    id?: string;
    /**
     * Contains extension information for property 'id'.
     */
    _id?: Element;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * The path to the element to be customized. This is the path on the resource that will hold the result of the calculation defined by the expression. The specified path SHALL be a FHIRPath resolveable on the specified target type of the ActivityDefinition, and SHALL consist only of identifiers, constant indexers, and a restricted subset of functions. The path is allowed to contain qualifiers (.) to traverse sub-elements, as well as indexers ([x]) to traverse multiple-cardinality sub-elements (see the [Simple FHIRPath Profile](fhirpath.html#simple) for full details).
     */
    path?: string;
    /**
     * Contains extension information for property 'path'.
     */
    _path?: Element;
    /**
     * An expression specifying the value of the customized element.
     */
    expression?: Expression;
}
/**
 * A populatioof people with some set of grouping criteria.
 */
export interface Population {
    /**
     * Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
     */
    id?: string;
    /**
     * Contains extension information for property 'id'.
     */
    _id?: Element;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * The age of the specific population.
     */
    ageRange?: Range;
    /**
     * The age of the specific population.
     */
    ageCodeableConcept?: CodeableConcept;
    /**
     * The gender of the specific population.
     */
    gender?: CodeableConcept;
    /**
     * Race of the specific population.
     */
    race?: CodeableConcept;
    /**
     * The existing physiological conditions of the specific population to which this applies.
     */
    physiologicalCondition?: CodeableConcept;
}
/**
 * A person who is directly or indirectly involved in the provisioning of healthcare.
 */
export interface Practitioner {
    /**
     * The type of the resource.
     */
    resourceType: string;
    /**
     * The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes.
     */
    id?: id;
    /**
     * Contains extension information for property 'id'.
     */
    _id?: Element;
    /**
     * The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource.
     */
    meta?: Meta;
    /**
     * A reference to a set of rules that were followed when the resource was constructed, and which must be understood when processing the content. Often, this is a reference to an implementation guide that defines the special rules along with other profiles etc.
     */
    implicitRules?: uri;
    /**
     * Contains extension information for property 'implicitRules'.
     */
    _implicitRules?: Element;
    /**
     * The base language in which the resource is written.
     */
    language?: code;
    /**
     * Contains extension information for property 'language'.
     */
    _language?: Element;
    /**
     * A human-readable narrative that contains a summary of the resource and can be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it "clinically safe" for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety.
     */
    text?: Narrative;
    /**
     * These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, and nor can they have their own independent transaction scope.
     */
    contained?: Resource[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * An identifier that applies to this person in this role.
     */
    identifier?: Identifier[];
    /**
     * Whether this practitioner's record is in active use.
     */
    active?: boolean;
    /**
     * Contains extension information for property 'active'.
     */
    _active?: Element;
    /**
     * The name(s) associated with the practitioner.
     */
    name?: HumanName[];
    /**
     * A contact detail for the practitioner, e.g. a telephone number or an email address.
     */
    telecom?: ContactPoint[];
    /**
     * Address(es) of the practitioner that are not role specific (typically home address). Work addresses are not typically entered in this property as they are usually role dependent.
     */
    address?: Address[];
    /**
     * Administrative Gender - the gender that the person is considered to have for administration and record keeping purposes.
     */
    gender?: code;
    /**
     * Contains extension information for property 'gender'.
     */
    _gender?: Element;
    /**
     * The date of birth for the practitioner.
     */
    birthDate?: date;
    /**
     * Contains extension information for property 'birthDate'.
     */
    _birthDate?: Element;
    /**
     * Image of the person.
     */
    photo?: Attachment[];
    /**
     * The official certifications, training, and licenses that authorize or otherwise pertain to the provision of care by the practitioner.  For example, a medical license issued by a medical board authorizing the practitioner to practice medicine within a certian locality.
     */
    qualification?: PractitionerQualification[];
    /**
     * A language the practitioner can use in patient communication.
     */
    communication?: CodeableConcept[];
}
/**
 * The official certifications, training, and licenses that authorize or otherwise pertain to the provision of care by the practitioner.  For example, a medical license issued by a medical board authorizing the practitioner to practice medicine within a certian locality.
 */
export interface PractitionerQualification {
    /**
     * Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
     */
    id?: string;
    /**
     * Contains extension information for property 'id'.
     */
    _id?: Element;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * An identifier that applies to this person's qualification in this role.
     */
    identifier?: Identifier[];
    /**
     * Coded representation of the qualification.
     */
    code: CodeableConcept;
    /**
     * Period during which the qualification is valid.
     */
    period?: Period;
    /**
     * Organization that regulates and issues the qualification.
     */
    issuer?: Reference;
}
/**
 * A specific set of Roles/Locations/specialties/services that a practitioner may perform at an organization for a period of time.
 */
export interface PractitionerRole {
    /**
     * The type of the resource.
     */
    resourceType: string;
    /**
     * The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes.
     */
    id?: id;
    /**
     * Contains extension information for property 'id'.
     */
    _id?: Element;
    /**
     * The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource.
     */
    meta?: Meta;
    /**
     * A reference to a set of rules that were followed when the resource was constructed, and which must be understood when processing the content. Often, this is a reference to an implementation guide that defines the special rules along with other profiles etc.
     */
    implicitRules?: uri;
    /**
     * Contains extension information for property 'implicitRules'.
     */
    _implicitRules?: Element;
    /**
     * The base language in which the resource is written.
     */
    language?: code;
    /**
     * Contains extension information for property 'language'.
     */
    _language?: Element;
    /**
     * A human-readable narrative that contains a summary of the resource and can be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it "clinically safe" for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety.
     */
    text?: Narrative;
    /**
     * These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, and nor can they have their own independent transaction scope.
     */
    contained?: Resource[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * Business Identifiers that are specific to a role/location.
     */
    identifier?: Identifier[];
    /**
     * Whether this practitioner role record is in active use.
     */
    active?: boolean;
    /**
     * Contains extension information for property 'active'.
     */
    _active?: Element;
    /**
     * The period during which the person is authorized to act as a practitioner in these role(s) for the organization.
     */
    period?: Period;
    /**
     * Practitioner that is able to provide the defined services for the organization.
     */
    practitioner?: Reference;
    /**
     * The organization where the Practitioner performs the roles associated.
     */
    organization?: Reference;
    /**
     * Roles which this practitioner is authorized to perform for the organization.
     */
    code?: CodeableConcept[];
    /**
     * Specific specialty of the practitioner.
     */
    specialty?: CodeableConcept[];
    /**
     * The location(s) at which this practitioner provides care.
     */
    location?: Reference[];
    /**
     * The list of healthcare services that this worker provides for this role's Organization/Location(s).
     */
    healthcareService?: Reference[];
    /**
     * Contact details that are specific to the role/location/service.
     */
    telecom?: ContactPoint[];
    /**
     * A collection of times the practitioner is available or performing this role at the location and/or healthcareservice.
     */
    availableTime?: PractitionerRoleAvailableTime[];
    /**
     * The practitioner is not available or performing this role during this period of time due to the provided reason.
     */
    notAvailable?: PractitionerRoleNotAvailable[];
    /**
     * A description of site availability exceptions, e.g. public holiday availability. Succinctly describing all possible exceptions to normal site availability as details in the available Times and not available Times.
     */
    availabilityExceptions?: string;
    /**
     * Contains extension information for property 'availabilityExceptions'.
     */
    _availabilityExceptions?: Element;
    /**
     * Technical endpoints providing access to services operated for the practitioner with this role.
     */
    endpoint?: Reference[];
}
/**
 * A collection of times the practitioner is available or performing this role at the location and/or healthcareservice.
 */
export interface PractitionerRoleAvailableTime {
    /**
     * Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
     */
    id?: string;
    /**
     * Contains extension information for property 'id'.
     */
    _id?: Element;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * Indicates which days of the week are available between the start and end Times.
     */
    daysOfWeek?: code[];
    /**
     * Contains extension information for property 'daysOfWeek'.
     */
    _daysOfWeek?: Element[];
    /**
     * Is this always available? (hence times are irrelevant) e.g. 24 hour service.
     */
    allDay?: boolean;
    /**
     * Contains extension information for property 'allDay'.
     */
    _allDay?: Element;
    /**
     * The opening time of day. Note: If the AllDay flag is set, then this time is ignored.
     */
    availableStartTime?: time;
    /**
     * Contains extension information for property 'availableStartTime'.
     */
    _availableStartTime?: Element;
    /**
     * The closing time of day. Note: If the AllDay flag is set, then this time is ignored.
     */
    availableEndTime?: time;
    /**
     * Contains extension information for property 'availableEndTime'.
     */
    _availableEndTime?: Element;
}
/**
 * The practitioner is not available or performing this role during this period of time due to the provided reason.
 */
export interface PractitionerRoleNotAvailable {
    /**
     * Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
     */
    id?: string;
    /**
     * Contains extension information for property 'id'.
     */
    _id?: Element;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * The reason that can be presented to the user as to why this time is not available.
     */
    description: string;
    /**
     * Contains extension information for property 'description'.
     */
    _description?: Element;
    /**
     * Service is not available (seasonally or for a public holiday) from this date.
     */
    during?: Period;
}
/**
 * An action that is or was performed on or for a patient. This can be a physical intervention like an operation, or less invasive like long term services, counseling, or hypnotherapy.
 */
export interface Procedure {
    /**
     * The type of the resource.
     */
    resourceType: string;
    /**
     * The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes.
     */
    id?: id;
    /**
     * Contains extension information for property 'id'.
     */
    _id?: Element;
    /**
     * The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource.
     */
    meta?: Meta;
    /**
     * A reference to a set of rules that were followed when the resource was constructed, and which must be understood when processing the content. Often, this is a reference to an implementation guide that defines the special rules along with other profiles etc.
     */
    implicitRules?: uri;
    /**
     * Contains extension information for property 'implicitRules'.
     */
    _implicitRules?: Element;
    /**
     * The base language in which the resource is written.
     */
    language?: code;
    /**
     * Contains extension information for property 'language'.
     */
    _language?: Element;
    /**
     * A human-readable narrative that contains a summary of the resource and can be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it "clinically safe" for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety.
     */
    text?: Narrative;
    /**
     * These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, and nor can they have their own independent transaction scope.
     */
    contained?: Resource[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * Business identifiers assigned to this procedure by the performer or other systems which remain constant as the resource is updated and is propagated from server to server.
     */
    identifier?: Identifier[];
    /**
     * The URL pointing to a FHIR-defined protocol, guideline, order set or other definition that is adhered to in whole or in part by this Procedure.
     */
    instantiatesCanonical?: canonical[];
    /**
     * The URL pointing to an externally maintained protocol, guideline, order set or other definition that is adhered to in whole or in part by this Procedure.
     */
    instantiatesUri?: uri[];
    /**
     * Contains extension information for property 'instantiatesUri'.
     */
    _instantiatesUri?: Element[];
    /**
     * A reference to a resource that contains details of the request for this procedure.
     */
    basedOn?: Reference[];
    /**
     * A larger event of which this particular procedure is a component or step.
     */
    partOf?: Reference[];
    /**
     * A code specifying the state of the procedure. Generally, this will be the in-progress or completed state.
     */
    status: code;
    /**
     * Contains extension information for property 'status'.
     */
    _status?: Element;
    /**
     * Captures the reason for the current state of the procedure.
     */
    statusReason?: CodeableConcept;
    /**
     * A code that classifies the procedure for searching, sorting and display purposes (e.g. "Surgical Procedure").
     */
    category?: CodeableConcept;
    /**
     * The specific procedure that is performed. Use text if the exact nature of the procedure cannot be coded (e.g. "Laparoscopic Appendectomy").
     */
    code?: CodeableConcept;
    /**
     * The person, animal or group on which the procedure was performed.
     */
    subject: Reference;
    /**
     * The Encounter during which this Procedure was created or performed or to which the creation of this record is tightly associated.
     */
    encounter?: Reference;
    /**
     * Estimated or actual date, date-time, period, or age when the procedure was performed.  Allows a period to support complex procedures that span more than one date, and also allows for the length of the procedure to be captured.
     */
    performedDateTime?: dateTime;
    /**
     * Contains extension information for property 'performedDateTime'.
     */
    _performedDateTime?: Element;
    /**
     * Estimated or actual date, date-time, period, or age when the procedure was performed.  Allows a period to support complex procedures that span more than one date, and also allows for the length of the procedure to be captured.
     */
    performedPeriod?: Period;
    /**
     * Estimated or actual date, date-time, period, or age when the procedure was performed.  Allows a period to support complex procedures that span more than one date, and also allows for the length of the procedure to be captured.
     */
    performedString?: string;
    /**
     * Contains extension information for property 'performedString'.
     */
    _performedString?: Element;
    /**
     * Estimated or actual date, date-time, period, or age when the procedure was performed.  Allows a period to support complex procedures that span more than one date, and also allows for the length of the procedure to be captured.
     */
    performedAge?: Age;
    /**
     * Estimated or actual date, date-time, period, or age when the procedure was performed.  Allows a period to support complex procedures that span more than one date, and also allows for the length of the procedure to be captured.
     */
    performedRange?: Range;
    /**
     * Individual who recorded the record and takes responsibility for its content.
     */
    recorder?: Reference;
    /**
     * Individual who is making the procedure statement.
     */
    asserter?: Reference;
    /**
     * Limited to "real" people rather than equipment.
     */
    performer?: ProcedurePerformer[];
    /**
     * The location where the procedure actually happened.  E.g. a newborn at home, a tracheostomy at a restaurant.
     */
    location?: Reference;
    /**
     * The coded reason why the procedure was performed. This may be a coded entity of some type, or may simply be present as text.
     */
    reasonCode?: CodeableConcept[];
    /**
     * The justification of why the procedure was performed.
     */
    reasonReference?: Reference[];
    /**
     * Detailed and structured anatomical location information. Multiple locations are allowed - e.g. multiple punch biopsies of a lesion.
     */
    bodySite?: CodeableConcept[];
    /**
     * The outcome of the procedure - did it resolve the reasons for the procedure being performed?
     */
    outcome?: CodeableConcept;
    /**
     * This could be a histology result, pathology report, surgical report, etc.
     */
    report?: Reference[];
    /**
     * Any complications that occurred during the procedure, or in the immediate post-performance period. These are generally tracked separately from the notes, which will typically describe the procedure itself rather than any 'post procedure' issues.
     */
    complication?: CodeableConcept[];
    /**
     * Any complications that occurred during the procedure, or in the immediate post-performance period.
     */
    complicationDetail?: Reference[];
    /**
     * If the procedure required specific follow up - e.g. removal of sutures. The follow up may be represented as a simple note or could potentially be more complex, in which case the CarePlan resource can be used.
     */
    followUp?: CodeableConcept[];
    /**
     * Any other notes and comments about the procedure.
     */
    note?: Annotation[];
    /**
     * A device that is implanted, removed or otherwise manipulated (calibration, battery replacement, fitting a prosthesis, attaching a wound-vac, etc.) as a focal portion of the Procedure.
     */
    focalDevice?: ProcedureFocalDevice[];
    /**
     * Identifies medications, devices and any other substance used as part of the procedure.
     */
    usedReference?: Reference[];
    /**
     * Identifies coded items that were used as part of the procedure.
     */
    usedCode?: CodeableConcept[];
}
/**
 * Limited to "real" people rather than equipment.
 */
export interface ProcedurePerformer {
    /**
     * Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
     */
    id?: string;
    /**
     * Contains extension information for property 'id'.
     */
    _id?: Element;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * Distinguishes the type of involvement of the performer in the procedure. For example, surgeon, anaesthetist, endoscopist.
     */
    function?: CodeableConcept;
    /**
     * The practitioner who was involved in the procedure.
     */
    actor: Reference;
    /**
     * The organization the device or practitioner was acting on behalf of.
     */
    onBehalfOf?: Reference;
}
/**
 * A device that is implanted, removed or otherwise manipulated (calibration, battery replacement, fitting a prosthesis, attaching a wound-vac, etc.) as a focal portion of the Procedure.
 */
export interface ProcedureFocalDevice {
    /**
     * Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
     */
    id?: string;
    /**
     * Contains extension information for property 'id'.
     */
    _id?: Element;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * The kind of change that happened to the device during the procedure.
     */
    action?: CodeableConcept;
    /**
     * The device that was manipulated (changed) during the procedure.
     */
    manipulated: Reference;
}
/**
 * The marketing status describes the date when a medicinal product is actually put on the market or the date as of which it is no longer available.
 */
export interface ProdCharacteristic {
    /**
     * Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
     */
    id?: string;
    /**
     * Contains extension information for property 'id'.
     */
    _id?: Element;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * Where applicable, the height can be specified using a numerical value and its unit of measurement The unit of measurement shall be specified in accordance with ISO 11240 and the resulting terminology The symbol and the symbol identifier shall be used.
     */
    height?: Quantity;
    /**
     * Where applicable, the width can be specified using a numerical value and its unit of measurement The unit of measurement shall be specified in accordance with ISO 11240 and the resulting terminology The symbol and the symbol identifier shall be used.
     */
    width?: Quantity;
    /**
     * Where applicable, the depth can be specified using a numerical value and its unit of measurement The unit of measurement shall be specified in accordance with ISO 11240 and the resulting terminology The symbol and the symbol identifier shall be used.
     */
    depth?: Quantity;
    /**
     * Where applicable, the weight can be specified using a numerical value and its unit of measurement The unit of measurement shall be specified in accordance with ISO 11240 and the resulting terminology The symbol and the symbol identifier shall be used.
     */
    weight?: Quantity;
    /**
     * Where applicable, the nominal volume can be specified using a numerical value and its unit of measurement The unit of measurement shall be specified in accordance with ISO 11240 and the resulting terminology The symbol and the symbol identifier shall be used.
     */
    nominalVolume?: Quantity;
    /**
     * Where applicable, the external diameter can be specified using a numerical value and its unit of measurement The unit of measurement shall be specified in accordance with ISO 11240 and the resulting terminology The symbol and the symbol identifier shall be used.
     */
    externalDiameter?: Quantity;
    /**
     * Where applicable, the shape can be specified An appropriate controlled vocabulary shall be used The term and the term identifier shall be used.
     */
    shape?: string;
    /**
     * Contains extension information for property 'shape'.
     */
    _shape?: Element;
    /**
     * Where applicable, the color can be specified An appropriate controlled vocabulary shall be used The term and the term identifier shall be used.
     */
    color?: string[];
    /**
     * Contains extension information for property 'color'.
     */
    _color?: Element[];
    /**
     * Where applicable, the imprint can be specified as text.
     */
    imprint?: string[];
    /**
     * Contains extension information for property 'imprint'.
     */
    _imprint?: Element[];
    /**
     * Where applicable, the image can be provided The format of the image attachment shall be specified by regional implementations.
     */
    image?: Attachment[];
    /**
     * Where applicable, the scoring can be specified An appropriate controlled vocabulary shall be used The term and the term identifier shall be used.
     */
    scoring?: CodeableConcept;
}
/**
 * The shelf-life and storage information for a medicinal product item or container can be described using this class.
 */
export interface ProductShelfLife {
    /**
     * Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
     */
    id?: string;
    /**
     * Contains extension information for property 'id'.
     */
    _id?: Element;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * Unique identifier for the packaged Medicinal Product.
     */
    identifier?: Identifier;
    /**
     * This describes the shelf life, taking into account various scenarios such as shelf life of the packaged Medicinal Product itself, shelf life after transformation where necessary and shelf life after the first opening of a bottle, etc. The shelf life type shall be specified using an appropriate controlled vocabulary The controlled term and the controlled term identifier shall be specified.
     */
    type: CodeableConcept;
    /**
     * The shelf life time period can be specified using a numerical value for the period of time and its unit of time measurement The unit of measurement shall be specified in accordance with ISO 11240 and the resulting terminology The symbol and the symbol identifier shall be used.
     */
    period: Quantity;
    /**
     * Special precautions for storage, if any, can be specified using an appropriate controlled vocabulary The controlled term and the controlled term identifier shall be specified.
     */
    specialPrecautionsForStorage?: CodeableConcept[];
}
/**
 * Provenance of a resource is a record that describes entities and processes involved in producing and delivering or otherwise influencing that resource. Provenance provides a critical foundation for assessing authenticity, enabling trust, and allowing reproducibility. Provenance assertions are a form of contextual metadata and can themselves become important records with their own provenance. Provenance statement indicates clinical significance in terms of confidence in authenticity, reliability, and trustworthiness, integrity, and stage in lifecycle (e.g. Document Completion - has the artifact been legally authenticated), all of which may impact security, privacy, and trust policies.
 */
export interface Provenance {
    /**
     * The type of the resource.
     */
    resourceType: string;
    /**
     * The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes.
     */
    id?: id;
    /**
     * Contains extension information for property 'id'.
     */
    _id?: Element;
    /**
     * The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource.
     */
    meta?: Meta;
    /**
     * A reference to a set of rules that were followed when the resource was constructed, and which must be understood when processing the content. Often, this is a reference to an implementation guide that defines the special rules along with other profiles etc.
     */
    implicitRules?: uri;
    /**
     * Contains extension information for property 'implicitRules'.
     */
    _implicitRules?: Element;
    /**
     * The base language in which the resource is written.
     */
    language?: code;
    /**
     * Contains extension information for property 'language'.
     */
    _language?: Element;
    /**
     * A human-readable narrative that contains a summary of the resource and can be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it "clinically safe" for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety.
     */
    text?: Narrative;
    /**
     * These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, and nor can they have their own independent transaction scope.
     */
    contained?: Resource[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * The Reference(s) that were generated or updated by  the activity described in this resource. A provenance can point to more than one target if multiple resources were created/updated by the same activity.
     */
    target: Reference[];
    /**
     * The period during which the activity occurred.
     */
    occurredPeriod?: Period;
    /**
     * The period during which the activity occurred.
     */
    occurredDateTime?: dateTime;
    /**
     * Contains extension information for property 'occurredDateTime'.
     */
    _occurredDateTime?: Element;
    /**
     * The instant of time at which the activity was recorded.
     */
    recorded: instant;
    /**
     * Contains extension information for property 'recorded'.
     */
    _recorded?: Element;
    /**
     * Policy or plan the activity was defined by. Typically, a single activity may have multiple applicable policy documents, such as patient consent, guarantor funding, etc.
     */
    policy?: uri[];
    /**
     * Contains extension information for property 'policy'.
     */
    _policy?: Element[];
    /**
     * Where the activity occurred, if relevant.
     */
    location?: Reference;
    /**
     * The reason that the activity was taking place.
     */
    reason?: CodeableConcept[];
    /**
     * An activity is something that occurs over a period of time and acts upon or with entities; it may include consuming, processing, transforming, modifying, relocating, using, or generating entities.
     */
    activity?: CodeableConcept;
    /**
     * An actor taking a role in an activity  for which it can be assigned some degree of responsibility for the activity taking place.
     */
    agent: ProvenanceAgent[];
    /**
     * An entity used in this activity.
     */
    entity?: ProvenanceEntity[];
    /**
     * A digital signature on the target Reference(s). The signer should match a Provenance.agent. The purpose of the signature is indicated.
     */
    signature?: Signature[];
}
/**
 * An actor taking a role in an activity  for which it can be assigned some degree of responsibility for the activity taking place.
 */
export interface ProvenanceAgent {
    /**
     * Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
     */
    id?: string;
    /**
     * Contains extension information for property 'id'.
     */
    _id?: Element;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * The participation the agent had with respect to the activity.
     */
    type?: CodeableConcept;
    /**
     * The function of the agent with respect to the activity. The security role enabling the agent with respect to the activity.
     */
    role?: CodeableConcept[];
    /**
     * The individual, device or organization that participated in the event.
     */
    who: Reference;
    /**
     * The individual, device, or organization for whom the change was made.
     */
    onBehalfOf?: Reference;
}
/**
 * An entity used in this activity.
 */
export interface ProvenanceEntity {
    /**
     * Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
     */
    id?: string;
    /**
     * Contains extension information for property 'id'.
     */
    _id?: Element;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * How the entity was used during the activity.
     */
    role: code;
    /**
     * Contains extension information for property 'role'.
     */
    _role?: Element;
    /**
     * Identity of the  Entity used. May be a logical or physical uri and maybe absolute or relative.
     */
    what: Reference;
    /**
     * The entity is attributed to an agent to express the agent's responsibility for that entity, possibly along with other agents. This description can be understood as shorthand for saying that the agent was responsible for the activity which generated the entity.
     */
    agent?: ProvenanceAgent[];
}
/**
 * A measured amount (or an amount that can potentially be measured). Note that measured amounts include amounts that are not precisely quantified, including amounts involving arbitrary units and floating currencies.
 */
export interface Quantity {
    /**
     * Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
     */
    id?: string;
    /**
     * Contains extension information for property 'id'.
     */
    _id?: Element;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * The value of the measured amount. The value includes an implicit precision in the presentation of the value.
     */
    value?: decimal;
    /**
     * Contains extension information for property 'value'.
     */
    _value?: Element;
    /**
     * How the value should be understood and represented - whether the actual value is greater or less than the stated value due to measurement issues; e.g. if the comparator is "<" , then the real value is < stated value.
     */
    comparator?: code;
    /**
     * Contains extension information for property 'comparator'.
     */
    _comparator?: Element;
    /**
     * A human-readable form of the unit.
     */
    unit?: string;
    /**
     * Contains extension information for property 'unit'.
     */
    _unit?: Element;
    /**
     * The identification of the system that provides the coded form of the unit.
     */
    system?: uri;
    /**
     * Contains extension information for property 'system'.
     */
    _system?: Element;
    /**
     * A computer processable form of the unit in some unit representation system.
     */
    code?: code;
    /**
     * Contains extension information for property 'code'.
     */
    _code?: Element;
}
/**
 * A structured set of questions intended to guide the collection of answers from end-users. Questionnaires provide detailed control over order, presentation, phraseology and grouping to allow coherent, consistent data collection.
 */
export interface Questionnaire {
    /**
     * The type of the resource.
     */
    resourceType: string;
    /**
     * The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes.
     */
    id?: id;
    /**
     * Contains extension information for property 'id'.
     */
    _id?: Element;
    /**
     * The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource.
     */
    meta?: Meta;
    /**
     * A reference to a set of rules that were followed when the resource was constructed, and which must be understood when processing the content. Often, this is a reference to an implementation guide that defines the special rules along with other profiles etc.
     */
    implicitRules?: uri;
    /**
     * Contains extension information for property 'implicitRules'.
     */
    _implicitRules?: Element;
    /**
     * The base language in which the resource is written.
     */
    language?: code;
    /**
     * Contains extension information for property 'language'.
     */
    _language?: Element;
    /**
     * A human-readable narrative that contains a summary of the resource and can be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it "clinically safe" for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety.
     */
    text?: Narrative;
    /**
     * These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, and nor can they have their own independent transaction scope.
     */
    contained?: Resource[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * An absolute URI that is used to identify this questionnaire when it is referenced in a specification, model, design or an instance; also called its canonical identifier. This SHOULD be globally unique and SHOULD be a literal address at which at which an authoritative instance of this questionnaire is (or will be) published. This URL can be the target of a canonical reference. It SHALL remain the same when the questionnaire is stored on different servers.
     */
    url?: uri;
    /**
     * Contains extension information for property 'url'.
     */
    _url?: Element;
    /**
     * A formal identifier that is used to identify this questionnaire when it is represented in other formats, or referenced in a specification, model, design or an instance.
     */
    identifier?: Identifier[];
    /**
     * The identifier that is used to identify this version of the questionnaire when it is referenced in a specification, model, design or instance. This is an arbitrary value managed by the questionnaire author and is not expected to be globally unique. For example, it might be a timestamp (e.g. yyyymmdd) if a managed version is not available. There is also no expectation that versions can be placed in a lexicographical sequence.
     */
    version?: string;
    /**
     * Contains extension information for property 'version'.
     */
    _version?: Element;
    /**
     * A natural language name identifying the questionnaire. This name should be usable as an identifier for the module by machine processing applications such as code generation.
     */
    name?: string;
    /**
     * Contains extension information for property 'name'.
     */
    _name?: Element;
    /**
     * A short, descriptive, user-friendly title for the questionnaire.
     */
    title?: string;
    /**
     * Contains extension information for property 'title'.
     */
    _title?: Element;
    /**
     * The URL of a Questionnaire that this Questionnaire is based on.
     */
    derivedFrom?: canonical[];
    /**
     * The status of this questionnaire. Enables tracking the life-cycle of the content.
     */
    status: code;
    /**
     * Contains extension information for property 'status'.
     */
    _status?: Element;
    /**
     * A Boolean value to indicate that this questionnaire is authored for testing purposes (or education/evaluation/marketing) and is not intended to be used for genuine usage.
     */
    experimental?: boolean;
    /**
     * Contains extension information for property 'experimental'.
     */
    _experimental?: Element;
    /**
     * The types of subjects that can be the subject of responses created for the questionnaire.
     */
    subjectType?: code[];
    /**
     * Contains extension information for property 'subjectType'.
     */
    _subjectType?: Element[];
    /**
     * The date  (and optionally time) when the questionnaire was published. The date must change when the business version changes and it must change if the status code changes. In addition, it should change when the substantive content of the questionnaire changes.
     */
    date?: dateTime;
    /**
     * Contains extension information for property 'date'.
     */
    _date?: Element;
    /**
     * The name of the organization or individual that published the questionnaire.
     */
    publisher?: string;
    /**
     * Contains extension information for property 'publisher'.
     */
    _publisher?: Element;
    /**
     * Contact details to assist a user in finding and communicating with the publisher.
     */
    contact?: ContactDetail[];
    /**
     * A free text natural language description of the questionnaire from a consumer's perspective.
     */
    description?: markdown;
    /**
     * Contains extension information for property 'description'.
     */
    _description?: Element;
    /**
     * The content was developed with a focus and intent of supporting the contexts that are listed. These contexts may be general categories (gender, age, ...) or may be references to specific programs (insurance plans, studies, ...) and may be used to assist with indexing and searching for appropriate questionnaire instances.
     */
    useContext?: UsageContext[];
    /**
     * A legal or geographic region in which the questionnaire is intended to be used.
     */
    jurisdiction?: CodeableConcept[];
    /**
     * Explanation of why this questionnaire is needed and why it has been designed as it has.
     */
    purpose?: markdown;
    /**
     * Contains extension information for property 'purpose'.
     */
    _purpose?: Element;
    /**
     * A copyright statement relating to the questionnaire and/or its contents. Copyright statements are generally legal restrictions on the use and publishing of the questionnaire.
     */
    copyright?: markdown;
    /**
     * Contains extension information for property 'copyright'.
     */
    _copyright?: Element;
    /**
     * The date on which the resource content was approved by the publisher. Approval happens once when the content is officially approved for usage.
     */
    approvalDate?: date;
    /**
     * Contains extension information for property 'approvalDate'.
     */
    _approvalDate?: Element;
    /**
     * The date on which the resource content was last reviewed. Review happens periodically after approval but does not change the original approval date.
     */
    lastReviewDate?: date;
    /**
     * Contains extension information for property 'lastReviewDate'.
     */
    _lastReviewDate?: Element;
    /**
     * The period during which the questionnaire content was or is planned to be in active use.
     */
    effectivePeriod?: Period;
    /**
     * An identifier for this question or group of questions in a particular terminology such as LOINC.
     */
    code?: Coding[];
    /**
     * A particular question, question grouping or display text that is part of the questionnaire.
     */
    item?: QuestionnaireItem[];
}
/**
 * A particular question, question grouping or display text that is part of the questionnaire.
 */
export interface QuestionnaireItem {
    /**
     * Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
     */
    id?: string;
    /**
     * Contains extension information for property 'id'.
     */
    _id?: Element;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * An identifier that is unique within the Questionnaire allowing linkage to the equivalent item in a QuestionnaireResponse resource.
     */
    linkId: string;
    /**
     * Contains extension information for property 'linkId'.
     */
    _linkId?: Element;
    /**
     * This element is a URI that refers to an [ElementDefinition](elementdefinition.html) that provides information about this item, including information that might otherwise be included in the instance of the Questionnaire resource. A detailed description of the construction of the URI is shown in Comments, below. If this element is present then the following element values MAY be derived from the Element Definition if the corresponding elements of this Questionnaire resource instance have no value:* code (ElementDefinition.code) * type (ElementDefinition.type) * required (ElementDefinition.min) * repeats (ElementDefinition.max) * maxLength (ElementDefinition.maxLength) * answerValueSet (ElementDefinition.binding)* options (ElementDefinition.binding).
     */
    definition?: uri;
    /**
     * Contains extension information for property 'definition'.
     */
    _definition?: Element;
    /**
     * A terminology code that corresponds to this group or question (e.g. a code from LOINC, which defines many questions and answers).
     */
    code?: Coding[];
    /**
     * A short label for a particular group, question or set of display text within the questionnaire used for reference by the individual completing the questionnaire.
     */
    prefix?: string;
    /**
     * Contains extension information for property 'prefix'.
     */
    _prefix?: Element;
    /**
     * The name of a section, the text of a question or text content for a display item.
     */
    text?: string;
    /**
     * Contains extension information for property 'text'.
     */
    _text?: Element;
    /**
     * The type of questionnaire item this is - whether text for display, a grouping of other items or a particular type of data to be captured (string, integer, coded choice, etc.).
     */
    type: code;
    /**
     * Contains extension information for property 'type'.
     */
    _type?: Element;
    /**
     * A constraint indicating that this item should only be enabled (displayed/allow answers to be captured) when the specified condition is true.
     */
    enableWhen?: QuestionnaireItemEnableWhen[];
    /**
     * Controls how multiple enableWhen values are interpreted -  whether all or any must be true.
     */
    enableBehavior?: code;
    /**
     * Contains extension information for property 'enableBehavior'.
     */
    _enableBehavior?: Element;
    /**
     * An indication, if true, that the item must be present in a "completed" QuestionnaireResponse.  If false, the item may be skipped when answering the questionnaire.
     */
    required?: boolean;
    /**
     * Contains extension information for property 'required'.
     */
    _required?: Element;
    /**
     * An indication, if true, that the item may occur multiple times in the response, collecting multiple answers for questions or multiple sets of answers for groups.
     */
    repeats?: boolean;
    /**
     * Contains extension information for property 'repeats'.
     */
    _repeats?: Element;
    /**
     * An indication, when true, that the value cannot be changed by a human respondent to the Questionnaire.
     */
    readOnly?: boolean;
    /**
     * Contains extension information for property 'readOnly'.
     */
    _readOnly?: Element;
    /**
     * The maximum number of characters that are permitted in the answer to be considered a "valid" QuestionnaireResponse.
     */
    maxLength?: integer;
    /**
     * Contains extension information for property 'maxLength'.
     */
    _maxLength?: Element;
    /**
     * A reference to a value set containing a list of codes representing permitted answers for a "choice" or "open-choice" question.
     */
    answerValueSet?: canonical;
    /**
     * One of the permitted answers for a "choice" or "open-choice" question.
     */
    answerOption?: QuestionnaireItemAnswerOption[];
    /**
     * One or more values that should be pre-populated in the answer when initially rendering the questionnaire for user input.
     */
    initial?: QuestionnaireItemInitial[];
    /**
     * Text, questions and other groups to be nested beneath a question or group.
     */
    item?: QuestionnaireItem[];
}
/**
 * A constraint indicating that this item should only be enabled (displayed/allow answers to be captured) when the specified condition is true.
 */
export interface QuestionnaireItemEnableWhen {
    /**
     * Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
     */
    id?: string;
    /**
     * Contains extension information for property 'id'.
     */
    _id?: Element;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * The linkId for the question whose answer (or lack of answer) governs whether this item is enabled.
     */
    question: string;
    /**
     * Contains extension information for property 'question'.
     */
    _question?: Element;
    /**
     * Specifies the criteria by which the question is enabled.
     */
    operator: code;
    /**
     * Contains extension information for property 'operator'.
     */
    _operator?: Element;
    /**
     * A value that the referenced question is tested using the specified operator in order for the item to be enabled.
     */
    answerBoolean?: boolean;
    /**
     * Contains extension information for property 'answerBoolean'.
     */
    _answerBoolean?: Element;
    /**
     * A value that the referenced question is tested using the specified operator in order for the item to be enabled.
     */
    answerDecimal?: decimal;
    /**
     * Contains extension information for property 'answerDecimal'.
     */
    _answerDecimal?: Element;
    /**
     * A value that the referenced question is tested using the specified operator in order for the item to be enabled.
     */
    answerInteger?: integer;
    /**
     * Contains extension information for property 'answerInteger'.
     */
    _answerInteger?: Element;
    /**
     * A value that the referenced question is tested using the specified operator in order for the item to be enabled.
     */
    answerDate?: date;
    /**
     * Contains extension information for property 'answerDate'.
     */
    _answerDate?: Element;
    /**
     * A value that the referenced question is tested using the specified operator in order for the item to be enabled.
     */
    answerDateTime?: dateTime;
    /**
     * Contains extension information for property 'answerDateTime'.
     */
    _answerDateTime?: Element;
    /**
     * A value that the referenced question is tested using the specified operator in order for the item to be enabled.
     */
    answerTime?: time;
    /**
     * Contains extension information for property 'answerTime'.
     */
    _answerTime?: Element;
    /**
     * A value that the referenced question is tested using the specified operator in order for the item to be enabled.
     */
    answerString?: string;
    /**
     * Contains extension information for property 'answerString'.
     */
    _answerString?: Element;
    /**
     * A value that the referenced question is tested using the specified operator in order for the item to be enabled.
     */
    answerCoding?: Coding;
    /**
     * A value that the referenced question is tested using the specified operator in order for the item to be enabled.
     */
    answerQuantity?: Quantity;
    /**
     * A value that the referenced question is tested using the specified operator in order for the item to be enabled.
     */
    answerReference?: Reference;
}
/**
 * One of the permitted answers for a "choice" or "open-choice" question.
 */
export interface QuestionnaireItemAnswerOption {
    /**
     * Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
     */
    id?: string;
    /**
     * Contains extension information for property 'id'.
     */
    _id?: Element;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * A potential answer that's allowed as the answer to this question.
     */
    valueInteger?: integer;
    /**
     * Contains extension information for property 'valueInteger'.
     */
    _valueInteger?: Element;
    /**
     * A potential answer that's allowed as the answer to this question.
     */
    valueDate?: date;
    /**
     * Contains extension information for property 'valueDate'.
     */
    _valueDate?: Element;
    /**
     * A potential answer that's allowed as the answer to this question.
     */
    valueTime?: time;
    /**
     * Contains extension information for property 'valueTime'.
     */
    _valueTime?: Element;
    /**
     * A potential answer that's allowed as the answer to this question.
     */
    valueString?: string;
    /**
     * Contains extension information for property 'valueString'.
     */
    _valueString?: Element;
    /**
     * A potential answer that's allowed as the answer to this question.
     */
    valueCoding?: Coding;
    /**
     * A potential answer that's allowed as the answer to this question.
     */
    valueReference?: Reference;
    /**
     * Indicates whether the answer value is selected when the list of possible answers is initially shown.
     */
    initialSelected?: boolean;
    /**
     * Contains extension information for property 'initialSelected'.
     */
    _initialSelected?: Element;
}
/**
 * One or more values that should be pre-populated in the answer when initially rendering the questionnaire for user input.
 */
export interface QuestionnaireItemInitial {
    /**
     * Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
     */
    id?: string;
    /**
     * Contains extension information for property 'id'.
     */
    _id?: Element;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * The actual value to for an initial answer.
     */
    valueBoolean: boolean;
    /**
     * Contains extension information for property 'valueBoolean'.
     */
    _valueBoolean?: Element;
    /**
     * The actual value to for an initial answer.
     */
    valueDecimal: decimal;
    /**
     * Contains extension information for property 'valueDecimal'.
     */
    _valueDecimal?: Element;
    /**
     * The actual value to for an initial answer.
     */
    valueInteger: integer;
    /**
     * Contains extension information for property 'valueInteger'.
     */
    _valueInteger?: Element;
    /**
     * The actual value to for an initial answer.
     */
    valueDate: date;
    /**
     * Contains extension information for property 'valueDate'.
     */
    _valueDate?: Element;
    /**
     * The actual value to for an initial answer.
     */
    valueDateTime: dateTime;
    /**
     * Contains extension information for property 'valueDateTime'.
     */
    _valueDateTime?: Element;
    /**
     * The actual value to for an initial answer.
     */
    valueTime: time;
    /**
     * Contains extension information for property 'valueTime'.
     */
    _valueTime?: Element;
    /**
     * The actual value to for an initial answer.
     */
    valueString: string;
    /**
     * Contains extension information for property 'valueString'.
     */
    _valueString?: Element;
    /**
     * The actual value to for an initial answer.
     */
    valueUri: uri;
    /**
     * Contains extension information for property 'valueUri'.
     */
    _valueUri?: Element;
    /**
     * The actual value to for an initial answer.
     */
    valueAttachment: Attachment;
    /**
     * The actual value to for an initial answer.
     */
    valueCoding: Coding;
    /**
     * The actual value to for an initial answer.
     */
    valueQuantity: Quantity;
    /**
     * The actual value to for an initial answer.
     */
    valueReference: Reference;
}
/**
 * A structured set of questions and their answers. The questions are ordered and grouped into coherent subsets, corresponding to the structure of the grouping of the questionnaire being responded to.
 */
export interface QuestionnaireResponse {
    /**
     * The type of the resource.
     */
    resourceType: string;
    /**
     * The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes.
     */
    id?: id;
    /**
     * Contains extension information for property 'id'.
     */
    _id?: Element;
    /**
     * The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource.
     */
    meta?: Meta;
    /**
     * A reference to a set of rules that were followed when the resource was constructed, and which must be understood when processing the content. Often, this is a reference to an implementation guide that defines the special rules along with other profiles etc.
     */
    implicitRules?: uri;
    /**
     * Contains extension information for property 'implicitRules'.
     */
    _implicitRules?: Element;
    /**
     * The base language in which the resource is written.
     */
    language?: code;
    /**
     * Contains extension information for property 'language'.
     */
    _language?: Element;
    /**
     * A human-readable narrative that contains a summary of the resource and can be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it "clinically safe" for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety.
     */
    text?: Narrative;
    /**
     * These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, and nor can they have their own independent transaction scope.
     */
    contained?: Resource[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * A business identifier assigned to a particular completed (or partially completed) questionnaire.
     */
    identifier?: Identifier;
    /**
     * The order, proposal or plan that is fulfilled in whole or in part by this QuestionnaireResponse.  For example, a ServiceRequest seeking an intake assessment or a decision support recommendation to assess for post-partum depression.
     */
    basedOn?: Reference[];
    /**
     * A procedure or observation that this questionnaire was performed as part of the execution of.  For example, the surgery a checklist was executed as part of.
     */
    partOf?: Reference[];
    /**
     * The Questionnaire that defines and organizes the questions for which answers are being provided.
     */
    questionnaire?: canonical;
    /**
     * The position of the questionnaire response within its overall lifecycle.
     */
    status: code;
    /**
     * Contains extension information for property 'status'.
     */
    _status?: Element;
    /**
     * The subject of the questionnaire response.  This could be a patient, organization, practitioner, device, etc.  This is who/what the answers apply to, but is not necessarily the source of information.
     */
    subject?: Reference;
    /**
     * The Encounter during which this questionnaire response was created or to which the creation of this record is tightly associated.
     */
    encounter?: Reference;
    /**
     * The date and/or time that this set of answers were last changed.
     */
    authored?: dateTime;
    /**
     * Contains extension information for property 'authored'.
     */
    _authored?: Element;
    /**
     * Person who received the answers to the questions in the QuestionnaireResponse and recorded them in the system.
     */
    author?: Reference;
    /**
     * The person who answered the questions about the subject.
     */
    source?: Reference;
    /**
     * A group or question item from the original questionnaire for which answers are provided.
     */
    item?: QuestionnaireResponseItem[];
}
/**
 * A group or question item from the original questionnaire for which answers are provided.
 */
export interface QuestionnaireResponseItem {
    /**
     * Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
     */
    id?: string;
    /**
     * Contains extension information for property 'id'.
     */
    _id?: Element;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * The item from the Questionnaire that corresponds to this item in the QuestionnaireResponse resource.
     */
    linkId: string;
    /**
     * Contains extension information for property 'linkId'.
     */
    _linkId?: Element;
    /**
     * A reference to an [ElementDefinition](elementdefinition.html) that provides the details for the item.
     */
    definition?: uri;
    /**
     * Contains extension information for property 'definition'.
     */
    _definition?: Element;
    /**
     * Text that is displayed above the contents of the group or as the text of the question being answered.
     */
    text?: string;
    /**
     * Contains extension information for property 'text'.
     */
    _text?: Element;
    /**
     * The respondent's answer(s) to the question.
     */
    answer?: QuestionnaireResponseItemAnswer[];
    /**
     * Questions or sub-groups nested beneath a question or group.
     */
    item?: QuestionnaireResponseItem[];
}
/**
 * The respondent's answer(s) to the question.
 */
export interface QuestionnaireResponseItemAnswer {
    /**
     * Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
     */
    id?: string;
    /**
     * Contains extension information for property 'id'.
     */
    _id?: Element;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * The answer (or one of the answers) provided by the respondent to the question.
     */
    valueBoolean?: boolean;
    /**
     * Contains extension information for property 'valueBoolean'.
     */
    _valueBoolean?: Element;
    /**
     * The answer (or one of the answers) provided by the respondent to the question.
     */
    valueDecimal?: decimal;
    /**
     * Contains extension information for property 'valueDecimal'.
     */
    _valueDecimal?: Element;
    /**
     * The answer (or one of the answers) provided by the respondent to the question.
     */
    valueInteger?: integer;
    /**
     * Contains extension information for property 'valueInteger'.
     */
    _valueInteger?: Element;
    /**
     * The answer (or one of the answers) provided by the respondent to the question.
     */
    valueDate?: date;
    /**
     * Contains extension information for property 'valueDate'.
     */
    _valueDate?: Element;
    /**
     * The answer (or one of the answers) provided by the respondent to the question.
     */
    valueDateTime?: dateTime;
    /**
     * Contains extension information for property 'valueDateTime'.
     */
    _valueDateTime?: Element;
    /**
     * The answer (or one of the answers) provided by the respondent to the question.
     */
    valueTime?: time;
    /**
     * Contains extension information for property 'valueTime'.
     */
    _valueTime?: Element;
    /**
     * The answer (or one of the answers) provided by the respondent to the question.
     */
    valueString?: string;
    /**
     * Contains extension information for property 'valueString'.
     */
    _valueString?: Element;
    /**
     * The answer (or one of the answers) provided by the respondent to the question.
     */
    valueUri?: uri;
    /**
     * Contains extension information for property 'valueUri'.
     */
    _valueUri?: Element;
    /**
     * The answer (or one of the answers) provided by the respondent to the question.
     */
    valueAttachment?: Attachment;
    /**
     * The answer (or one of the answers) provided by the respondent to the question.
     */
    valueCoding?: Coding;
    /**
     * The answer (or one of the answers) provided by the respondent to the question.
     */
    valueQuantity?: Quantity;
    /**
     * The answer (or one of the answers) provided by the respondent to the question.
     */
    valueReference?: Reference;
    /**
     * Nested groups and/or questions found within this particular answer.
     */
    item?: QuestionnaireResponseItem[];
}
/**
 * A set of ordered Quantities defined by a low and high limit.
 */
export interface Range {
    /**
     * Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
     */
    id?: string;
    /**
     * Contains extension information for property 'id'.
     */
    _id?: Element;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * The low limit. The boundary is inclusive.
     */
    low?: Quantity;
    /**
     * The high limit. The boundary is inclusive.
     */
    high?: Quantity;
}
/**
 * A relationship of two Quantity values - expressed as a numerator and a denominator.
 */
export interface Ratio {
    /**
     * Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
     */
    id?: string;
    /**
     * Contains extension information for property 'id'.
     */
    _id?: Element;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * The value of the numerator.
     */
    numerator?: Quantity;
    /**
     * The value of the denominator.
     */
    denominator?: Quantity;
}
/**
 * A reference from one resource to another.
 */
export interface Reference {
    /**
     * Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
     */
    id?: string;
    /**
     * Contains extension information for property 'id'.
     */
    _id?: Element;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * A reference to a location at which the other resource is found. The reference may be a relative reference, in which case it is relative to the service base URL, or an absolute URL that resolves to the location where the resource is found. The reference may be version specific or not. If the reference is not to a FHIR RESTful server, then it should be assumed to be version specific. Internal fragment references (start with '#') refer to contained resources.
     */
    reference?: string;
    /**
     * Contains extension information for property 'reference'.
     */
    _reference?: Element;
    /**
     * The expected type of the target of the reference. If both Reference.type and Reference.reference are populated and Reference.reference is a FHIR URL, both SHALL be consistent.The type is the Canonical URL of Resource Definition that is the type this reference refers to. References are URLs that are relative to http://hl7.org/fhir/StructureDefinition/ e.g. "Patient" is a reference to http://hl7.org/fhir/StructureDefinition/Patient. Absolute URLs are only allowed for logical models (and can only be used in references in logical models, not resources).
     */
    type?: uri;
    /**
     * Contains extension information for property 'type'.
     */
    _type?: Element;
    /**
     * An identifier for the target resource. This is used when there is no way to reference the other resource directly, either because the entity it represents is not available through a FHIR server, or because there is no way for the author of the resource to convert a known identifier to an actual location. There is no requirement that a Reference.identifier point to something that is actually exposed as a FHIR instance, but it SHALL point to a business concept that would be expected to be exposed as a FHIR instance, and that instance would need to be of a FHIR resource type allowed by the reference.
     */
    identifier?: Identifier;
    /**
     * Plain text narrative that identifies the resource in addition to the resource reference.
     */
    display?: string;
    /**
     * Contains extension information for property 'display'.
     */
    _display?: Element;
}
/**
 * Related artifacts such as additional documentation, justification, or bibliographic references.
 */
export interface RelatedArtifact {
    /**
     * Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
     */
    id?: string;
    /**
     * Contains extension information for property 'id'.
     */
    _id?: Element;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * The type of relationship to the related artifact.
     */
    type: code;
    /**
     * Contains extension information for property 'type'.
     */
    _type?: Element;
    /**
     * A short label that can be used to reference the citation from elsewhere in the containing artifact, such as a footnote index.
     */
    label?: string;
    /**
     * Contains extension information for property 'label'.
     */
    _label?: Element;
    /**
     * A brief description of the document or knowledge resource being referenced, suitable for display to a consumer.
     */
    display?: string;
    /**
     * Contains extension information for property 'display'.
     */
    _display?: Element;
    /**
     * A bibliographic citation for the related artifact. This text SHOULD be formatted according to an accepted citation format.
     */
    citation?: markdown;
    /**
     * Contains extension information for property 'citation'.
     */
    _citation?: Element;
    /**
     * A url for the artifact that can be followed to access the actual content.
     */
    url?: url;
    /**
     * The document being referenced, represented as an attachment. This is exclusive with the resource element.
     */
    document?: Attachment;
    /**
     * The related resource, such as a library, value set, profile, or other knowledge resource.
     */
    resource?: canonical;
}
/**
 * Information about a person that is involved in the care for a patient, but who is not the target of healthcare, nor has a formal responsibility in the care process.
 */
export interface RelatedPerson {
    /**
     * The type of the resource.
     */
    resourceType: string;
    /**
     * The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes.
     */
    id?: id;
    /**
     * Contains extension information for property 'id'.
     */
    _id?: Element;
    /**
     * The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource.
     */
    meta?: Meta;
    /**
     * A reference to a set of rules that were followed when the resource was constructed, and which must be understood when processing the content. Often, this is a reference to an implementation guide that defines the special rules along with other profiles etc.
     */
    implicitRules?: uri;
    /**
     * Contains extension information for property 'implicitRules'.
     */
    _implicitRules?: Element;
    /**
     * The base language in which the resource is written.
     */
    language?: code;
    /**
     * Contains extension information for property 'language'.
     */
    _language?: Element;
    /**
     * A human-readable narrative that contains a summary of the resource and can be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it "clinically safe" for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety.
     */
    text?: Narrative;
    /**
     * These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, and nor can they have their own independent transaction scope.
     */
    contained?: Resource[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * Identifier for a person within a particular scope.
     */
    identifier?: Identifier[];
    /**
     * Whether this related person record is in active use.
     */
    active?: boolean;
    /**
     * Contains extension information for property 'active'.
     */
    _active?: Element;
    /**
     * The patient this person is related to.
     */
    patient: Reference;
    /**
     * The nature of the relationship between a patient and the related person.
     */
    relationship?: CodeableConcept[];
    /**
     * A name associated with the person.
     */
    name?: HumanName[];
    /**
     * A contact detail for the person, e.g. a telephone number or an email address.
     */
    telecom?: ContactPoint[];
    /**
     * Administrative Gender - the gender that the person is considered to have for administration and record keeping purposes.
     */
    gender?: code;
    /**
     * Contains extension information for property 'gender'.
     */
    _gender?: Element;
    /**
     * The date on which the related person was born.
     */
    birthDate?: date;
    /**
     * Contains extension information for property 'birthDate'.
     */
    _birthDate?: Element;
    /**
     * Address where the related person can be contacted or visited.
     */
    address?: Address[];
    /**
     * Image of the person.
     */
    photo?: Attachment[];
    /**
     * The period of time during which this relationship is or was active. If there are no dates defined, then the interval is unknown.
     */
    period?: Period;
    /**
     * A language which may be used to communicate with about the patient's health.
     */
    communication?: RelatedPersonCommunication[];
}
/**
 * A language which may be used to communicate with about the patient's health.
 */
export interface RelatedPersonCommunication {
    /**
     * Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
     */
    id?: string;
    /**
     * Contains extension information for property 'id'.
     */
    _id?: Element;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * The ISO-639-1 alpha 2 code in lower case for the language, optionally followed by a hyphen and the ISO-3166-1 alpha 2 code for the region in upper case; e.g. "en" for English, or "en-US" for American English versus "en-EN" for England English.
     */
    language: CodeableConcept;
    /**
     * Indicates whether or not the patient prefers this language (over other languages he masters up a certain level).
     */
    preferred?: boolean;
    /**
     * Contains extension information for property 'preferred'.
     */
    _preferred?: Element;
}
/**
 * A group of related requests that can be used to capture intended activities that have inter-dependencies such as "give this medication after that one".
 */
export interface RequestGroup {
    /**
     * The type of the resource.
     */
    resourceType: string;
    /**
     * The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes.
     */
    id?: id;
    /**
     * Contains extension information for property 'id'.
     */
    _id?: Element;
    /**
     * The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource.
     */
    meta?: Meta;
    /**
     * A reference to a set of rules that were followed when the resource was constructed, and which must be understood when processing the content. Often, this is a reference to an implementation guide that defines the special rules along with other profiles etc.
     */
    implicitRules?: uri;
    /**
     * Contains extension information for property 'implicitRules'.
     */
    _implicitRules?: Element;
    /**
     * The base language in which the resource is written.
     */
    language?: code;
    /**
     * Contains extension information for property 'language'.
     */
    _language?: Element;
    /**
     * A human-readable narrative that contains a summary of the resource and can be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it "clinically safe" for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety.
     */
    text?: Narrative;
    /**
     * These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, and nor can they have their own independent transaction scope.
     */
    contained?: Resource[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * Allows a service to provide a unique, business identifier for the request.
     */
    identifier?: Identifier[];
    /**
     * A canonical URL referencing a FHIR-defined protocol, guideline, orderset or other definition that is adhered to in whole or in part by this request.
     */
    instantiatesCanonical?: canonical[];
    /**
     * A URL referencing an externally defined protocol, guideline, orderset or other definition that is adhered to in whole or in part by this request.
     */
    instantiatesUri?: uri[];
    /**
     * Contains extension information for property 'instantiatesUri'.
     */
    _instantiatesUri?: Element[];
    /**
     * A plan, proposal or order that is fulfilled in whole or in part by this request.
     */
    basedOn?: Reference[];
    /**
     * Completed or terminated request(s) whose function is taken by this new request.
     */
    replaces?: Reference[];
    /**
     * A shared identifier common to all requests that were authorized more or less simultaneously by a single author, representing the identifier of the requisition, prescription or similar form.
     */
    groupIdentifier?: Identifier;
    /**
     * The current state of the request. For request groups, the status reflects the status of all the requests in the group.
     */
    status: code;
    /**
     * Contains extension information for property 'status'.
     */
    _status?: Element;
    /**
     * Indicates the level of authority/intentionality associated with the request and where the request fits into the workflow chain.
     */
    intent: code;
    /**
     * Contains extension information for property 'intent'.
     */
    _intent?: Element;
    /**
     * Indicates how quickly the request should be addressed with respect to other requests.
     */
    priority?: code;
    /**
     * Contains extension information for property 'priority'.
     */
    _priority?: Element;
    /**
     * A code that identifies what the overall request group is.
     */
    code?: CodeableConcept;
    /**
     * The subject for which the request group was created.
     */
    subject?: Reference;
    /**
     * Describes the context of the request group, if any.
     */
    encounter?: Reference;
    /**
     * Indicates when the request group was created.
     */
    authoredOn?: dateTime;
    /**
     * Contains extension information for property 'authoredOn'.
     */
    _authoredOn?: Element;
    /**
     * Provides a reference to the author of the request group.
     */
    author?: Reference;
    /**
     * Describes the reason for the request group in coded or textual form.
     */
    reasonCode?: CodeableConcept[];
    /**
     * Indicates another resource whose existence justifies this request group.
     */
    reasonReference?: Reference[];
    /**
     * Provides a mechanism to communicate additional information about the response.
     */
    note?: Annotation[];
    /**
     * The actions, if any, produced by the evaluation of the artifact.
     */
    action?: RequestGroupAction[];
}
/**
 * The actions, if any, produced by the evaluation of the artifact.
 */
export interface RequestGroupAction {
    /**
     * Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
     */
    id?: string;
    /**
     * Contains extension information for property 'id'.
     */
    _id?: Element;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * A user-visible prefix for the action.
     */
    prefix?: string;
    /**
     * Contains extension information for property 'prefix'.
     */
    _prefix?: Element;
    /**
     * The title of the action displayed to a user.
     */
    title?: string;
    /**
     * Contains extension information for property 'title'.
     */
    _title?: Element;
    /**
     * A short description of the action used to provide a summary to display to the user.
     */
    description?: string;
    /**
     * Contains extension information for property 'description'.
     */
    _description?: Element;
    /**
     * A text equivalent of the action to be performed. This provides a human-interpretable description of the action when the definition is consumed by a system that might not be capable of interpreting it dynamically.
     */
    textEquivalent?: string;
    /**
     * Contains extension information for property 'textEquivalent'.
     */
    _textEquivalent?: Element;
    /**
     * Indicates how quickly the action should be addressed with respect to other actions.
     */
    priority?: code;
    /**
     * Contains extension information for property 'priority'.
     */
    _priority?: Element;
    /**
     * A code that provides meaning for the action or action group. For example, a section may have a LOINC code for a section of a documentation template.
     */
    code?: CodeableConcept[];
    /**
     * Didactic or other informational resources associated with the action that can be provided to the CDS recipient. Information resources can include inline text commentary and links to web resources.
     */
    documentation?: RelatedArtifact[];
    /**
     * An expression that describes applicability criteria, or start/stop conditions for the action.
     */
    condition?: RequestGroupActionCondition[];
    /**
     * A relationship to another action such as "before" or "30-60 minutes after start of".
     */
    relatedAction?: RequestGroupActionRelatedAction[];
    /**
     * An optional value describing when the action should be performed.
     */
    timingDateTime?: dateTime;
    /**
     * Contains extension information for property 'timingDateTime'.
     */
    _timingDateTime?: Element;
    /**
     * An optional value describing when the action should be performed.
     */
    timingAge?: Age;
    /**
     * An optional value describing when the action should be performed.
     */
    timingPeriod?: Period;
    /**
     * An optional value describing when the action should be performed.
     */
    timingDuration?: Duration;
    /**
     * An optional value describing when the action should be performed.
     */
    timingRange?: Range;
    /**
     * An optional value describing when the action should be performed.
     */
    timingTiming?: Timing;
    /**
     * The participant that should perform or be responsible for this action.
     */
    participant?: Reference[];
    /**
     * The type of action to perform (create, update, remove).
     */
    type?: CodeableConcept;
    /**
     * Defines the grouping behavior for the action and its children.
     */
    groupingBehavior?: code;
    /**
     * Contains extension information for property 'groupingBehavior'.
     */
    _groupingBehavior?: Element;
    /**
     * Defines the selection behavior for the action and its children.
     */
    selectionBehavior?: code;
    /**
     * Contains extension information for property 'selectionBehavior'.
     */
    _selectionBehavior?: Element;
    /**
     * Defines expectations around whether an action is required.
     */
    requiredBehavior?: code;
    /**
     * Contains extension information for property 'requiredBehavior'.
     */
    _requiredBehavior?: Element;
    /**
     * Defines whether the action should usually be preselected.
     */
    precheckBehavior?: code;
    /**
     * Contains extension information for property 'precheckBehavior'.
     */
    _precheckBehavior?: Element;
    /**
     * Defines whether the action can be selected multiple times.
     */
    cardinalityBehavior?: code;
    /**
     * Contains extension information for property 'cardinalityBehavior'.
     */
    _cardinalityBehavior?: Element;
    /**
     * The resource that is the target of the action (e.g. CommunicationRequest).
     */
    resource?: Reference;
    /**
     * Sub actions.
     */
    action?: RequestGroupAction[];
}
/**
 * An expression that describes applicability criteria, or start/stop conditions for the action.
 */
export interface RequestGroupActionCondition {
    /**
     * Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
     */
    id?: string;
    /**
     * Contains extension information for property 'id'.
     */
    _id?: Element;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * The kind of condition.
     */
    kind: code;
    /**
     * Contains extension information for property 'kind'.
     */
    _kind?: Element;
    /**
     * An expression that returns true or false, indicating whether or not the condition is satisfied.
     */
    expression?: Expression;
}
/**
 * A relationship to another action such as "before" or "30-60 minutes after start of".
 */
export interface RequestGroupActionRelatedAction {
    /**
     * Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
     */
    id?: string;
    /**
     * Contains extension information for property 'id'.
     */
    _id?: Element;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * The element id of the action this is related to.
     */
    actionId: id;
    /**
     * Contains extension information for property 'actionId'.
     */
    _actionId?: Element;
    /**
     * The relationship of this action to the related action.
     */
    relationship: code;
    /**
     * Contains extension information for property 'relationship'.
     */
    _relationship?: Element;
    /**
     * A duration or range of durations to apply to the relationship. For example, 30-60 minutes before.
     */
    offsetDuration?: Duration;
    /**
     * A duration or range of durations to apply to the relationship. For example, 30-60 minutes before.
     */
    offsetRange?: Range;
}
/**
 * The ResearchDefinition resource describes the conditional state (population and any exposures being compared within the population) and outcome (if specified) that the knowledge (evidence, assertion, recommendation) is about.
 */
export interface ResearchDefinition {
    /**
     * The type of the resource.
     */
    resourceType: string;
    /**
     * The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes.
     */
    id?: id;
    /**
     * Contains extension information for property 'id'.
     */
    _id?: Element;
    /**
     * The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource.
     */
    meta?: Meta;
    /**
     * A reference to a set of rules that were followed when the resource was constructed, and which must be understood when processing the content. Often, this is a reference to an implementation guide that defines the special rules along with other profiles etc.
     */
    implicitRules?: uri;
    /**
     * Contains extension information for property 'implicitRules'.
     */
    _implicitRules?: Element;
    /**
     * The base language in which the resource is written.
     */
    language?: code;
    /**
     * Contains extension information for property 'language'.
     */
    _language?: Element;
    /**
     * A human-readable narrative that contains a summary of the resource and can be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it "clinically safe" for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety.
     */
    text?: Narrative;
    /**
     * These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, and nor can they have their own independent transaction scope.
     */
    contained?: Resource[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * An absolute URI that is used to identify this research definition when it is referenced in a specification, model, design or an instance; also called its canonical identifier. This SHOULD be globally unique and SHOULD be a literal address at which at which an authoritative instance of this research definition is (or will be) published. This URL can be the target of a canonical reference. It SHALL remain the same when the research definition is stored on different servers.
     */
    url?: uri;
    /**
     * Contains extension information for property 'url'.
     */
    _url?: Element;
    /**
     * A formal identifier that is used to identify this research definition when it is represented in other formats, or referenced in a specification, model, design or an instance.
     */
    identifier?: Identifier[];
    /**
     * The identifier that is used to identify this version of the research definition when it is referenced in a specification, model, design or instance. This is an arbitrary value managed by the research definition author and is not expected to be globally unique. For example, it might be a timestamp (e.g. yyyymmdd) if a managed version is not available. There is also no expectation that versions can be placed in a lexicographical sequence. To provide a version consistent with the Decision Support Service specification, use the format Major.Minor.Revision (e.g. 1.0.0). For more information on versioning knowledge assets, refer to the Decision Support Service specification. Note that a version is required for non-experimental active artifacts.
     */
    version?: string;
    /**
     * Contains extension information for property 'version'.
     */
    _version?: Element;
    /**
     * A natural language name identifying the research definition. This name should be usable as an identifier for the module by machine processing applications such as code generation.
     */
    name?: string;
    /**
     * Contains extension information for property 'name'.
     */
    _name?: Element;
    /**
     * A short, descriptive, user-friendly title for the research definition.
     */
    title?: string;
    /**
     * Contains extension information for property 'title'.
     */
    _title?: Element;
    /**
     * The short title provides an alternate title for use in informal descriptive contexts where the full, formal title is not necessary.
     */
    shortTitle?: string;
    /**
     * Contains extension information for property 'shortTitle'.
     */
    _shortTitle?: Element;
    /**
     * An explanatory or alternate title for the ResearchDefinition giving additional information about its content.
     */
    subtitle?: string;
    /**
     * Contains extension information for property 'subtitle'.
     */
    _subtitle?: Element;
    /**
     * The status of this research definition. Enables tracking the life-cycle of the content.
     */
    status: code;
    /**
     * Contains extension information for property 'status'.
     */
    _status?: Element;
    /**
     * A Boolean value to indicate that this research definition is authored for testing purposes (or education/evaluation/marketing) and is not intended to be used for genuine usage.
     */
    experimental?: boolean;
    /**
     * Contains extension information for property 'experimental'.
     */
    _experimental?: Element;
    /**
     * The intended subjects for the ResearchDefinition. If this element is not provided, a Patient subject is assumed, but the subject of the ResearchDefinition can be anything.
     */
    subjectCodeableConcept?: CodeableConcept;
    /**
     * The intended subjects for the ResearchDefinition. If this element is not provided, a Patient subject is assumed, but the subject of the ResearchDefinition can be anything.
     */
    subjectReference?: Reference;
    /**
     * The date  (and optionally time) when the research definition was published. The date must change when the business version changes and it must change if the status code changes. In addition, it should change when the substantive content of the research definition changes.
     */
    date?: dateTime;
    /**
     * Contains extension information for property 'date'.
     */
    _date?: Element;
    /**
     * The name of the organization or individual that published the research definition.
     */
    publisher?: string;
    /**
     * Contains extension information for property 'publisher'.
     */
    _publisher?: Element;
    /**
     * Contact details to assist a user in finding and communicating with the publisher.
     */
    contact?: ContactDetail[];
    /**
     * A free text natural language description of the research definition from a consumer's perspective.
     */
    description?: markdown;
    /**
     * Contains extension information for property 'description'.
     */
    _description?: Element;
    /**
     * A human-readable string to clarify or explain concepts about the resource.
     */
    comment?: string[];
    /**
     * Contains extension information for property 'comment'.
     */
    _comment?: Element[];
    /**
     * The content was developed with a focus and intent of supporting the contexts that are listed. These contexts may be general categories (gender, age, ...) or may be references to specific programs (insurance plans, studies, ...) and may be used to assist with indexing and searching for appropriate research definition instances.
     */
    useContext?: UsageContext[];
    /**
     * A legal or geographic region in which the research definition is intended to be used.
     */
    jurisdiction?: CodeableConcept[];
    /**
     * Explanation of why this research definition is needed and why it has been designed as it has.
     */
    purpose?: markdown;
    /**
     * Contains extension information for property 'purpose'.
     */
    _purpose?: Element;
    /**
     * A detailed description, from a clinical perspective, of how the ResearchDefinition is used.
     */
    usage?: string;
    /**
     * Contains extension information for property 'usage'.
     */
    _usage?: Element;
    /**
     * A copyright statement relating to the research definition and/or its contents. Copyright statements are generally legal restrictions on the use and publishing of the research definition.
     */
    copyright?: markdown;
    /**
     * Contains extension information for property 'copyright'.
     */
    _copyright?: Element;
    /**
     * The date on which the resource content was approved by the publisher. Approval happens once when the content is officially approved for usage.
     */
    approvalDate?: date;
    /**
     * Contains extension information for property 'approvalDate'.
     */
    _approvalDate?: Element;
    /**
     * The date on which the resource content was last reviewed. Review happens periodically after approval but does not change the original approval date.
     */
    lastReviewDate?: date;
    /**
     * Contains extension information for property 'lastReviewDate'.
     */
    _lastReviewDate?: Element;
    /**
     * The period during which the research definition content was or is planned to be in active use.
     */
    effectivePeriod?: Period;
    /**
     * Descriptive topics related to the content of the ResearchDefinition. Topics provide a high-level categorization grouping types of ResearchDefinitions that can be useful for filtering and searching.
     */
    topic?: CodeableConcept[];
    /**
     * An individiual or organization primarily involved in the creation and maintenance of the content.
     */
    author?: ContactDetail[];
    /**
     * An individual or organization primarily responsible for internal coherence of the content.
     */
    editor?: ContactDetail[];
    /**
     * An individual or organization primarily responsible for review of some aspect of the content.
     */
    reviewer?: ContactDetail[];
    /**
     * An individual or organization responsible for officially endorsing the content for use in some setting.
     */
    endorser?: ContactDetail[];
    /**
     * Related artifacts such as additional documentation, justification, or bibliographic references.
     */
    relatedArtifact?: RelatedArtifact[];
    /**
     * A reference to a Library resource containing the formal logic used by the ResearchDefinition.
     */
    library?: canonical[];
    /**
     * A reference to a ResearchElementDefinition resource that defines the population for the research.
     */
    population: Reference;
    /**
     * A reference to a ResearchElementDefinition resource that defines the exposure for the research.
     */
    exposure?: Reference;
    /**
     * A reference to a ResearchElementDefinition resource that defines the exposureAlternative for the research.
     */
    exposureAlternative?: Reference;
    /**
     * A reference to a ResearchElementDefinition resomece that defines the outcome for the research.
     */
    outcome?: Reference;
}
/**
 * The ResearchElementDefinition resource describes a "PICO" element that knowledge (evidence, assertion, recommendation) is about.
 */
export interface ResearchElementDefinition {
    /**
     * The type of the resource.
     */
    resourceType: string;
    /**
     * The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes.
     */
    id?: id;
    /**
     * Contains extension information for property 'id'.
     */
    _id?: Element;
    /**
     * The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource.
     */
    meta?: Meta;
    /**
     * A reference to a set of rules that were followed when the resource was constructed, and which must be understood when processing the content. Often, this is a reference to an implementation guide that defines the special rules along with other profiles etc.
     */
    implicitRules?: uri;
    /**
     * Contains extension information for property 'implicitRules'.
     */
    _implicitRules?: Element;
    /**
     * The base language in which the resource is written.
     */
    language?: code;
    /**
     * Contains extension information for property 'language'.
     */
    _language?: Element;
    /**
     * A human-readable narrative that contains a summary of the resource and can be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it "clinically safe" for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety.
     */
    text?: Narrative;
    /**
     * These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, and nor can they have their own independent transaction scope.
     */
    contained?: Resource[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * An absolute URI that is used to identify this research element definition when it is referenced in a specification, model, design or an instance; also called its canonical identifier. This SHOULD be globally unique and SHOULD be a literal address at which at which an authoritative instance of this research element definition is (or will be) published. This URL can be the target of a canonical reference. It SHALL remain the same when the research element definition is stored on different servers.
     */
    url?: uri;
    /**
     * Contains extension information for property 'url'.
     */
    _url?: Element;
    /**
     * A formal identifier that is used to identify this research element definition when it is represented in other formats, or referenced in a specification, model, design or an instance.
     */
    identifier?: Identifier[];
    /**
     * The identifier that is used to identify this version of the research element definition when it is referenced in a specification, model, design or instance. This is an arbitrary value managed by the research element definition author and is not expected to be globally unique. For example, it might be a timestamp (e.g. yyyymmdd) if a managed version is not available. There is also no expectation that versions can be placed in a lexicographical sequence. To provide a version consistent with the Decision Support Service specification, use the format Major.Minor.Revision (e.g. 1.0.0). For more information on versioning knowledge assets, refer to the Decision Support Service specification. Note that a version is required for non-experimental active artifacts.
     */
    version?: string;
    /**
     * Contains extension information for property 'version'.
     */
    _version?: Element;
    /**
     * A natural language name identifying the research element definition. This name should be usable as an identifier for the module by machine processing applications such as code generation.
     */
    name?: string;
    /**
     * Contains extension information for property 'name'.
     */
    _name?: Element;
    /**
     * A short, descriptive, user-friendly title for the research element definition.
     */
    title?: string;
    /**
     * Contains extension information for property 'title'.
     */
    _title?: Element;
    /**
     * The short title provides an alternate title for use in informal descriptive contexts where the full, formal title is not necessary.
     */
    shortTitle?: string;
    /**
     * Contains extension information for property 'shortTitle'.
     */
    _shortTitle?: Element;
    /**
     * An explanatory or alternate title for the ResearchElementDefinition giving additional information about its content.
     */
    subtitle?: string;
    /**
     * Contains extension information for property 'subtitle'.
     */
    _subtitle?: Element;
    /**
     * The status of this research element definition. Enables tracking the life-cycle of the content.
     */
    status: code;
    /**
     * Contains extension information for property 'status'.
     */
    _status?: Element;
    /**
     * A Boolean value to indicate that this research element definition is authored for testing purposes (or education/evaluation/marketing) and is not intended to be used for genuine usage.
     */
    experimental?: boolean;
    /**
     * Contains extension information for property 'experimental'.
     */
    _experimental?: Element;
    /**
     * The intended subjects for the ResearchElementDefinition. If this element is not provided, a Patient subject is assumed, but the subject of the ResearchElementDefinition can be anything.
     */
    subjectCodeableConcept?: CodeableConcept;
    /**
     * The intended subjects for the ResearchElementDefinition. If this element is not provided, a Patient subject is assumed, but the subject of the ResearchElementDefinition can be anything.
     */
    subjectReference?: Reference;
    /**
     * The date  (and optionally time) when the research element definition was published. The date must change when the business version changes and it must change if the status code changes. In addition, it should change when the substantive content of the research element definition changes.
     */
    date?: dateTime;
    /**
     * Contains extension information for property 'date'.
     */
    _date?: Element;
    /**
     * The name of the organization or individual that published the research element definition.
     */
    publisher?: string;
    /**
     * Contains extension information for property 'publisher'.
     */
    _publisher?: Element;
    /**
     * Contact details to assist a user in finding and communicating with the publisher.
     */
    contact?: ContactDetail[];
    /**
     * A free text natural language description of the research element definition from a consumer's perspective.
     */
    description?: markdown;
    /**
     * Contains extension information for property 'description'.
     */
    _description?: Element;
    /**
     * A human-readable string to clarify or explain concepts about the resource.
     */
    comment?: string[];
    /**
     * Contains extension information for property 'comment'.
     */
    _comment?: Element[];
    /**
     * The content was developed with a focus and intent of supporting the contexts that are listed. These contexts may be general categories (gender, age, ...) or may be references to specific programs (insurance plans, studies, ...) and may be used to assist with indexing and searching for appropriate research element definition instances.
     */
    useContext?: UsageContext[];
    /**
     * A legal or geographic region in which the research element definition is intended to be used.
     */
    jurisdiction?: CodeableConcept[];
    /**
     * Explanation of why this research element definition is needed and why it has been designed as it has.
     */
    purpose?: markdown;
    /**
     * Contains extension information for property 'purpose'.
     */
    _purpose?: Element;
    /**
     * A detailed description, from a clinical perspective, of how the ResearchElementDefinition is used.
     */
    usage?: string;
    /**
     * Contains extension information for property 'usage'.
     */
    _usage?: Element;
    /**
     * A copyright statement relating to the research element definition and/or its contents. Copyright statements are generally legal restrictions on the use and publishing of the research element definition.
     */
    copyright?: markdown;
    /**
     * Contains extension information for property 'copyright'.
     */
    _copyright?: Element;
    /**
     * The date on which the resource content was approved by the publisher. Approval happens once when the content is officially approved for usage.
     */
    approvalDate?: date;
    /**
     * Contains extension information for property 'approvalDate'.
     */
    _approvalDate?: Element;
    /**
     * The date on which the resource content was last reviewed. Review happens periodically after approval but does not change the original approval date.
     */
    lastReviewDate?: date;
    /**
     * Contains extension information for property 'lastReviewDate'.
     */
    _lastReviewDate?: Element;
    /**
     * The period during which the research element definition content was or is planned to be in active use.
     */
    effectivePeriod?: Period;
    /**
     * Descriptive topics related to the content of the ResearchElementDefinition. Topics provide a high-level categorization grouping types of ResearchElementDefinitions that can be useful for filtering and searching.
     */
    topic?: CodeableConcept[];
    /**
     * An individiual or organization primarily involved in the creation and maintenance of the content.
     */
    author?: ContactDetail[];
    /**
     * An individual or organization primarily responsible for internal coherence of the content.
     */
    editor?: ContactDetail[];
    /**
     * An individual or organization primarily responsible for review of some aspect of the content.
     */
    reviewer?: ContactDetail[];
    /**
     * An individual or organization responsible for officially endorsing the content for use in some setting.
     */
    endorser?: ContactDetail[];
    /**
     * Related artifacts such as additional documentation, justification, or bibliographic references.
     */
    relatedArtifact?: RelatedArtifact[];
    /**
     * A reference to a Library resource containing the formal logic used by the ResearchElementDefinition.
     */
    library?: canonical[];
    /**
     * The type of research element, a population, an exposure, or an outcome.
     */
    type: code;
    /**
     * Contains extension information for property 'type'.
     */
    _type?: Element;
    /**
     * The type of the outcome (e.g. Dichotomous, Continuous, or Descriptive).
     */
    variableType?: code;
    /**
     * Contains extension information for property 'variableType'.
     */
    _variableType?: Element;
    /**
     * A characteristic that defines the members of the research element. Multiple characteristics are applied with "and" semantics.
     */
    characteristic: ResearchElementDefinitionCharacteristic[];
}
/**
 * A characteristic that defines the members of the research element. Multiple characteristics are applied with "and" semantics.
 */
export interface ResearchElementDefinitionCharacteristic {
    /**
     * Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
     */
    id?: string;
    /**
     * Contains extension information for property 'id'.
     */
    _id?: Element;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * Define members of the research element using Codes (such as condition, medication, or observation), Expressions ( using an expression language such as FHIRPath or CQL) or DataRequirements (such as Diabetes diagnosis onset in the last year).
     */
    definitionCodeableConcept: CodeableConcept;
    /**
     * Define members of the research element using Codes (such as condition, medication, or observation), Expressions ( using an expression language such as FHIRPath or CQL) or DataRequirements (such as Diabetes diagnosis onset in the last year).
     */
    definitionCanonical: canonical;
    /**
     * Define members of the research element using Codes (such as condition, medication, or observation), Expressions ( using an expression language such as FHIRPath or CQL) or DataRequirements (such as Diabetes diagnosis onset in the last year).
     */
    definitionExpression: Expression;
    /**
     * Define members of the research element using Codes (such as condition, medication, or observation), Expressions ( using an expression language such as FHIRPath or CQL) or DataRequirements (such as Diabetes diagnosis onset in the last year).
     */
    definitionDataRequirement: DataRequirement;
    /**
     * Use UsageContext to define the members of the population, such as Age Ranges, Genders, Settings.
     */
    usageContext?: UsageContext[];
    /**
     * When true, members with this characteristic are excluded from the element.
     */
    exclude?: boolean;
    /**
     * Contains extension information for property 'exclude'.
     */
    _exclude?: Element;
    /**
     * Specifies the UCUM unit for the outcome.
     */
    unitOfMeasure?: CodeableConcept;
    /**
     * A narrative description of the time period the study covers.
     */
    studyEffectiveDescription?: string;
    /**
     * Contains extension information for property 'studyEffectiveDescription'.
     */
    _studyEffectiveDescription?: Element;
    /**
     * Indicates what effective period the study covers.
     */
    studyeffectiveDateTime?: dateTime;
    /**
     * Contains extension information for property 'studyeffectiveDateTime'.
     */
    _studyeffectiveDateTime?: Element;
    /**
     * Indicates what effective period the study covers.
     */
    studyeffectivePeriod?: Period;
    /**
     * Indicates what effective period the study covers.
     */
    studyeffectiveDuration?: Duration;
    /**
     * Indicates what effective period the study covers.
     */
    studyeffectiveTiming?: Timing;
    /**
     * Indicates duration from the study initiation.
     */
    studyEffectiveTimeFromStart?: Duration;
    /**
     * Indicates how elements are aggregated within the study effective period.
     */
    studyEffectiveGroupMeasure?: code;
    /**
     * Contains extension information for property 'studyEffectiveGroupMeasure'.
     */
    _studyEffectiveGroupMeasure?: Element;
    /**
     * A narrative description of the time period the study covers.
     */
    participantEffectiveDescription?: string;
    /**
     * Contains extension information for property 'participantEffectiveDescription'.
     */
    _participantEffectiveDescription?: Element;
    /**
     * Indicates what effective period the study covers.
     */
    participanteffectiveDateTime?: dateTime;
    /**
     * Contains extension information for property 'participanteffectiveDateTime'.
     */
    _participanteffectiveDateTime?: Element;
    /**
     * Indicates what effective period the study covers.
     */
    participanteffectivePeriod?: Period;
    /**
     * Indicates what effective period the study covers.
     */
    participanteffectiveDuration?: Duration;
    /**
     * Indicates what effective period the study covers.
     */
    participanteffectiveTiming?: Timing;
    /**
     * Indicates duration from the participant's study entry.
     */
    participantEffectiveTimeFromStart?: Duration;
    /**
     * Indicates how elements are aggregated within the study effective period.
     */
    participantEffectiveGroupMeasure?: code;
    /**
     * Contains extension information for property 'participantEffectiveGroupMeasure'.
     */
    _participantEffectiveGroupMeasure?: Element;
}
/**
 * A process where a researcher or organization plans and then executes a series of steps intended to increase the field of healthcare-related knowledge.  This includes studies of safety, efficacy, comparative effectiveness and other information about medications, devices, therapies and other interventional and investigative techniques.  A ResearchStudy involves the gathering of information about human or animal subjects.
 */
export interface ResearchStudy {
    /**
     * The type of the resource.
     */
    resourceType: string;
    /**
     * The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes.
     */
    id?: id;
    /**
     * Contains extension information for property 'id'.
     */
    _id?: Element;
    /**
     * The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource.
     */
    meta?: Meta;
    /**
     * A reference to a set of rules that were followed when the resource was constructed, and which must be understood when processing the content. Often, this is a reference to an implementation guide that defines the special rules along with other profiles etc.
     */
    implicitRules?: uri;
    /**
     * Contains extension information for property 'implicitRules'.
     */
    _implicitRules?: Element;
    /**
     * The base language in which the resource is written.
     */
    language?: code;
    /**
     * Contains extension information for property 'language'.
     */
    _language?: Element;
    /**
     * A human-readable narrative that contains a summary of the resource and can be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it "clinically safe" for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety.
     */
    text?: Narrative;
    /**
     * These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, and nor can they have their own independent transaction scope.
     */
    contained?: Resource[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * Identifiers assigned to this research study by the sponsor or other systems.
     */
    identifier?: Identifier[];
    /**
     * A short, descriptive user-friendly label for the study.
     */
    title?: string;
    /**
     * Contains extension information for property 'title'.
     */
    _title?: Element;
    /**
     * The set of steps expected to be performed as part of the execution of the study.
     */
    protocol?: Reference[];
    /**
     * A larger research study of which this particular study is a component or step.
     */
    partOf?: Reference[];
    /**
     * The current state of the study.
     */
    status: code;
    /**
     * Contains extension information for property 'status'.
     */
    _status?: Element;
    /**
     * The type of study based upon the intent of the study's activities. A classification of the intent of the study.
     */
    primaryPurposeType?: CodeableConcept;
    /**
     * The stage in the progression of a therapy from initial experimental use in humans in clinical trials to post-market evaluation.
     */
    phase?: CodeableConcept;
    /**
     * Codes categorizing the type of study such as investigational vs. observational, type of blinding, type of randomization, safety vs. efficacy, etc.
     */
    category?: CodeableConcept[];
    /**
     * The medication(s), food(s), therapy(ies), device(s) or other concerns or interventions that the study is seeking to gain more information about.
     */
    focus?: CodeableConcept[];
    /**
     * The condition that is the focus of the study.  For example, In a study to examine risk factors for Lupus, might have as an inclusion criterion "healthy volunteer", but the target condition code would be a Lupus SNOMED code.
     */
    condition?: CodeableConcept[];
    /**
     * Contact details to assist a user in learning more about or engaging with the study.
     */
    contact?: ContactDetail[];
    /**
     * Citations, references and other related documents.
     */
    relatedArtifact?: RelatedArtifact[];
    /**
     * Key terms to aid in searching for or filtering the study.
     */
    keyword?: CodeableConcept[];
    /**
     * Indicates a country, state or other region where the study is taking place.
     */
    location?: CodeableConcept[];
    /**
     * A full description of how the study is being conducted.
     */
    description?: markdown;
    /**
     * Contains extension information for property 'description'.
     */
    _description?: Element;
    /**
     * Reference to a Group that defines the criteria for and quantity of subjects participating in the study.  E.g. " 200 female Europeans between the ages of 20 and 45 with early onset diabetes".
     */
    enrollment?: Reference[];
    /**
     * Identifies the start date and the expected (or actual, depending on status) end date for the study.
     */
    period?: Period;
    /**
     * An organization that initiates the investigation and is legally responsible for the study.
     */
    sponsor?: Reference;
    /**
     * A researcher in a study who oversees multiple aspects of the study, such as concept development, protocol writing, protocol submission for IRB approval, participant recruitment, informed consent, data collection, analysis, interpretation and presentation.
     */
    principalInvestigator?: Reference;
    /**
     * A facility in which study activities are conducted.
     */
    site?: Reference[];
    /**
     * A description and/or code explaining the premature termination of the study.
     */
    reasonStopped?: CodeableConcept;
    /**
     * Comments made about the study by the performer, subject or other participants.
     */
    note?: Annotation[];
    /**
     * Describes an expected sequence of events for one of the participants of a study.  E.g. Exposure to drug A, wash-out, exposure to drug B, wash-out, follow-up.
     */
    arm?: ResearchStudyArm[];
    /**
     * A goal that the study is aiming to achieve in terms of a scientific question to be answered by the analysis of data collected during the study.
     */
    objective?: ResearchStudyObjective[];
}
/**
 * Describes an expected sequence of events for one of the participants of a study.  E.g. Exposure to drug A, wash-out, exposure to drug B, wash-out, follow-up.
 */
export interface ResearchStudyArm {
    /**
     * Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
     */
    id?: string;
    /**
     * Contains extension information for property 'id'.
     */
    _id?: Element;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * Unique, human-readable label for this arm of the study.
     */
    name: string;
    /**
     * Contains extension information for property 'name'.
     */
    _name?: Element;
    /**
     * Categorization of study arm, e.g. experimental, active comparator, placebo comparater.
     */
    type?: CodeableConcept;
    /**
     * A succinct description of the path through the study that would be followed by a subject adhering to this arm.
     */
    description?: string;
    /**
     * Contains extension information for property 'description'.
     */
    _description?: Element;
}
/**
 * A goal that the study is aiming to achieve in terms of a scientific question to be answered by the analysis of data collected during the study.
 */
export interface ResearchStudyObjective {
    /**
     * Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
     */
    id?: string;
    /**
     * Contains extension information for property 'id'.
     */
    _id?: Element;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * Unique, human-readable label for this objective of the study.
     */
    name?: string;
    /**
     * Contains extension information for property 'name'.
     */
    _name?: Element;
    /**
     * The kind of study objective.
     */
    type?: CodeableConcept;
}
/**
 * A physical entity which is the primary unit of operational and/or administrative interest in a study.
 */
export interface ResearchSubject {
    /**
     * The type of the resource.
     */
    resourceType: string;
    /**
     * The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes.
     */
    id?: id;
    /**
     * Contains extension information for property 'id'.
     */
    _id?: Element;
    /**
     * The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource.
     */
    meta?: Meta;
    /**
     * A reference to a set of rules that were followed when the resource was constructed, and which must be understood when processing the content. Often, this is a reference to an implementation guide that defines the special rules along with other profiles etc.
     */
    implicitRules?: uri;
    /**
     * Contains extension information for property 'implicitRules'.
     */
    _implicitRules?: Element;
    /**
     * The base language in which the resource is written.
     */
    language?: code;
    /**
     * Contains extension information for property 'language'.
     */
    _language?: Element;
    /**
     * A human-readable narrative that contains a summary of the resource and can be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it "clinically safe" for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety.
     */
    text?: Narrative;
    /**
     * These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, and nor can they have their own independent transaction scope.
     */
    contained?: Resource[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * Identifiers assigned to this research subject for a study.
     */
    identifier?: Identifier[];
    /**
     * The current state of the subject.
     */
    status: code;
    /**
     * Contains extension information for property 'status'.
     */
    _status?: Element;
    /**
     * The dates the subject began and ended their participation in the study.
     */
    period?: Period;
    /**
     * Reference to the study the subject is participating in.
     */
    study: Reference;
    /**
     * The record of the person or animal who is involved in the study.
     */
    individual: Reference;
    /**
     * The name of the arm in the study the subject is expected to follow as part of this study.
     */
    assignedArm?: string;
    /**
     * Contains extension information for property 'assignedArm'.
     */
    _assignedArm?: Element;
    /**
     * The name of the arm in the study the subject actually followed as part of this study.
     */
    actualArm?: string;
    /**
     * Contains extension information for property 'actualArm'.
     */
    _actualArm?: Element;
    /**
     * A record of the patient's informed agreement to participate in the study.
     */
    consent?: Reference;
}
/**
 * This is the base resource type for everything.
 */
export interface Resource {
    /**
     * The type of the resource.
     */
    resourceType: string;
    /**
     * The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes.
     */
    id?: id;
    /**
     * Contains extension information for property 'id'.
     */
    _id?: Element;
    /**
     * The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource.
     */
    meta?: Meta;
    /**
     * A reference to a set of rules that were followed when the resource was constructed, and which must be understood when processing the content. Often, this is a reference to an implementation guide that defines the special rules along with other profiles etc.
     */
    implicitRules?: uri;
    /**
     * Contains extension information for property 'implicitRules'.
     */
    _implicitRules?: Element;
    /**
     * The base language in which the resource is written.
     */
    language?: code;
    /**
     * Contains extension information for property 'language'.
     */
    _language?: Element;
}
/**
 * An assessment of the likely outcome(s) for a patient or other subject as well as the likelihood of each outcome.
 */
export interface RiskAssessment {
    /**
     * The type of the resource.
     */
    resourceType: string;
    /**
     * The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes.
     */
    id?: id;
    /**
     * Contains extension information for property 'id'.
     */
    _id?: Element;
    /**
     * The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource.
     */
    meta?: Meta;
    /**
     * A reference to a set of rules that were followed when the resource was constructed, and which must be understood when processing the content. Often, this is a reference to an implementation guide that defines the special rules along with other profiles etc.
     */
    implicitRules?: uri;
    /**
     * Contains extension information for property 'implicitRules'.
     */
    _implicitRules?: Element;
    /**
     * The base language in which the resource is written.
     */
    language?: code;
    /**
     * Contains extension information for property 'language'.
     */
    _language?: Element;
    /**
     * A human-readable narrative that contains a summary of the resource and can be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it "clinically safe" for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety.
     */
    text?: Narrative;
    /**
     * These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, and nor can they have their own independent transaction scope.
     */
    contained?: Resource[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * Business identifier assigned to the risk assessment.
     */
    identifier?: Identifier[];
    /**
     * A reference to the request that is fulfilled by this risk assessment.
     */
    basedOn?: Reference;
    /**
     * A reference to a resource that this risk assessment is part of, such as a Procedure.
     */
    parent?: Reference;
    /**
     * The status of the RiskAssessment, using the same statuses as an Observation.
     */
    status: code;
    /**
     * Contains extension information for property 'status'.
     */
    _status?: Element;
    /**
     * The algorithm, process or mechanism used to evaluate the risk.
     */
    method?: CodeableConcept;
    /**
     * The type of the risk assessment performed.
     */
    code?: CodeableConcept;
    /**
     * The patient or group the risk assessment applies to.
     */
    subject: Reference;
    /**
     * The encounter where the assessment was performed.
     */
    encounter?: Reference;
    /**
     * The date (and possibly time) the risk assessment was performed.
     */
    occurrenceDateTime?: dateTime;
    /**
     * Contains extension information for property 'occurrenceDateTime'.
     */
    _occurrenceDateTime?: Element;
    /**
     * The date (and possibly time) the risk assessment was performed.
     */
    occurrencePeriod?: Period;
    /**
     * For assessments or prognosis specific to a particular condition, indicates the condition being assessed.
     */
    condition?: Reference;
    /**
     * The provider or software application that performed the assessment.
     */
    performer?: Reference;
    /**
     * The reason the risk assessment was performed.
     */
    reasonCode?: CodeableConcept[];
    /**
     * Resources supporting the reason the risk assessment was performed.
     */
    reasonReference?: Reference[];
    /**
     * Indicates the source data considered as part of the assessment (for example, FamilyHistory, Observations, Procedures, Conditions, etc.).
     */
    basis?: Reference[];
    /**
     * Describes the expected outcome for the subject.
     */
    prediction?: RiskAssessmentPrediction[];
    /**
     * A description of the steps that might be taken to reduce the identified risk(s).
     */
    mitigation?: string;
    /**
     * Contains extension information for property 'mitigation'.
     */
    _mitigation?: Element;
    /**
     * Additional comments about the risk assessment.
     */
    note?: Annotation[];
}
/**
 * Describes the expected outcome for the subject.
 */
export interface RiskAssessmentPrediction {
    /**
     * Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
     */
    id?: string;
    /**
     * Contains extension information for property 'id'.
     */
    _id?: Element;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * One of the potential outcomes for the patient (e.g. remission, death,  a particular condition).
     */
    outcome?: CodeableConcept;
    /**
     * Indicates how likely the outcome is (in the specified timeframe).
     */
    probabilityDecimal?: decimal;
    /**
     * Contains extension information for property 'probabilityDecimal'.
     */
    _probabilityDecimal?: Element;
    /**
     * Indicates how likely the outcome is (in the specified timeframe).
     */
    probabilityRange?: Range;
    /**
     * Indicates how likely the outcome is (in the specified timeframe), expressed as a qualitative value (e.g. low, medium, or high).
     */
    qualitativeRisk?: CodeableConcept;
    /**
     * Indicates the risk for this particular subject (with their specific characteristics) divided by the risk of the population in general.  (Numbers greater than 1 = higher risk than the population, numbers less than 1 = lower risk.).
     */
    relativeRisk?: decimal;
    /**
     * Contains extension information for property 'relativeRisk'.
     */
    _relativeRisk?: Element;
    /**
     * Indicates the period of time or age range of the subject to which the specified probability applies.
     */
    whenPeriod?: Period;
    /**
     * Indicates the period of time or age range of the subject to which the specified probability applies.
     */
    whenRange?: Range;
    /**
     * Additional information explaining the basis for the prediction.
     */
    rationale?: string;
    /**
     * Contains extension information for property 'rationale'.
     */
    _rationale?: Element;
}
/**
 * The RiskEvidenceSynthesis resource describes the likelihood of an outcome in a population plus exposure state where the risk estimate is derived from a combination of research studies.
 */
export interface RiskEvidenceSynthesis {
    /**
     * The type of the resource.
     */
    resourceType: string;
    /**
     * The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes.
     */
    id?: id;
    /**
     * Contains extension information for property 'id'.
     */
    _id?: Element;
    /**
     * The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource.
     */
    meta?: Meta;
    /**
     * A reference to a set of rules that were followed when the resource was constructed, and which must be understood when processing the content. Often, this is a reference to an implementation guide that defines the special rules along with other profiles etc.
     */
    implicitRules?: uri;
    /**
     * Contains extension information for property 'implicitRules'.
     */
    _implicitRules?: Element;
    /**
     * The base language in which the resource is written.
     */
    language?: code;
    /**
     * Contains extension information for property 'language'.
     */
    _language?: Element;
    /**
     * A human-readable narrative that contains a summary of the resource and can be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it "clinically safe" for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety.
     */
    text?: Narrative;
    /**
     * These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, and nor can they have their own independent transaction scope.
     */
    contained?: Resource[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * An absolute URI that is used to identify this risk evidence synthesis when it is referenced in a specification, model, design or an instance; also called its canonical identifier. This SHOULD be globally unique and SHOULD be a literal address at which at which an authoritative instance of this risk evidence synthesis is (or will be) published. This URL can be the target of a canonical reference. It SHALL remain the same when the risk evidence synthesis is stored on different servers.
     */
    url?: uri;
    /**
     * Contains extension information for property 'url'.
     */
    _url?: Element;
    /**
     * A formal identifier that is used to identify this risk evidence synthesis when it is represented in other formats, or referenced in a specification, model, design or an instance.
     */
    identifier?: Identifier[];
    /**
     * The identifier that is used to identify this version of the risk evidence synthesis when it is referenced in a specification, model, design or instance. This is an arbitrary value managed by the risk evidence synthesis author and is not expected to be globally unique. For example, it might be a timestamp (e.g. yyyymmdd) if a managed version is not available. There is also no expectation that versions can be placed in a lexicographical sequence.
     */
    version?: string;
    /**
     * Contains extension information for property 'version'.
     */
    _version?: Element;
    /**
     * A natural language name identifying the risk evidence synthesis. This name should be usable as an identifier for the module by machine processing applications such as code generation.
     */
    name?: string;
    /**
     * Contains extension information for property 'name'.
     */
    _name?: Element;
    /**
     * A short, descriptive, user-friendly title for the risk evidence synthesis.
     */
    title?: string;
    /**
     * Contains extension information for property 'title'.
     */
    _title?: Element;
    /**
     * The status of this risk evidence synthesis. Enables tracking the life-cycle of the content.
     */
    status: code;
    /**
     * Contains extension information for property 'status'.
     */
    _status?: Element;
    /**
     * The date  (and optionally time) when the risk evidence synthesis was published. The date must change when the business version changes and it must change if the status code changes. In addition, it should change when the substantive content of the risk evidence synthesis changes.
     */
    date?: dateTime;
    /**
     * Contains extension information for property 'date'.
     */
    _date?: Element;
    /**
     * The name of the organization or individual that published the risk evidence synthesis.
     */
    publisher?: string;
    /**
     * Contains extension information for property 'publisher'.
     */
    _publisher?: Element;
    /**
     * Contact details to assist a user in finding and communicating with the publisher.
     */
    contact?: ContactDetail[];
    /**
     * A free text natural language description of the risk evidence synthesis from a consumer's perspective.
     */
    description?: markdown;
    /**
     * Contains extension information for property 'description'.
     */
    _description?: Element;
    /**
     * A human-readable string to clarify or explain concepts about the resource.
     */
    note?: Annotation[];
    /**
     * The content was developed with a focus and intent of supporting the contexts that are listed. These contexts may be general categories (gender, age, ...) or may be references to specific programs (insurance plans, studies, ...) and may be used to assist with indexing and searching for appropriate risk evidence synthesis instances.
     */
    useContext?: UsageContext[];
    /**
     * A legal or geographic region in which the risk evidence synthesis is intended to be used.
     */
    jurisdiction?: CodeableConcept[];
    /**
     * A copyright statement relating to the risk evidence synthesis and/or its contents. Copyright statements are generally legal restrictions on the use and publishing of the risk evidence synthesis.
     */
    copyright?: markdown;
    /**
     * Contains extension information for property 'copyright'.
     */
    _copyright?: Element;
    /**
     * The date on which the resource content was approved by the publisher. Approval happens once when the content is officially approved for usage.
     */
    approvalDate?: date;
    /**
     * Contains extension information for property 'approvalDate'.
     */
    _approvalDate?: Element;
    /**
     * The date on which the resource content was last reviewed. Review happens periodically after approval but does not change the original approval date.
     */
    lastReviewDate?: date;
    /**
     * Contains extension information for property 'lastReviewDate'.
     */
    _lastReviewDate?: Element;
    /**
     * The period during which the risk evidence synthesis content was or is planned to be in active use.
     */
    effectivePeriod?: Period;
    /**
     * Descriptive topics related to the content of the RiskEvidenceSynthesis. Topics provide a high-level categorization grouping types of EffectEvidenceSynthesiss that can be useful for filtering and searching.
     */
    topic?: CodeableConcept[];
    /**
     * An individiual or organization primarily involved in the creation and maintenance of the content.
     */
    author?: ContactDetail[];
    /**
     * An individual or organization primarily responsible for internal coherence of the content.
     */
    editor?: ContactDetail[];
    /**
     * An individual or organization primarily responsible for review of some aspect of the content.
     */
    reviewer?: ContactDetail[];
    /**
     * An individual or organization responsible for officially endorsing the content for use in some setting.
     */
    endorser?: ContactDetail[];
    /**
     * Related artifacts such as additional documentation, justification, or bibliographic references.
     */
    relatedArtifact?: RelatedArtifact[];
    /**
     * Type of synthesis eg meta-analysis.
     */
    synthesisType?: CodeableConcept;
    /**
     * Type of study eg randomized trial.
     */
    studyType?: CodeableConcept;
    /**
     * A reference to a EvidenceVariable resource that defines the population for the research.
     */
    population: Reference;
    /**
     * A reference to a EvidenceVariable resource that defines the exposure for the research.
     */
    exposure?: Reference;
    /**
     * A reference to a EvidenceVariable resomece that defines the outcome for the research.
     */
    outcome: Reference;
    /**
     * A description of the size of the sample involved in the synthesis.
     */
    sampleSize?: RiskEvidenceSynthesisSampleSize;
    /**
     * The estimated risk of the outcome.
     */
    riskEstimate?: RiskEvidenceSynthesisRiskEstimate;
    /**
     * A description of the certainty of the risk estimate.
     */
    certainty?: RiskEvidenceSynthesisCertainty[];
}
/**
 * A description of the size of the sample involved in the synthesis.
 */
export interface RiskEvidenceSynthesisSampleSize {
    /**
     * Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
     */
    id?: string;
    /**
     * Contains extension information for property 'id'.
     */
    _id?: Element;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * Human-readable summary of sample size.
     */
    description?: string;
    /**
     * Contains extension information for property 'description'.
     */
    _description?: Element;
    /**
     * Number of studies included in this evidence synthesis.
     */
    numberOfStudies?: integer;
    /**
     * Contains extension information for property 'numberOfStudies'.
     */
    _numberOfStudies?: Element;
    /**
     * Number of participants included in this evidence synthesis.
     */
    numberOfParticipants?: integer;
    /**
     * Contains extension information for property 'numberOfParticipants'.
     */
    _numberOfParticipants?: Element;
}
/**
 * The estimated risk of the outcome.
 */
export interface RiskEvidenceSynthesisRiskEstimate {
    /**
     * Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
     */
    id?: string;
    /**
     * Contains extension information for property 'id'.
     */
    _id?: Element;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * Human-readable summary of risk estimate.
     */
    description?: string;
    /**
     * Contains extension information for property 'description'.
     */
    _description?: Element;
    /**
     * Examples include proportion and mean.
     */
    type?: CodeableConcept;
    /**
     * The point estimate of the risk estimate.
     */
    value?: decimal;
    /**
     * Contains extension information for property 'value'.
     */
    _value?: Element;
    /**
     * Specifies the UCUM unit for the outcome.
     */
    unitOfMeasure?: CodeableConcept;
    /**
     * The sample size for the group that was measured for this risk estimate.
     */
    denominatorCount?: integer;
    /**
     * Contains extension information for property 'denominatorCount'.
     */
    _denominatorCount?: Element;
    /**
     * The number of group members with the outcome of interest.
     */
    numeratorCount?: integer;
    /**
     * Contains extension information for property 'numeratorCount'.
     */
    _numeratorCount?: Element;
    /**
     * A description of the precision of the estimate for the effect.
     */
    precisionEstimate?: RiskEvidenceSynthesisRiskEstimatePrecisionEstimate[];
}
/**
 * A description of the precision of the estimate for the effect.
 */
export interface RiskEvidenceSynthesisRiskEstimatePrecisionEstimate {
    /**
     * Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
     */
    id?: string;
    /**
     * Contains extension information for property 'id'.
     */
    _id?: Element;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * Examples include confidence interval and interquartile range.
     */
    type?: CodeableConcept;
    /**
     * Use 95 for a 95% confidence interval.
     */
    level?: decimal;
    /**
     * Contains extension information for property 'level'.
     */
    _level?: Element;
    /**
     * Lower bound of confidence interval.
     */
    from?: decimal;
    /**
     * Contains extension information for property 'from'.
     */
    _from?: Element;
    /**
     * Upper bound of confidence interval.
     */
    to?: decimal;
    /**
     * Contains extension information for property 'to'.
     */
    _to?: Element;
}
/**
 * A description of the certainty of the risk estimate.
 */
export interface RiskEvidenceSynthesisCertainty {
    /**
     * Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
     */
    id?: string;
    /**
     * Contains extension information for property 'id'.
     */
    _id?: Element;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * A rating of the certainty of the effect estimate.
     */
    rating?: CodeableConcept[];
    /**
     * A human-readable string to clarify or explain concepts about the resource.
     */
    note?: Annotation[];
    /**
     * A description of a component of the overall certainty.
     */
    certaintySubcomponent?: RiskEvidenceSynthesisCertaintyCertaintySubcomponent[];
}
/**
 * A description of a component of the overall certainty.
 */
export interface RiskEvidenceSynthesisCertaintyCertaintySubcomponent {
    /**
     * Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
     */
    id?: string;
    /**
     * Contains extension information for property 'id'.
     */
    _id?: Element;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * Type of subcomponent of certainty rating.
     */
    type?: CodeableConcept;
    /**
     * A rating of a subcomponent of rating certainty.
     */
    rating?: CodeableConcept[];
    /**
     * A human-readable string to clarify or explain concepts about the resource.
     */
    note?: Annotation[];
}
/**
 * A series of measurements taken by a device, with upper and lower limits. There may be more than one dimension in the data.
 */
export interface SampledData {
    /**
     * Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
     */
    id?: string;
    /**
     * Contains extension information for property 'id'.
     */
    _id?: Element;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * The base quantity that a measured value of zero represents. In addition, this provides the units of the entire measurement series.
     */
    origin: Quantity;
    /**
     * The length of time between sampling times, measured in milliseconds.
     */
    period: decimal;
    /**
     * Contains extension information for property 'period'.
     */
    _period?: Element;
    /**
     * A correction factor that is applied to the sampled data points before they are added to the origin.
     */
    factor?: decimal;
    /**
     * Contains extension information for property 'factor'.
     */
    _factor?: Element;
    /**
     * The lower limit of detection of the measured points. This is needed if any of the data points have the value "L" (lower than detection limit).
     */
    lowerLimit?: decimal;
    /**
     * Contains extension information for property 'lowerLimit'.
     */
    _lowerLimit?: Element;
    /**
     * The upper limit of detection of the measured points. This is needed if any of the data points have the value "U" (higher than detection limit).
     */
    upperLimit?: decimal;
    /**
     * Contains extension information for property 'upperLimit'.
     */
    _upperLimit?: Element;
    /**
     * The number of sample points at each time point. If this value is greater than one, then the dimensions will be interlaced - all the sample points for a point in time will be recorded at once.
     */
    dimensions: positiveInt;
    /**
     * Contains extension information for property 'dimensions'.
     */
    _dimensions?: Element;
    /**
     * A series of data points which are decimal values separated by a single space (character u20). The special values "E" (error), "L" (below detection limit) and "U" (above detection limit) can also be used in place of a decimal value.
     */
    data?: string;
    /**
     * Contains extension information for property 'data'.
     */
    _data?: Element;
}
/**
 * A container for slots of time that may be available for booking appointments.
 */
export interface Schedule {
    /**
     * The type of the resource.
     */
    resourceType: string;
    /**
     * The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes.
     */
    id?: id;
    /**
     * Contains extension information for property 'id'.
     */
    _id?: Element;
    /**
     * The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource.
     */
    meta?: Meta;
    /**
     * A reference to a set of rules that were followed when the resource was constructed, and which must be understood when processing the content. Often, this is a reference to an implementation guide that defines the special rules along with other profiles etc.
     */
    implicitRules?: uri;
    /**
     * Contains extension information for property 'implicitRules'.
     */
    _implicitRules?: Element;
    /**
     * The base language in which the resource is written.
     */
    language?: code;
    /**
     * Contains extension information for property 'language'.
     */
    _language?: Element;
    /**
     * A human-readable narrative that contains a summary of the resource and can be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it "clinically safe" for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety.
     */
    text?: Narrative;
    /**
     * These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, and nor can they have their own independent transaction scope.
     */
    contained?: Resource[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * External Ids for this item.
     */
    identifier?: Identifier[];
    /**
     * Whether this schedule record is in active use or should not be used (such as was entered in error).
     */
    active?: boolean;
    /**
     * Contains extension information for property 'active'.
     */
    _active?: Element;
    /**
     * A broad categorization of the service that is to be performed during this appointment.
     */
    serviceCategory?: CodeableConcept[];
    /**
     * The specific service that is to be performed during this appointment.
     */
    serviceType?: CodeableConcept[];
    /**
     * The specialty of a practitioner that would be required to perform the service requested in this appointment.
     */
    specialty?: CodeableConcept[];
    /**
     * Slots that reference this schedule resource provide the availability details to these referenced resource(s).
     */
    actor: Reference[];
    /**
     * The period of time that the slots that reference this Schedule resource cover (even if none exist). These  cover the amount of time that an organization's planning horizon; the interval for which they are currently accepting appointments. This does not define a "template" for planning outside these dates.
     */
    planningHorizon?: Period;
    /**
     * Comments on the availability to describe any extended information. Such as custom constraints on the slots that may be associated.
     */
    comment?: string;
    /**
     * Contains extension information for property 'comment'.
     */
    _comment?: Element;
}
/**
 * A search parameter that defines a named search item that can be used to search/filter on a resource.
 */
export interface SearchParameter {
    /**
     * The type of the resource.
     */
    resourceType: string;
    /**
     * The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes.
     */
    id?: id;
    /**
     * Contains extension information for property 'id'.
     */
    _id?: Element;
    /**
     * The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource.
     */
    meta?: Meta;
    /**
     * A reference to a set of rules that were followed when the resource was constructed, and which must be understood when processing the content. Often, this is a reference to an implementation guide that defines the special rules along with other profiles etc.
     */
    implicitRules?: uri;
    /**
     * Contains extension information for property 'implicitRules'.
     */
    _implicitRules?: Element;
    /**
     * The base language in which the resource is written.
     */
    language?: code;
    /**
     * Contains extension information for property 'language'.
     */
    _language?: Element;
    /**
     * A human-readable narrative that contains a summary of the resource and can be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it "clinically safe" for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety.
     */
    text?: Narrative;
    /**
     * These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, and nor can they have their own independent transaction scope.
     */
    contained?: Resource[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * An absolute URI that is used to identify this search parameter when it is referenced in a specification, model, design or an instance; also called its canonical identifier. This SHOULD be globally unique and SHOULD be a literal address at which at which an authoritative instance of this search parameter is (or will be) published. This URL can be the target of a canonical reference. It SHALL remain the same when the search parameter is stored on different servers.
     */
    url: uri;
    /**
     * Contains extension information for property 'url'.
     */
    _url?: Element;
    /**
     * The identifier that is used to identify this version of the search parameter when it is referenced in a specification, model, design or instance. This is an arbitrary value managed by the search parameter author and is not expected to be globally unique. For example, it might be a timestamp (e.g. yyyymmdd) if a managed version is not available. There is also no expectation that versions can be placed in a lexicographical sequence.
     */
    version?: string;
    /**
     * Contains extension information for property 'version'.
     */
    _version?: Element;
    /**
     * A natural language name identifying the search parameter. This name should be usable as an identifier for the module by machine processing applications such as code generation.
     */
    name: string;
    /**
     * Contains extension information for property 'name'.
     */
    _name?: Element;
    /**
     * Where this search parameter is originally defined. If a derivedFrom is provided, then the details in the search parameter must be consistent with the definition from which it is defined. i.e. the parameter should have the same meaning, and (usually) the functionality should be a proper subset of the underlying search parameter.
     */
    derivedFrom?: canonical;
    /**
     * The status of this search parameter. Enables tracking the life-cycle of the content.
     */
    status: code;
    /**
     * Contains extension information for property 'status'.
     */
    _status?: Element;
    /**
     * A Boolean value to indicate that this search parameter is authored for testing purposes (or education/evaluation/marketing) and is not intended to be used for genuine usage.
     */
    experimental?: boolean;
    /**
     * Contains extension information for property 'experimental'.
     */
    _experimental?: Element;
    /**
     * The date  (and optionally time) when the search parameter was published. The date must change when the business version changes and it must change if the status code changes. In addition, it should change when the substantive content of the search parameter changes.
     */
    date?: dateTime;
    /**
     * Contains extension information for property 'date'.
     */
    _date?: Element;
    /**
     * The name of the organization or individual that published the search parameter.
     */
    publisher?: string;
    /**
     * Contains extension information for property 'publisher'.
     */
    _publisher?: Element;
    /**
     * Contact details to assist a user in finding and communicating with the publisher.
     */
    contact?: ContactDetail[];
    /**
     * And how it used.
     */
    description: markdown;
    /**
     * Contains extension information for property 'description'.
     */
    _description?: Element;
    /**
     * The content was developed with a focus and intent of supporting the contexts that are listed. These contexts may be general categories (gender, age, ...) or may be references to specific programs (insurance plans, studies, ...) and may be used to assist with indexing and searching for appropriate search parameter instances.
     */
    useContext?: UsageContext[];
    /**
     * A legal or geographic region in which the search parameter is intended to be used.
     */
    jurisdiction?: CodeableConcept[];
    /**
     * Explanation of why this search parameter is needed and why it has been designed as it has.
     */
    purpose?: markdown;
    /**
     * Contains extension information for property 'purpose'.
     */
    _purpose?: Element;
    /**
     * The code used in the URL or the parameter name in a parameters resource for this search parameter.
     */
    code: code;
    /**
     * Contains extension information for property 'code'.
     */
    _code?: Element;
    /**
     * The base resource type(s) that this search parameter can be used against.
     */
    base: code[];
    /**
     * Contains extension information for property 'base'.
     */
    _base?: Element[];
    /**
     * The type of value that a search parameter may contain, and how the content is interpreted.
     */
    type: code;
    /**
     * Contains extension information for property 'type'.
     */
    _type?: Element;
    /**
     * A FHIRPath expression that returns a set of elements for the search parameter.
     */
    expression?: string;
    /**
     * Contains extension information for property 'expression'.
     */
    _expression?: Element;
    /**
     * An XPath expression that returns a set of elements for the search parameter.
     */
    xpath?: string;
    /**
     * Contains extension information for property 'xpath'.
     */
    _xpath?: Element;
    /**
     * How the search parameter relates to the set of elements returned by evaluating the xpath query.
     */
    xpathUsage?: code;
    /**
     * Contains extension information for property 'xpathUsage'.
     */
    _xpathUsage?: Element;
    /**
     * Types of resource (if a resource is referenced).
     */
    target?: code[];
    /**
     * Contains extension information for property 'target'.
     */
    _target?: Element[];
    /**
     * Whether multiple values are allowed for each time the parameter exists. Values are separated by commas, and the parameter matches if any of the values match.
     */
    multipleOr?: boolean;
    /**
     * Contains extension information for property 'multipleOr'.
     */
    _multipleOr?: Element;
    /**
     * Whether multiple parameters are allowed - e.g. more than one parameter with the same name. The search matches if all the parameters match.
     */
    multipleAnd?: boolean;
    /**
     * Contains extension information for property 'multipleAnd'.
     */
    _multipleAnd?: Element;
    /**
     * Comparators supported for the search parameter.
     */
    comparator?: code[];
    /**
     * Contains extension information for property 'comparator'.
     */
    _comparator?: Element[];
    /**
     * A modifier supported for the search parameter.
     */
    modifier?: code[];
    /**
     * Contains extension information for property 'modifier'.
     */
    _modifier?: Element[];
    /**
     * Contains the names of any search parameters which may be chained to the containing search parameter. Chained parameters may be added to search parameters of type reference and specify that resources will only be returned if they contain a reference to a resource which matches the chained parameter value. Values for this field should be drawn from SearchParameter.code for a parameter on the target resource type.
     */
    chain?: string[];
    /**
     * Contains extension information for property 'chain'.
     */
    _chain?: Element[];
    /**
     * Used to define the parts of a composite search parameter.
     */
    component?: SearchParameterComponent[];
}
/**
 * Used to define the parts of a composite search parameter.
 */
export interface SearchParameterComponent {
    /**
     * Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
     */
    id?: string;
    /**
     * Contains extension information for property 'id'.
     */
    _id?: Element;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * The definition of the search parameter that describes this part.
     */
    definition: canonical;
    /**
     * A sub-expression that defines how to extract values for this component from the output of the main SearchParameter.expression.
     */
    expression: string;
    /**
     * Contains extension information for property 'expression'.
     */
    _expression?: Element;
}
/**
 * A record of a request for service such as diagnostic investigations, treatments, or operations to be performed.
 */
export interface ServiceRequest {
    /**
     * The type of the resource.
     */
    resourceType: string;
    /**
     * The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes.
     */
    id?: id;
    /**
     * Contains extension information for property 'id'.
     */
    _id?: Element;
    /**
     * The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource.
     */
    meta?: Meta;
    /**
     * A reference to a set of rules that were followed when the resource was constructed, and which must be understood when processing the content. Often, this is a reference to an implementation guide that defines the special rules along with other profiles etc.
     */
    implicitRules?: uri;
    /**
     * Contains extension information for property 'implicitRules'.
     */
    _implicitRules?: Element;
    /**
     * The base language in which the resource is written.
     */
    language?: code;
    /**
     * Contains extension information for property 'language'.
     */
    _language?: Element;
    /**
     * A human-readable narrative that contains a summary of the resource and can be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it "clinically safe" for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety.
     */
    text?: Narrative;
    /**
     * These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, and nor can they have their own independent transaction scope.
     */
    contained?: Resource[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * Identifiers assigned to this order instance by the orderer and/or the receiver and/or order fulfiller.
     */
    identifier?: Identifier[];
    /**
     * The URL pointing to a FHIR-defined protocol, guideline, orderset or other definition that is adhered to in whole or in part by this ServiceRequest.
     */
    instantiatesCanonical?: canonical[];
    /**
     * The URL pointing to an externally maintained protocol, guideline, orderset or other definition that is adhered to in whole or in part by this ServiceRequest.
     */
    instantiatesUri?: uri[];
    /**
     * Contains extension information for property 'instantiatesUri'.
     */
    _instantiatesUri?: Element[];
    /**
     * Plan/proposal/order fulfilled by this request.
     */
    basedOn?: Reference[];
    /**
     * The request takes the place of the referenced completed or terminated request(s).
     */
    replaces?: Reference[];
    /**
     * A shared identifier common to all service requests that were authorized more or less simultaneously by a single author, representing the composite or group identifier.
     */
    requisition?: Identifier;
    /**
     * The status of the order.
     */
    status: code;
    /**
     * Contains extension information for property 'status'.
     */
    _status?: Element;
    /**
     * Whether the request is a proposal, plan, an original order or a reflex order.
     */
    intent: code;
    /**
     * Contains extension information for property 'intent'.
     */
    _intent?: Element;
    /**
     * A code that classifies the service for searching, sorting and display purposes (e.g. "Surgical Procedure").
     */
    category?: CodeableConcept[];
    /**
     * Indicates how quickly the ServiceRequest should be addressed with respect to other requests.
     */
    priority?: code;
    /**
     * Contains extension information for property 'priority'.
     */
    _priority?: Element;
    /**
     * Set this to true if the record is saying that the service/procedure should NOT be performed.
     */
    doNotPerform?: boolean;
    /**
     * Contains extension information for property 'doNotPerform'.
     */
    _doNotPerform?: Element;
    /**
     * A code that identifies a particular service (i.e., procedure, diagnostic investigation, or panel of investigations) that have been requested.
     */
    code?: CodeableConcept;
    /**
     * Additional details and instructions about the how the services are to be delivered.   For example, and order for a urinary catheter may have an order detail for an external or indwelling catheter, or an order for a bandage may require additional instructions specifying how the bandage should be applied.
     */
    orderDetail?: CodeableConcept[];
    /**
     * An amount of service being requested which can be a quantity ( for example $1,500 home modification), a ratio ( for example, 20 half day visits per month), or a range (2.0 to 1.8 Gy per fraction).
     */
    quantityQuantity?: Quantity;
    /**
     * An amount of service being requested which can be a quantity ( for example $1,500 home modification), a ratio ( for example, 20 half day visits per month), or a range (2.0 to 1.8 Gy per fraction).
     */
    quantityRatio?: Ratio;
    /**
     * An amount of service being requested which can be a quantity ( for example $1,500 home modification), a ratio ( for example, 20 half day visits per month), or a range (2.0 to 1.8 Gy per fraction).
     */
    quantityRange?: Range;
    /**
     * On whom or what the service is to be performed. This is usually a human patient, but can also be requested on animals, groups of humans or animals, devices such as dialysis machines, or even locations (typically for environmental scans).
     */
    subject: Reference;
    /**
     * An encounter that provides additional information about the healthcare context in which this request is made.
     */
    encounter?: Reference;
    /**
     * The date/time at which the requested service should occur.
     */
    occurrenceDateTime?: dateTime;
    /**
     * Contains extension information for property 'occurrenceDateTime'.
     */
    _occurrenceDateTime?: Element;
    /**
     * The date/time at which the requested service should occur.
     */
    occurrencePeriod?: Period;
    /**
     * The date/time at which the requested service should occur.
     */
    occurrenceTiming?: Timing;
    /**
     * If a CodeableConcept is present, it indicates the pre-condition for performing the service.  For example "pain", "on flare-up", etc.
     */
    asneededBoolean?: boolean;
    /**
     * Contains extension information for property 'asneededBoolean'.
     */
    _asneededBoolean?: Element;
    /**
     * If a CodeableConcept is present, it indicates the pre-condition for performing the service.  For example "pain", "on flare-up", etc.
     */
    asneededCodeableConcept?: CodeableConcept;
    /**
     * When the request transitioned to being actionable.
     */
    authoredOn?: dateTime;
    /**
     * Contains extension information for property 'authoredOn'.
     */
    _authoredOn?: Element;
    /**
     * The individual who initiated the request and has responsibility for its activation.
     */
    requester?: Reference;
    /**
     * Desired type of performer for doing the requested service.
     */
    performerType?: CodeableConcept;
    /**
     * The desired performer for doing the requested service.  For example, the surgeon, dermatopathologist, endoscopist, etc.
     */
    performer?: Reference[];
    /**
     * The preferred location(s) where the procedure should actually happen in coded or free text form. E.g. at home or nursing day care center.
     */
    locationCode?: CodeableConcept[];
    /**
     * A reference to the the preferred location(s) where the procedure should actually happen. E.g. at home or nursing day care center.
     */
    locationReference?: Reference[];
    /**
     * An explanation or justification for why this service is being requested in coded or textual form.   This is often for billing purposes.  May relate to the resources referred to in `supportingInfo`.
     */
    reasonCode?: CodeableConcept[];
    /**
     * Indicates another resource that provides a justification for why this service is being requested.   May relate to the resources referred to in `supportingInfo`.
     */
    reasonReference?: Reference[];
    /**
     * Insurance plans, coverage extensions, pre-authorizations and/or pre-determinations that may be needed for delivering the requested service.
     */
    insurance?: Reference[];
    /**
     * Additional clinical information about the patient or specimen that may influence the services or their interpretations.     This information includes diagnosis, clinical findings and other observations.  In laboratory ordering these are typically referred to as "ask at order entry questions (AOEs)".  This includes observations explicitly requested by the producer (filler) to provide context or supporting information needed to complete the order. For example,  reporting the amount of inspired oxygen for blood gas measurements.
     */
    supportingInfo?: Reference[];
    /**
     * One or more specimens that the laboratory procedure will use.
     */
    specimen?: Reference[];
    /**
     * Anatomic location where the procedure should be performed. This is the target site.
     */
    bodySite?: CodeableConcept[];
    /**
     * Any other notes and comments made about the service request. For example, internal billing notes.
     */
    note?: Annotation[];
    /**
     * Instructions in terms that are understood by the patient or consumer.
     */
    patientInstruction?: string;
    /**
     * Contains extension information for property 'patientInstruction'.
     */
    _patientInstruction?: Element;
    /**
     * Key events in the history of the request.
     */
    relevantHistory?: Reference[];
}
/**
 * A signature along with supporting context. The signature may be a digital signature that is cryptographic in nature, or some other signature acceptable to the domain. This other signature may be as simple as a graphical image representing a hand-written signature, or a signature ceremony Different signature approaches have different utilities.
 */
export interface Signature {
    /**
     * Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
     */
    id?: string;
    /**
     * Contains extension information for property 'id'.
     */
    _id?: Element;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * An indication of the reason that the entity signed this document. This may be explicitly included as part of the signature information and can be used when determining accountability for various actions concerning the document.
     */
    type: Coding[];
    /**
     * When the digital signature was signed.
     */
    when: instant;
    /**
     * Contains extension information for property 'when'.
     */
    _when?: Element;
    /**
     * A reference to an application-usable description of the identity that signed  (e.g. the signature used their private key).
     */
    who: Reference;
    /**
     * A reference to an application-usable description of the identity that is represented by the signature.
     */
    onBehalfOf?: Reference;
    /**
     * A mime type that indicates the technical format of the target resources signed by the signature.
     */
    targetFormat?: code;
    /**
     * Contains extension information for property 'targetFormat'.
     */
    _targetFormat?: Element;
    /**
     * A mime type that indicates the technical format of the signature. Important mime types are application/signature+xml for X ML DigSig, application/jose for JWS, and image/* for a graphical image of a signature, etc.
     */
    sigFormat?: code;
    /**
     * Contains extension information for property 'sigFormat'.
     */
    _sigFormat?: Element;
    /**
     * The base64 encoding of the Signature content. When signature is not recorded electronically this element would be empty.
     */
    data?: base64Binary;
    /**
     * Contains extension information for property 'data'.
     */
    _data?: Element;
}
/**
 * The comparator is not used on a SimpleQuantity
 */
export interface Quantity {
    /**
     * Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
     */
    id?: string;
    /**
     * Contains extension information for property 'id'.
     */
    _id?: Element;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * The value of the measured amount. The value includes an implicit precision in the presentation of the value.
     */
    value?: decimal;
    /**
     * Contains extension information for property 'value'.
     */
    _value?: Element;
    /**
     * Not allowed to be used in this context
     */
    comparator?: code;
    /**
     * Contains extension information for property 'comparator'.
     */
    _comparator?: Element;
    /**
     * A human-readable form of the unit.
     */
    unit?: string;
    /**
     * Contains extension information for property 'unit'.
     */
    _unit?: Element;
    /**
     * The identification of the system that provides the coded form of the unit.
     */
    system?: uri;
    /**
     * Contains extension information for property 'system'.
     */
    _system?: Element;
    /**
     * A computer processable form of the unit in some unit representation system.
     */
    code?: code;
    /**
     * Contains extension information for property 'code'.
     */
    _code?: Element;
}
/**
 * A slot of time on a schedule that may be available for booking appointments.
 */
export interface Slot {
    /**
     * The type of the resource.
     */
    resourceType: string;
    /**
     * The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes.
     */
    id?: id;
    /**
     * Contains extension information for property 'id'.
     */
    _id?: Element;
    /**
     * The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource.
     */
    meta?: Meta;
    /**
     * A reference to a set of rules that were followed when the resource was constructed, and which must be understood when processing the content. Often, this is a reference to an implementation guide that defines the special rules along with other profiles etc.
     */
    implicitRules?: uri;
    /**
     * Contains extension information for property 'implicitRules'.
     */
    _implicitRules?: Element;
    /**
     * The base language in which the resource is written.
     */
    language?: code;
    /**
     * Contains extension information for property 'language'.
     */
    _language?: Element;
    /**
     * A human-readable narrative that contains a summary of the resource and can be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it "clinically safe" for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety.
     */
    text?: Narrative;
    /**
     * These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, and nor can they have their own independent transaction scope.
     */
    contained?: Resource[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * External Ids for this item.
     */
    identifier?: Identifier[];
    /**
     * A broad categorization of the service that is to be performed during this appointment.
     */
    serviceCategory?: CodeableConcept[];
    /**
     * The type of appointments that can be booked into this slot (ideally this would be an identifiable service - which is at a location, rather than the location itself). If provided then this overrides the value provided on the availability resource.
     */
    serviceType?: CodeableConcept[];
    /**
     * The specialty of a practitioner that would be required to perform the service requested in this appointment.
     */
    specialty?: CodeableConcept[];
    /**
     * The style of appointment or patient that may be booked in the slot (not service type).
     */
    appointmentType?: CodeableConcept;
    /**
     * The schedule resource that this slot defines an interval of status information.
     */
    schedule: Reference;
    /**
     * busy | free | busy-unavailable | busy-tentative | entered-in-error.
     */
    status: code;
    /**
     * Contains extension information for property 'status'.
     */
    _status?: Element;
    /**
     * Date/Time that the slot is to begin.
     */
    start: instant;
    /**
     * Contains extension information for property 'start'.
     */
    _start?: Element;
    /**
     * Date/Time that the slot is to conclude.
     */
    end: instant;
    /**
     * Contains extension information for property 'end'.
     */
    _end?: Element;
    /**
     * This slot has already been overbooked, appointments are unlikely to be accepted for this time.
     */
    overbooked?: boolean;
    /**
     * Contains extension information for property 'overbooked'.
     */
    _overbooked?: Element;
    /**
     * Comments on the slot to describe any extended information. Such as custom constraints on the slot.
     */
    comment?: string;
    /**
     * Contains extension information for property 'comment'.
     */
    _comment?: Element;
}
/**
 * A sample to be used for analysis.
 */
export interface Specimen {
    /**
     * The type of the resource.
     */
    resourceType: string;
    /**
     * The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes.
     */
    id?: id;
    /**
     * Contains extension information for property 'id'.
     */
    _id?: Element;
    /**
     * The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource.
     */
    meta?: Meta;
    /**
     * A reference to a set of rules that were followed when the resource was constructed, and which must be understood when processing the content. Often, this is a reference to an implementation guide that defines the special rules along with other profiles etc.
     */
    implicitRules?: uri;
    /**
     * Contains extension information for property 'implicitRules'.
     */
    _implicitRules?: Element;
    /**
     * The base language in which the resource is written.
     */
    language?: code;
    /**
     * Contains extension information for property 'language'.
     */
    _language?: Element;
    /**
     * A human-readable narrative that contains a summary of the resource and can be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it "clinically safe" for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety.
     */
    text?: Narrative;
    /**
     * These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, and nor can they have their own independent transaction scope.
     */
    contained?: Resource[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * Id for specimen.
     */
    identifier?: Identifier[];
    /**
     * The identifier assigned by the lab when accessioning specimen(s). This is not necessarily the same as the specimen identifier, depending on local lab procedures.
     */
    accessionIdentifier?: Identifier;
    /**
     * The availability of the specimen.
     */
    status?: code;
    /**
     * Contains extension information for property 'status'.
     */
    _status?: Element;
    /**
     * The kind of material that forms the specimen.
     */
    type?: CodeableConcept;
    /**
     * Where the specimen came from. This may be from patient(s), from a location (e.g., the source of an environmental sample), or a sampling of a substance or a device.
     */
    subject?: Reference;
    /**
     * Time when specimen was received for processing or testing.
     */
    receivedTime?: dateTime;
    /**
     * Contains extension information for property 'receivedTime'.
     */
    _receivedTime?: Element;
    /**
     * Reference to the parent (source) specimen which is used when the specimen was either derived from or a component of another specimen.
     */
    parent?: Reference[];
    /**
     * Details concerning a service request that required a specimen to be collected.
     */
    request?: Reference[];
    /**
     * Details concerning the specimen collection.
     */
    collection?: SpecimenCollection;
    /**
     * Details concerning processing and processing steps for the specimen.
     */
    processing?: SpecimenProcessing[];
    /**
     * The container holding the specimen.  The recursive nature of containers; i.e. blood in tube in tray in rack is not addressed here.
     */
    container?: SpecimenContainer[];
    /**
     * A mode or state of being that describes the nature of the specimen.
     */
    condition?: CodeableConcept[];
    /**
     * To communicate any details or issues about the specimen or during the specimen collection. (for example: broken vial, sent with patient, frozen).
     */
    note?: Annotation[];
}
/**
 * Details concerning the specimen collection.
 */
export interface SpecimenCollection {
    /**
     * Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
     */
    id?: string;
    /**
     * Contains extension information for property 'id'.
     */
    _id?: Element;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * Person who collected the specimen.
     */
    collector?: Reference;
    /**
     * Time when specimen was collected from subject - the physiologically relevant time.
     */
    collectedDateTime?: dateTime;
    /**
     * Contains extension information for property 'collectedDateTime'.
     */
    _collectedDateTime?: Element;
    /**
     * Time when specimen was collected from subject - the physiologically relevant time.
     */
    collectedPeriod?: Period;
    /**
     * The span of time over which the collection of a specimen occurred.
     */
    duration?: Duration;
    /**
     * The quantity of specimen collected; for instance the volume of a blood sample, or the physical measurement of an anatomic pathology sample.
     */
    quantity?: Quantity;
    /**
     * A coded value specifying the technique that is used to perform the procedure.
     */
    method?: CodeableConcept;
    /**
     * Anatomical location from which the specimen was collected (if subject is a patient). This is the target site.  This element is not used for environmental specimens.
     */
    bodySite?: CodeableConcept;
    /**
     * Abstinence or reduction from some or all food, drink, or both, for a period of time prior to sample collection.
     */
    fastingstatusCodeableConcept?: CodeableConcept;
    /**
     * Abstinence or reduction from some or all food, drink, or both, for a period of time prior to sample collection.
     */
    fastingstatusDuration?: Duration;
}
/**
 * Details concerning processing and processing steps for the specimen.
 */
export interface SpecimenProcessing {
    /**
     * Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
     */
    id?: string;
    /**
     * Contains extension information for property 'id'.
     */
    _id?: Element;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * Textual description of procedure.
     */
    description?: string;
    /**
     * Contains extension information for property 'description'.
     */
    _description?: Element;
    /**
     * A coded value specifying the procedure used to process the specimen.
     */
    procedure?: CodeableConcept;
    /**
     * Material used in the processing step.
     */
    additive?: Reference[];
    /**
     * A record of the time or period when the specimen processing occurred.  For example the time of sample fixation or the period of time the sample was in formalin.
     */
    timeDateTime?: dateTime;
    /**
     * Contains extension information for property 'timeDateTime'.
     */
    _timeDateTime?: Element;
    /**
     * A record of the time or period when the specimen processing occurred.  For example the time of sample fixation or the period of time the sample was in formalin.
     */
    timePeriod?: Period;
}
/**
 * The container holding the specimen.  The recursive nature of containers; i.e. blood in tube in tray in rack is not addressed here.
 */
export interface SpecimenContainer {
    /**
     * Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
     */
    id?: string;
    /**
     * Contains extension information for property 'id'.
     */
    _id?: Element;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * Id for container. There may be multiple; a manufacturer's bar code, lab assigned identifier, etc. The container ID may differ from the specimen id in some circumstances.
     */
    identifier?: Identifier[];
    /**
     * Textual description of the container.
     */
    description?: string;
    /**
     * Contains extension information for property 'description'.
     */
    _description?: Element;
    /**
     * The type of container associated with the specimen (e.g. slide, aliquot, etc.).
     */
    type?: CodeableConcept;
    /**
     * The capacity (volume or other measure) the container may contain.
     */
    capacity?: Quantity;
    /**
     * The quantity of specimen in the container; may be volume, dimensions, or other appropriate measurements, depending on the specimen type.
     */
    specimenQuantity?: Quantity;
    /**
     * Introduced substance to preserve, maintain or enhance the specimen. Examples: Formalin, Citrate, EDTA.
     */
    additiveCodeableConcept?: CodeableConcept;
    /**
     * Introduced substance to preserve, maintain or enhance the specimen. Examples: Formalin, Citrate, EDTA.
     */
    additiveReference?: Reference;
}
/**
 * A kind of specimen with associated set of requirements.
 */
export interface SpecimenDefinition {
    /**
     * The type of the resource.
     */
    resourceType: string;
    /**
     * The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes.
     */
    id?: id;
    /**
     * Contains extension information for property 'id'.
     */
    _id?: Element;
    /**
     * The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource.
     */
    meta?: Meta;
    /**
     * A reference to a set of rules that were followed when the resource was constructed, and which must be understood when processing the content. Often, this is a reference to an implementation guide that defines the special rules along with other profiles etc.
     */
    implicitRules?: uri;
    /**
     * Contains extension information for property 'implicitRules'.
     */
    _implicitRules?: Element;
    /**
     * The base language in which the resource is written.
     */
    language?: code;
    /**
     * Contains extension information for property 'language'.
     */
    _language?: Element;
    /**
     * A human-readable narrative that contains a summary of the resource and can be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it "clinically safe" for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety.
     */
    text?: Narrative;
    /**
     * These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, and nor can they have their own independent transaction scope.
     */
    contained?: Resource[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * A business identifier associated with the kind of specimen.
     */
    identifier?: Identifier;
    /**
     * The kind of material to be collected.
     */
    typeCollected?: CodeableConcept;
    /**
     * Preparation of the patient for specimen collection.
     */
    patientPreparation?: CodeableConcept[];
    /**
     * Time aspect of specimen collection (duration or offset).
     */
    timeAspect?: string;
    /**
     * Contains extension information for property 'timeAspect'.
     */
    _timeAspect?: Element;
    /**
     * The action to be performed for collecting the specimen.
     */
    collection?: CodeableConcept[];
    /**
     * Specimen conditioned in a container as expected by the testing laboratory.
     */
    typeTested?: SpecimenDefinitionTypeTested[];
}
/**
 * Specimen conditioned in a container as expected by the testing laboratory.
 */
export interface SpecimenDefinitionTypeTested {
    /**
     * Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
     */
    id?: string;
    /**
     * Contains extension information for property 'id'.
     */
    _id?: Element;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * Primary of secondary specimen.
     */
    isDerived?: boolean;
    /**
     * Contains extension information for property 'isDerived'.
     */
    _isDerived?: Element;
    /**
     * The kind of specimen conditioned for testing expected by lab.
     */
    type?: CodeableConcept;
    /**
     * The preference for this type of conditioned specimen.
     */
    preference: code;
    /**
     * Contains extension information for property 'preference'.
     */
    _preference?: Element;
    /**
     * The specimen's container.
     */
    container?: SpecimenDefinitionTypeTestedContainer;
    /**
     * Requirements for delivery and special handling of this kind of conditioned specimen.
     */
    requirement?: string;
    /**
     * Contains extension information for property 'requirement'.
     */
    _requirement?: Element;
    /**
     * The usual time that a specimen of this kind is retained after the ordered tests are completed, for the purpose of additional testing.
     */
    retentionTime?: Duration;
    /**
     * Criterion for rejection of the specimen in its container by the laboratory.
     */
    rejectionCriterion?: CodeableConcept[];
    /**
     * Set of instructions for preservation/transport of the specimen at a defined temperature interval, prior the testing process.
     */
    handling?: SpecimenDefinitionTypeTestedHandling[];
}
/**
 * The specimen's container.
 */
export interface SpecimenDefinitionTypeTestedContainer {
    /**
     * Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
     */
    id?: string;
    /**
     * Contains extension information for property 'id'.
     */
    _id?: Element;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * The type of material of the container.
     */
    material?: CodeableConcept;
    /**
     * The type of container used to contain this kind of specimen.
     */
    type?: CodeableConcept;
    /**
     * Color of container cap.
     */
    cap?: CodeableConcept;
    /**
     * The textual description of the kind of container.
     */
    description?: string;
    /**
     * Contains extension information for property 'description'.
     */
    _description?: Element;
    /**
     * The capacity (volume or other measure) of this kind of container.
     */
    capacity?: Quantity;
    /**
     * The minimum volume to be conditioned in the container.
     */
    minimumvolumeQuantity?: Quantity;
    /**
     * The minimum volume to be conditioned in the container.
     */
    minimumvolumeString?: string;
    /**
     * Contains extension information for property 'minimumvolumeString'.
     */
    _minimumvolumeString?: Element;
    /**
     * Substance introduced in the kind of container to preserve, maintain or enhance the specimen. Examples: Formalin, Citrate, EDTA.
     */
    additive?: SpecimenDefinitionTypeTestedContainerAdditive[];
    /**
     * Special processing that should be applied to the container for this kind of specimen.
     */
    preparation?: string;
    /**
     * Contains extension information for property 'preparation'.
     */
    _preparation?: Element;
}
/**
 * Substance introduced in the kind of container to preserve, maintain or enhance the specimen. Examples: Formalin, Citrate, EDTA.
 */
export interface SpecimenDefinitionTypeTestedContainerAdditive {
    /**
     * Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
     */
    id?: string;
    /**
     * Contains extension information for property 'id'.
     */
    _id?: Element;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * Substance introduced in the kind of container to preserve, maintain or enhance the specimen. Examples: Formalin, Citrate, EDTA.
     */
    additiveCodeableConcept: CodeableConcept;
    /**
     * Substance introduced in the kind of container to preserve, maintain or enhance the specimen. Examples: Formalin, Citrate, EDTA.
     */
    additiveReference: Reference;
}
/**
 * Set of instructions for preservation/transport of the specimen at a defined temperature interval, prior the testing process.
 */
export interface SpecimenDefinitionTypeTestedHandling {
    /**
     * Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
     */
    id?: string;
    /**
     * Contains extension information for property 'id'.
     */
    _id?: Element;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * It qualifies the interval of temperature, which characterizes an occurrence of handling. Conditions that are not related to temperature may be handled in the instruction element.
     */
    temperatureQualifier?: CodeableConcept;
    /**
     * The temperature interval for this set of handling instructions.
     */
    temperatureRange?: Range;
    /**
     * The maximum time interval of preservation of the specimen with these conditions.
     */
    maxDuration?: Duration;
    /**
     * Additional textual instructions for the preservation or transport of the specimen. For instance, 'Protect from light exposure'.
     */
    instruction?: string;
    /**
     * Contains extension information for property 'instruction'.
     */
    _instruction?: Element;
}
/**
 * A definition of a FHIR structure. This resource is used to describe the underlying resources, data types defined in FHIR, and also for describing extensions and constraints on resources and data types.
 */
export interface StructureDefinition {
    /**
     * The type of the resource.
     */
    resourceType: string;
    /**
     * The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes.
     */
    id?: id;
    /**
     * Contains extension information for property 'id'.
     */
    _id?: Element;
    /**
     * The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource.
     */
    meta?: Meta;
    /**
     * A reference to a set of rules that were followed when the resource was constructed, and which must be understood when processing the content. Often, this is a reference to an implementation guide that defines the special rules along with other profiles etc.
     */
    implicitRules?: uri;
    /**
     * Contains extension information for property 'implicitRules'.
     */
    _implicitRules?: Element;
    /**
     * The base language in which the resource is written.
     */
    language?: code;
    /**
     * Contains extension information for property 'language'.
     */
    _language?: Element;
    /**
     * A human-readable narrative that contains a summary of the resource and can be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it "clinically safe" for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety.
     */
    text?: Narrative;
    /**
     * These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, and nor can they have their own independent transaction scope.
     */
    contained?: Resource[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * An absolute URI that is used to identify this structure definition when it is referenced in a specification, model, design or an instance; also called its canonical identifier. This SHOULD be globally unique and SHOULD be a literal address at which at which an authoritative instance of this structure definition is (or will be) published. This URL can be the target of a canonical reference. It SHALL remain the same when the structure definition is stored on different servers.
     */
    url: uri;
    /**
     * Contains extension information for property 'url'.
     */
    _url?: Element;
    /**
     * A formal identifier that is used to identify this structure definition when it is represented in other formats, or referenced in a specification, model, design or an instance.
     */
    identifier?: Identifier[];
    /**
     * The identifier that is used to identify this version of the structure definition when it is referenced in a specification, model, design or instance. This is an arbitrary value managed by the structure definition author and is not expected to be globally unique. For example, it might be a timestamp (e.g. yyyymmdd) if a managed version is not available. There is also no expectation that versions can be placed in a lexicographical sequence.
     */
    version?: string;
    /**
     * Contains extension information for property 'version'.
     */
    _version?: Element;
    /**
     * A natural language name identifying the structure definition. This name should be usable as an identifier for the module by machine processing applications such as code generation.
     */
    name: string;
    /**
     * Contains extension information for property 'name'.
     */
    _name?: Element;
    /**
     * A short, descriptive, user-friendly title for the structure definition.
     */
    title?: string;
    /**
     * Contains extension information for property 'title'.
     */
    _title?: Element;
    /**
     * The status of this structure definition. Enables tracking the life-cycle of the content.
     */
    status: code;
    /**
     * Contains extension information for property 'status'.
     */
    _status?: Element;
    /**
     * A Boolean value to indicate that this structure definition is authored for testing purposes (or education/evaluation/marketing) and is not intended to be used for genuine usage.
     */
    experimental?: boolean;
    /**
     * Contains extension information for property 'experimental'.
     */
    _experimental?: Element;
    /**
     * The date  (and optionally time) when the structure definition was published. The date must change when the business version changes and it must change if the status code changes. In addition, it should change when the substantive content of the structure definition changes.
     */
    date?: dateTime;
    /**
     * Contains extension information for property 'date'.
     */
    _date?: Element;
    /**
     * The name of the organization or individual that published the structure definition.
     */
    publisher?: string;
    /**
     * Contains extension information for property 'publisher'.
     */
    _publisher?: Element;
    /**
     * Contact details to assist a user in finding and communicating with the publisher.
     */
    contact?: ContactDetail[];
    /**
     * A free text natural language description of the structure definition from a consumer's perspective.
     */
    description?: markdown;
    /**
     * Contains extension information for property 'description'.
     */
    _description?: Element;
    /**
     * The content was developed with a focus and intent of supporting the contexts that are listed. These contexts may be general categories (gender, age, ...) or may be references to specific programs (insurance plans, studies, ...) and may be used to assist with indexing and searching for appropriate structure definition instances.
     */
    useContext?: UsageContext[];
    /**
     * A legal or geographic region in which the structure definition is intended to be used.
     */
    jurisdiction?: CodeableConcept[];
    /**
     * Explanation of why this structure definition is needed and why it has been designed as it has.
     */
    purpose?: markdown;
    /**
     * Contains extension information for property 'purpose'.
     */
    _purpose?: Element;
    /**
     * A copyright statement relating to the structure definition and/or its contents. Copyright statements are generally legal restrictions on the use and publishing of the structure definition.
     */
    copyright?: markdown;
    /**
     * Contains extension information for property 'copyright'.
     */
    _copyright?: Element;
    /**
     * A set of key words or terms from external terminologies that may be used to assist with indexing and searching of templates nby describing the use of this structure definition, or the content it describes.
     */
    keyword?: Coding[];
    /**
     * The version of the FHIR specification on which this StructureDefinition is based - this is the formal version of the specification, without the revision number, e.g. [publication].[major].[minor], which is 4.0.0. for this version.
     */
    fhirVersion?: code;
    /**
     * Contains extension information for property 'fhirVersion'.
     */
    _fhirVersion?: Element;
    /**
     * An external specification that the content is mapped to.
     */
    mapping?: StructureDefinitionMapping[];
    /**
     * Defines the kind of structure that this definition is describing.
     */
    kind: code;
    /**
     * Contains extension information for property 'kind'.
     */
    _kind?: Element;
    /**
     * Whether structure this definition describes is abstract or not  - that is, whether the structure is not intended to be instantiated. For Resources and Data types, abstract types will never be exchanged  between systems.
     */
    abstract: boolean;
    /**
     * Contains extension information for property 'abstract'.
     */
    _abstract?: Element;
    /**
     * Identifies the types of resource or data type elements to which the extension can be applied.
     */
    context?: StructureDefinitionContext[];
    /**
     * A set of rules as FHIRPath Invariants about when the extension can be used (e.g. co-occurrence variants for the extension). All the rules must be true.
     */
    contextInvariant?: string[];
    /**
     * Contains extension information for property 'contextInvariant'.
     */
    _contextInvariant?: Element[];
    /**
     * The type this structure describes. If the derivation kind is 'specialization' then this is the master definition for a type, and there is always one of these (a data type, an extension, a resource, including abstract ones). Otherwise the structure definition is a constraint on the stated type (and in this case, the type cannot be an abstract type).  References are URLs that are relative to http://hl7.org/fhir/StructureDefinition e.g. "string" is a reference to http://hl7.org/fhir/StructureDefinition/string. Absolute URLs are only allowed in logical models.
     */
    type: uri;
    /**
     * Contains extension information for property 'type'.
     */
    _type?: Element;
    /**
     * An absolute URI that is the base structure from which this type is derived, either by specialization or constraint.
     */
    baseDefinition?: canonical;
    /**
     * How the type relates to the baseDefinition.
     */
    derivation?: code;
    /**
     * Contains extension information for property 'derivation'.
     */
    _derivation?: Element;
    /**
     * A snapshot view is expressed in a standalone form that can be used and interpreted without considering the base StructureDefinition.
     */
    snapshot?: StructureDefinitionSnapshot;
    /**
     * A differential view is expressed relative to the base StructureDefinition - a statement of differences that it applies.
     */
    differential?: StructureDefinitionDifferential;
}
/**
 * An external specification that the content is mapped to.
 */
export interface StructureDefinitionMapping {
    /**
     * Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
     */
    id?: string;
    /**
     * Contains extension information for property 'id'.
     */
    _id?: Element;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * An Internal id that is used to identify this mapping set when specific mappings are made.
     */
    identity: id;
    /**
     * Contains extension information for property 'identity'.
     */
    _identity?: Element;
    /**
     * An absolute URI that identifies the specification that this mapping is expressed to.
     */
    uri?: uri;
    /**
     * Contains extension information for property 'uri'.
     */
    _uri?: Element;
    /**
     * A name for the specification that is being mapped to.
     */
    name?: string;
    /**
     * Contains extension information for property 'name'.
     */
    _name?: Element;
    /**
     * Comments about this mapping, including version notes, issues, scope limitations, and other important notes for usage.
     */
    comment?: string;
    /**
     * Contains extension information for property 'comment'.
     */
    _comment?: Element;
}
/**
 * Identifies the types of resource or data type elements to which the extension can be applied.
 */
export interface StructureDefinitionContext {
    /**
     * Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
     */
    id?: string;
    /**
     * Contains extension information for property 'id'.
     */
    _id?: Element;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * Defines how to interpret the expression that defines what the context of the extension is.
     */
    type: code;
    /**
     * Contains extension information for property 'type'.
     */
    _type?: Element;
    /**
     * An expression that defines where an extension can be used in resources.
     */
    expression: string;
    /**
     * Contains extension information for property 'expression'.
     */
    _expression?: Element;
}
/**
 * A snapshot view is expressed in a standalone form that can be used and interpreted without considering the base StructureDefinition.
 */
export interface StructureDefinitionSnapshot {
    /**
     * Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
     */
    id?: string;
    /**
     * Contains extension information for property 'id'.
     */
    _id?: Element;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * Captures constraints on each element within the resource.
     */
    element: ElementDefinition[];
}
/**
 * A differential view is expressed relative to the base StructureDefinition - a statement of differences that it applies.
 */
export interface StructureDefinitionDifferential {
    /**
     * Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
     */
    id?: string;
    /**
     * Contains extension information for property 'id'.
     */
    _id?: Element;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * Captures constraints on each element within the resource.
     */
    element: ElementDefinition[];
}
/**
 * A Map of relationships between 2 structures that can be used to transform data.
 */
export interface StructureMap {
    /**
     * The type of the resource.
     */
    resourceType: string;
    /**
     * The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes.
     */
    id?: id;
    /**
     * Contains extension information for property 'id'.
     */
    _id?: Element;
    /**
     * The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource.
     */
    meta?: Meta;
    /**
     * A reference to a set of rules that were followed when the resource was constructed, and which must be understood when processing the content. Often, this is a reference to an implementation guide that defines the special rules along with other profiles etc.
     */
    implicitRules?: uri;
    /**
     * Contains extension information for property 'implicitRules'.
     */
    _implicitRules?: Element;
    /**
     * The base language in which the resource is written.
     */
    language?: code;
    /**
     * Contains extension information for property 'language'.
     */
    _language?: Element;
    /**
     * A human-readable narrative that contains a summary of the resource and can be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it "clinically safe" for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety.
     */
    text?: Narrative;
    /**
     * These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, and nor can they have their own independent transaction scope.
     */
    contained?: Resource[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * An absolute URI that is used to identify this structure map when it is referenced in a specification, model, design or an instance; also called its canonical identifier. This SHOULD be globally unique and SHOULD be a literal address at which at which an authoritative instance of this structure map is (or will be) published. This URL can be the target of a canonical reference. It SHALL remain the same when the structure map is stored on different servers.
     */
    url: uri;
    /**
     * Contains extension information for property 'url'.
     */
    _url?: Element;
    /**
     * A formal identifier that is used to identify this structure map when it is represented in other formats, or referenced in a specification, model, design or an instance.
     */
    identifier?: Identifier[];
    /**
     * The identifier that is used to identify this version of the structure map when it is referenced in a specification, model, design or instance. This is an arbitrary value managed by the structure map author and is not expected to be globally unique. For example, it might be a timestamp (e.g. yyyymmdd) if a managed version is not available. There is also no expectation that versions can be placed in a lexicographical sequence.
     */
    version?: string;
    /**
     * Contains extension information for property 'version'.
     */
    _version?: Element;
    /**
     * A natural language name identifying the structure map. This name should be usable as an identifier for the module by machine processing applications such as code generation.
     */
    name: string;
    /**
     * Contains extension information for property 'name'.
     */
    _name?: Element;
    /**
     * A short, descriptive, user-friendly title for the structure map.
     */
    title?: string;
    /**
     * Contains extension information for property 'title'.
     */
    _title?: Element;
    /**
     * The status of this structure map. Enables tracking the life-cycle of the content.
     */
    status: code;
    /**
     * Contains extension information for property 'status'.
     */
    _status?: Element;
    /**
     * A Boolean value to indicate that this structure map is authored for testing purposes (or education/evaluation/marketing) and is not intended to be used for genuine usage.
     */
    experimental?: boolean;
    /**
     * Contains extension information for property 'experimental'.
     */
    _experimental?: Element;
    /**
     * The date  (and optionally time) when the structure map was published. The date must change when the business version changes and it must change if the status code changes. In addition, it should change when the substantive content of the structure map changes.
     */
    date?: dateTime;
    /**
     * Contains extension information for property 'date'.
     */
    _date?: Element;
    /**
     * The name of the organization or individual that published the structure map.
     */
    publisher?: string;
    /**
     * Contains extension information for property 'publisher'.
     */
    _publisher?: Element;
    /**
     * Contact details to assist a user in finding and communicating with the publisher.
     */
    contact?: ContactDetail[];
    /**
     * A free text natural language description of the structure map from a consumer's perspective.
     */
    description?: markdown;
    /**
     * Contains extension information for property 'description'.
     */
    _description?: Element;
    /**
     * The content was developed with a focus and intent of supporting the contexts that are listed. These contexts may be general categories (gender, age, ...) or may be references to specific programs (insurance plans, studies, ...) and may be used to assist with indexing and searching for appropriate structure map instances.
     */
    useContext?: UsageContext[];
    /**
     * A legal or geographic region in which the structure map is intended to be used.
     */
    jurisdiction?: CodeableConcept[];
    /**
     * Explanation of why this structure map is needed and why it has been designed as it has.
     */
    purpose?: markdown;
    /**
     * Contains extension information for property 'purpose'.
     */
    _purpose?: Element;
    /**
     * A copyright statement relating to the structure map and/or its contents. Copyright statements are generally legal restrictions on the use and publishing of the structure map.
     */
    copyright?: markdown;
    /**
     * Contains extension information for property 'copyright'.
     */
    _copyright?: Element;
    /**
     * A structure definition used by this map. The structure definition may describe instances that are converted, or the instances that are produced.
     */
    structure?: StructureMapStructure[];
    /**
     * Other maps used by this map (canonical URLs).
     */
    import?: canonical[];
    /**
     * Organizes the mapping into manageable chunks for human review/ease of maintenance.
     */
    group: StructureMapGroup[];
}
/**
 * A structure definition used by this map. The structure definition may describe instances that are converted, or the instances that are produced.
 */
export interface StructureMapStructure {
    /**
     * Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
     */
    id?: string;
    /**
     * Contains extension information for property 'id'.
     */
    _id?: Element;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * The canonical reference to the structure.
     */
    url: canonical;
    /**
     * How the referenced structure is used in this mapping.
     */
    mode: code;
    /**
     * Contains extension information for property 'mode'.
     */
    _mode?: Element;
    /**
     * The name used for this type in the map.
     */
    alias?: string;
    /**
     * Contains extension information for property 'alias'.
     */
    _alias?: Element;
    /**
     * Documentation that describes how the structure is used in the mapping.
     */
    documentation?: string;
    /**
     * Contains extension information for property 'documentation'.
     */
    _documentation?: Element;
}
/**
 * Organizes the mapping into manageable chunks for human review/ease of maintenance.
 */
export interface StructureMapGroup {
    /**
     * Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
     */
    id?: string;
    /**
     * Contains extension information for property 'id'.
     */
    _id?: Element;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * A unique name for the group for the convenience of human readers.
     */
    name: id;
    /**
     * Contains extension information for property 'name'.
     */
    _name?: Element;
    /**
     * Another group that this group adds rules to.
     */
    extends?: id;
    /**
     * Contains extension information for property 'extends'.
     */
    _extends?: Element;
    /**
     * If this is the default rule set to apply for the source type or this combination of types.
     */
    typeMode: code;
    /**
     * Contains extension information for property 'typeMode'.
     */
    _typeMode?: Element;
    /**
     * Additional supporting documentation that explains the purpose of the group and the types of mappings within it.
     */
    documentation?: string;
    /**
     * Contains extension information for property 'documentation'.
     */
    _documentation?: Element;
    /**
     * A name assigned to an instance of data. The instance must be provided when the mapping is invoked.
     */
    input: StructureMapGroupInput[];
    /**
     * Transform Rule from source to target.
     */
    rule: StructureMapGroupRule[];
}
/**
 * A name assigned to an instance of data. The instance must be provided when the mapping is invoked.
 */
export interface StructureMapGroupInput {
    /**
     * Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
     */
    id?: string;
    /**
     * Contains extension information for property 'id'.
     */
    _id?: Element;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * Name for this instance of data.
     */
    name: id;
    /**
     * Contains extension information for property 'name'.
     */
    _name?: Element;
    /**
     * Type for this instance of data.
     */
    type?: string;
    /**
     * Contains extension information for property 'type'.
     */
    _type?: Element;
    /**
     * Mode for this instance of data.
     */
    mode: code;
    /**
     * Contains extension information for property 'mode'.
     */
    _mode?: Element;
    /**
     * Documentation for this instance of data.
     */
    documentation?: string;
    /**
     * Contains extension information for property 'documentation'.
     */
    _documentation?: Element;
}
/**
 * Transform Rule from source to target.
 */
export interface StructureMapGroupRule {
    /**
     * Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
     */
    id?: string;
    /**
     * Contains extension information for property 'id'.
     */
    _id?: Element;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * Name of the rule for internal references.
     */
    name: id;
    /**
     * Contains extension information for property 'name'.
     */
    _name?: Element;
    /**
     * Source inputs to the mapping.
     */
    source: StructureMapGroupRuleSource[];
    /**
     * Content to create because of this mapping rule.
     */
    target?: StructureMapGroupRuleTarget[];
    /**
     * Rules contained in this rule.
     */
    rule?: StructureMapGroupRule[];
    /**
     * Which other rules to apply in the context of this rule.
     */
    dependent?: StructureMapGroupRuleDependent[];
    /**
     * Documentation for this instance of data.
     */
    documentation?: string;
    /**
     * Contains extension information for property 'documentation'.
     */
    _documentation?: Element;
}
/**
 * Source inputs to the mapping.
 */
export interface StructureMapGroupRuleSource {
    /**
     * Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
     */
    id?: string;
    /**
     * Contains extension information for property 'id'.
     */
    _id?: Element;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * Type or variable this rule applies to.
     */
    context: id;
    /**
     * Contains extension information for property 'context'.
     */
    _context?: Element;
    /**
     * Specified minimum cardinality for the element. This is optional; if present, it acts an implicit check on the input content.
     */
    min?: integer;
    /**
     * Contains extension information for property 'min'.
     */
    _min?: Element;
    /**
     * Specified maximum cardinality for the element - a number or a "*". This is optional; if present, it acts an implicit check on the input content (* just serves as documentation; it's the default value).
     */
    max?: string;
    /**
     * Contains extension information for property 'max'.
     */
    _max?: Element;
    /**
     * Specified type for the element. This works as a condition on the mapping - use for polymorphic elements.
     */
    type?: string;
    /**
     * Contains extension information for property 'type'.
     */
    _type?: Element;
    /**
     * A value to use if there is no existing value in the source object.
     */
    defaultvalueBase64Binary?: base64Binary;
    /**
     * Contains extension information for property 'defaultvalueBase64Binary'.
     */
    _defaultvalueBase64Binary?: Element;
    /**
     * A value to use if there is no existing value in the source object.
     */
    defaultvalueBoolean?: boolean;
    /**
     * Contains extension information for property 'defaultvalueBoolean'.
     */
    _defaultvalueBoolean?: Element;
    /**
     * A value to use if there is no existing value in the source object.
     */
    defaultvalueCanonical?: canonical;
    /**
     * A value to use if there is no existing value in the source object.
     */
    defaultvalueCode?: code;
    /**
     * Contains extension information for property 'defaultvalueCode'.
     */
    _defaultvalueCode?: Element;
    /**
     * A value to use if there is no existing value in the source object.
     */
    defaultvalueDate?: date;
    /**
     * Contains extension information for property 'defaultvalueDate'.
     */
    _defaultvalueDate?: Element;
    /**
     * A value to use if there is no existing value in the source object.
     */
    defaultvalueDateTime?: dateTime;
    /**
     * Contains extension information for property 'defaultvalueDateTime'.
     */
    _defaultvalueDateTime?: Element;
    /**
     * A value to use if there is no existing value in the source object.
     */
    defaultvalueDecimal?: decimal;
    /**
     * Contains extension information for property 'defaultvalueDecimal'.
     */
    _defaultvalueDecimal?: Element;
    /**
     * A value to use if there is no existing value in the source object.
     */
    defaultvalueId?: id;
    /**
     * Contains extension information for property 'defaultvalueId'.
     */
    _defaultvalueId?: Element;
    /**
     * A value to use if there is no existing value in the source object.
     */
    defaultvalueInstant?: instant;
    /**
     * Contains extension information for property 'defaultvalueInstant'.
     */
    _defaultvalueInstant?: Element;
    /**
     * A value to use if there is no existing value in the source object.
     */
    defaultvalueInteger?: integer;
    /**
     * Contains extension information for property 'defaultvalueInteger'.
     */
    _defaultvalueInteger?: Element;
    /**
     * A value to use if there is no existing value in the source object.
     */
    defaultvalueMarkdown?: markdown;
    /**
     * Contains extension information for property 'defaultvalueMarkdown'.
     */
    _defaultvalueMarkdown?: Element;
    /**
     * A value to use if there is no existing value in the source object.
     */
    defaultvalueOid?: oid;
    /**
     * Contains extension information for property 'defaultvalueOid'.
     */
    _defaultvalueOid?: Element;
    /**
     * A value to use if there is no existing value in the source object.
     */
    defaultvaluePositiveInt?: positiveInt;
    /**
     * Contains extension information for property 'defaultvaluePositiveInt'.
     */
    _defaultvaluePositiveInt?: Element;
    /**
     * A value to use if there is no existing value in the source object.
     */
    defaultvalueString?: string;
    /**
     * Contains extension information for property 'defaultvalueString'.
     */
    _defaultvalueString?: Element;
    /**
     * A value to use if there is no existing value in the source object.
     */
    defaultvalueTime?: time;
    /**
     * Contains extension information for property 'defaultvalueTime'.
     */
    _defaultvalueTime?: Element;
    /**
     * A value to use if there is no existing value in the source object.
     */
    defaultvalueUnsignedInt?: unsignedInt;
    /**
     * Contains extension information for property 'defaultvalueUnsignedInt'.
     */
    _defaultvalueUnsignedInt?: Element;
    /**
     * A value to use if there is no existing value in the source object.
     */
    defaultvalueUri?: uri;
    /**
     * Contains extension information for property 'defaultvalueUri'.
     */
    _defaultvalueUri?: Element;
    /**
     * A value to use if there is no existing value in the source object.
     */
    defaultvalueUrl?: url;
    /**
     * A value to use if there is no existing value in the source object.
     */
    defaultvalueUuid?: uuid;
    /**
     * A value to use if there is no existing value in the source object.
     */
    defaultvalueAddress?: Address;
    /**
     * A value to use if there is no existing value in the source object.
     */
    defaultvalueAge?: Age;
    /**
     * A value to use if there is no existing value in the source object.
     */
    defaultvalueAnnotation?: Annotation;
    /**
     * A value to use if there is no existing value in the source object.
     */
    defaultvalueAttachment?: Attachment;
    /**
     * A value to use if there is no existing value in the source object.
     */
    defaultvalueCodeableConcept?: CodeableConcept;
    /**
     * A value to use if there is no existing value in the source object.
     */
    defaultvalueCoding?: Coding;
    /**
     * A value to use if there is no existing value in the source object.
     */
    defaultvalueContactPoint?: ContactPoint;
    /**
     * A value to use if there is no existing value in the source object.
     */
    defaultvalueCount?: Count;
    /**
     * A value to use if there is no existing value in the source object.
     */
    defaultvalueDistance?: Distance;
    /**
     * A value to use if there is no existing value in the source object.
     */
    defaultvalueDuration?: Duration;
    /**
     * A value to use if there is no existing value in the source object.
     */
    defaultvalueHumanName?: HumanName;
    /**
     * A value to use if there is no existing value in the source object.
     */
    defaultvalueIdentifier?: Identifier;
    /**
     * A value to use if there is no existing value in the source object.
     */
    defaultvalueMoney?: Money;
    /**
     * A value to use if there is no existing value in the source object.
     */
    defaultvaluePeriod?: Period;
    /**
     * A value to use if there is no existing value in the source object.
     */
    defaultvalueQuantity?: Quantity;
    /**
     * A value to use if there is no existing value in the source object.
     */
    defaultvalueRange?: Range;
    /**
     * A value to use if there is no existing value in the source object.
     */
    defaultvalueRatio?: Ratio;
    /**
     * A value to use if there is no existing value in the source object.
     */
    defaultvalueReference?: Reference;
    /**
     * A value to use if there is no existing value in the source object.
     */
    defaultvalueSampledData?: SampledData;
    /**
     * A value to use if there is no existing value in the source object.
     */
    defaultvalueSignature?: Signature;
    /**
     * A value to use if there is no existing value in the source object.
     */
    defaultvalueTiming?: Timing;
    /**
     * A value to use if there is no existing value in the source object.
     */
    defaultvalueContactDetail?: ContactDetail;
    /**
     * A value to use if there is no existing value in the source object.
     */
    defaultvalueContributor?: Contributor;
    /**
     * A value to use if there is no existing value in the source object.
     */
    defaultvalueDataRequirement?: DataRequirement;
    /**
     * A value to use if there is no existing value in the source object.
     */
    defaultvalueExpression?: Expression;
    /**
     * A value to use if there is no existing value in the source object.
     */
    defaultvalueParameterDefinition?: ParameterDefinition;
    /**
     * A value to use if there is no existing value in the source object.
     */
    defaultvalueRelatedArtifact?: RelatedArtifact;
    /**
     * A value to use if there is no existing value in the source object.
     */
    defaultvalueTriggerDefinition?: TriggerDefinition;
    /**
     * A value to use if there is no existing value in the source object.
     */
    defaultvalueUsageContext?: UsageContext;
    /**
     * A value to use if there is no existing value in the source object.
     */
    defaultvalueDosage?: Dosage;
    /**
     * Optional field for this source.
     */
    element?: string;
    /**
     * Contains extension information for property 'element'.
     */
    _element?: Element;
    /**
     * How to handle the list mode for this element.
     */
    listMode?: code;
    /**
     * Contains extension information for property 'listMode'.
     */
    _listMode?: Element;
    /**
     * Named context for field, if a field is specified.
     */
    variable?: id;
    /**
     * Contains extension information for property 'variable'.
     */
    _variable?: Element;
    /**
     * FHIRPath expression  - must be true or the rule does not apply.
     */
    condition?: string;
    /**
     * Contains extension information for property 'condition'.
     */
    _condition?: Element;
    /**
     * FHIRPath expression  - must be true or the mapping engine throws an error instead of completing.
     */
    check?: string;
    /**
     * Contains extension information for property 'check'.
     */
    _check?: Element;
    /**
     * A FHIRPath expression which specifies a message to put in the transform log when content matching the source rule is found.
     */
    logMessage?: string;
    /**
     * Contains extension information for property 'logMessage'.
     */
    _logMessage?: Element;
}
/**
 * Content to create because of this mapping rule.
 */
export interface StructureMapGroupRuleTarget {
    /**
     * Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
     */
    id?: string;
    /**
     * Contains extension information for property 'id'.
     */
    _id?: Element;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * Type or variable this rule applies to.
     */
    context?: id;
    /**
     * Contains extension information for property 'context'.
     */
    _context?: Element;
    /**
     * How to interpret the context.
     */
    contextType?: code;
    /**
     * Contains extension information for property 'contextType'.
     */
    _contextType?: Element;
    /**
     * Field to create in the context.
     */
    element?: string;
    /**
     * Contains extension information for property 'element'.
     */
    _element?: Element;
    /**
     * Named context for field, if desired, and a field is specified.
     */
    variable?: id;
    /**
     * Contains extension information for property 'variable'.
     */
    _variable?: Element;
    /**
     * If field is a list, how to manage the list.
     */
    listMode?: code[];
    /**
     * Contains extension information for property 'listMode'.
     */
    _listMode?: Element[];
    /**
     * Internal rule reference for shared list items.
     */
    listRuleId?: id;
    /**
     * Contains extension information for property 'listRuleId'.
     */
    _listRuleId?: Element;
    /**
     * How the data is copied / created.
     */
    transform?: code;
    /**
     * Contains extension information for property 'transform'.
     */
    _transform?: Element;
    /**
     * Parameters to the transform.
     */
    parameter?: StructureMapGroupRuleTargetParameter[];
}
/**
 * Parameters to the transform.
 */
export interface StructureMapGroupRuleTargetParameter {
    /**
     * Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
     */
    id?: string;
    /**
     * Contains extension information for property 'id'.
     */
    _id?: Element;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * Parameter value - variable or literal.
     */
    valueId: id;
    /**
     * Contains extension information for property 'valueId'.
     */
    _valueId?: Element;
    /**
     * Parameter value - variable or literal.
     */
    valueString: string;
    /**
     * Contains extension information for property 'valueString'.
     */
    _valueString?: Element;
    /**
     * Parameter value - variable or literal.
     */
    valueBoolean: boolean;
    /**
     * Contains extension information for property 'valueBoolean'.
     */
    _valueBoolean?: Element;
    /**
     * Parameter value - variable or literal.
     */
    valueInteger: integer;
    /**
     * Contains extension information for property 'valueInteger'.
     */
    _valueInteger?: Element;
    /**
     * Parameter value - variable or literal.
     */
    valueDecimal: decimal;
    /**
     * Contains extension information for property 'valueDecimal'.
     */
    _valueDecimal?: Element;
}
/**
 * Which other rules to apply in the context of this rule.
 */
export interface StructureMapGroupRuleDependent {
    /**
     * Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
     */
    id?: string;
    /**
     * Contains extension information for property 'id'.
     */
    _id?: Element;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * Name of a rule or group to apply.
     */
    name: id;
    /**
     * Contains extension information for property 'name'.
     */
    _name?: Element;
    /**
     * Variable to pass to the rule or group.
     */
    variable: string[];
    /**
     * Contains extension information for property 'variable'.
     */
    _variable?: Element[];
}
/**
 * The subscription resource is used to define a push-based subscription from a server to another system. Once a subscription is registered with the server, the server checks every resource that is created or updated, and if the resource matches the given criteria, it sends a message on the defined "channel" so that another system can take an appropriate action.
 */
export interface Subscription {
    /**
     * The type of the resource.
     */
    resourceType: string;
    /**
     * The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes.
     */
    id?: id;
    /**
     * Contains extension information for property 'id'.
     */
    _id?: Element;
    /**
     * The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource.
     */
    meta?: Meta;
    /**
     * A reference to a set of rules that were followed when the resource was constructed, and which must be understood when processing the content. Often, this is a reference to an implementation guide that defines the special rules along with other profiles etc.
     */
    implicitRules?: uri;
    /**
     * Contains extension information for property 'implicitRules'.
     */
    _implicitRules?: Element;
    /**
     * The base language in which the resource is written.
     */
    language?: code;
    /**
     * Contains extension information for property 'language'.
     */
    _language?: Element;
    /**
     * A human-readable narrative that contains a summary of the resource and can be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it "clinically safe" for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety.
     */
    text?: Narrative;
    /**
     * These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, and nor can they have their own independent transaction scope.
     */
    contained?: Resource[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * The status of the subscription, which marks the server state for managing the subscription.
     */
    status: code;
    /**
     * Contains extension information for property 'status'.
     */
    _status?: Element;
    /**
     * Contact details for a human to contact about the subscription. The primary use of this for system administrator troubleshooting.
     */
    contact?: ContactPoint[];
    /**
     * The time for the server to turn the subscription off.
     */
    end?: instant;
    /**
     * Contains extension information for property 'end'.
     */
    _end?: Element;
    /**
     * A description of why this subscription is defined.
     */
    reason: string;
    /**
     * Contains extension information for property 'reason'.
     */
    _reason?: Element;
    /**
     * The rules that the server should use to determine when to generate notifications for this subscription.
     */
    criteria: string;
    /**
     * Contains extension information for property 'criteria'.
     */
    _criteria?: Element;
    /**
     * A record of the last error that occurred when the server processed a notification.
     */
    error?: string;
    /**
     * Contains extension information for property 'error'.
     */
    _error?: Element;
    /**
     * Details where to send notifications when resources are received that meet the criteria.
     */
    channel: SubscriptionChannel;
}
/**
 * Details where to send notifications when resources are received that meet the criteria.
 */
export interface SubscriptionChannel {
    /**
     * Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
     */
    id?: string;
    /**
     * Contains extension information for property 'id'.
     */
    _id?: Element;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * The type of channel to send notifications on.
     */
    type: code;
    /**
     * Contains extension information for property 'type'.
     */
    _type?: Element;
    /**
     * The url that describes the actual end-point to send messages to.
     */
    endpoint?: url;
    /**
     * The mime type to send the payload in - either application/fhir+xml, or application/fhir+json. If the payload is not present, then there is no payload in the notification, just a notification. The mime type "text/plain" may also be used for Email and SMS subscriptions.
     */
    payload?: code;
    /**
     * Contains extension information for property 'payload'.
     */
    _payload?: Element;
    /**
     * Additional headers / information to send as part of the notification.
     */
    header?: string[];
    /**
     * Contains extension information for property 'header'.
     */
    _header?: Element[];
}
/**
 * A homogeneous material with a definite composition.
 */
export interface Substance {
    /**
     * The type of the resource.
     */
    resourceType: string;
    /**
     * The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes.
     */
    id?: id;
    /**
     * Contains extension information for property 'id'.
     */
    _id?: Element;
    /**
     * The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource.
     */
    meta?: Meta;
    /**
     * A reference to a set of rules that were followed when the resource was constructed, and which must be understood when processing the content. Often, this is a reference to an implementation guide that defines the special rules along with other profiles etc.
     */
    implicitRules?: uri;
    /**
     * Contains extension information for property 'implicitRules'.
     */
    _implicitRules?: Element;
    /**
     * The base language in which the resource is written.
     */
    language?: code;
    /**
     * Contains extension information for property 'language'.
     */
    _language?: Element;
    /**
     * A human-readable narrative that contains a summary of the resource and can be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it "clinically safe" for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety.
     */
    text?: Narrative;
    /**
     * These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, and nor can they have their own independent transaction scope.
     */
    contained?: Resource[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * Unique identifier for the substance.
     */
    identifier?: Identifier[];
    /**
     * A code to indicate if the substance is actively used.
     */
    status?: code;
    /**
     * Contains extension information for property 'status'.
     */
    _status?: Element;
    /**
     * A code that classifies the general type of substance.  This is used  for searching, sorting and display purposes.
     */
    category?: CodeableConcept[];
    /**
     * A code (or set of codes) that identify this substance.
     */
    code: CodeableConcept;
    /**
     * A description of the substance - its appearance, handling requirements, and other usage notes.
     */
    description?: string;
    /**
     * Contains extension information for property 'description'.
     */
    _description?: Element;
    /**
     * Substance may be used to describe a kind of substance, or a specific package/container of the substance: an instance.
     */
    instance?: SubstanceInstance[];
    /**
     * A substance can be composed of other substances.
     */
    ingredient?: SubstanceIngredient[];
}
/**
 * Substance may be used to describe a kind of substance, or a specific package/container of the substance: an instance.
 */
export interface SubstanceInstance {
    /**
     * Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
     */
    id?: string;
    /**
     * Contains extension information for property 'id'.
     */
    _id?: Element;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * Identifier associated with the package/container (usually a label affixed directly).
     */
    identifier?: Identifier;
    /**
     * When the substance is no longer valid to use. For some substances, a single arbitrary date is used for expiry.
     */
    expiry?: dateTime;
    /**
     * Contains extension information for property 'expiry'.
     */
    _expiry?: Element;
    /**
     * The amount of the substance.
     */
    quantity?: Quantity;
}
/**
 * A substance can be composed of other substances.
 */
export interface SubstanceIngredient {
    /**
     * Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
     */
    id?: string;
    /**
     * Contains extension information for property 'id'.
     */
    _id?: Element;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * The amount of the ingredient in the substance - a concentration ratio.
     */
    quantity?: Ratio;
    /**
     * Another substance that is a component of this substance.
     */
    substanceCodeableConcept: CodeableConcept;
    /**
     * Another substance that is a component of this substance.
     */
    substanceReference: Reference;
}
/**
 * Chemical substances are a single substance type whose primary defining element is the molecular structure. Chemical substances shall be defined on the basis of their complete covalent molecular structure; the presence of a salt (counter-ion) and/or solvates (water, alcohols) is also captured. Purity, grade, physical form or particle size are not taken into account in the definition of a chemical substance or in the assignment of a Substance ID.
 */
export interface SubstanceAmount {
    /**
     * Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
     */
    id?: string;
    /**
     * Contains extension information for property 'id'.
     */
    _id?: Element;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * Used to capture quantitative values for a variety of elements. If only limits are given, the arithmetic mean would be the average. If only a single definite value for a given element is given, it would be captured in this field.
     */
    amountQuantity?: Quantity;
    /**
     * Used to capture quantitative values for a variety of elements. If only limits are given, the arithmetic mean would be the average. If only a single definite value for a given element is given, it would be captured in this field.
     */
    amountRange?: Range;
    /**
     * Used to capture quantitative values for a variety of elements. If only limits are given, the arithmetic mean would be the average. If only a single definite value for a given element is given, it would be captured in this field.
     */
    amountString?: string;
    /**
     * Contains extension information for property 'amountString'.
     */
    _amountString?: Element;
    /**
     * Most elements that require a quantitative value will also have a field called amount type. Amount type should always be specified because the actual value of the amount is often dependent on it. EXAMPLE: In capturing the actual relative amounts of substances or molecular fragments it is essential to indicate whether the amount refers to a mole ratio or weight ratio. For any given element an effort should be made to use same the amount type for all related definitional elements.
     */
    amountType?: CodeableConcept;
    /**
     * A textual comment on a numeric value.
     */
    amountText?: string;
    /**
     * Contains extension information for property 'amountText'.
     */
    _amountText?: Element;
    /**
     * Reference range of possible or expected values.
     */
    referenceRange?: Element;
}
export interface SubstanceAmountReferenceRange {
    /**
     * Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
     */
    id?: string;
    /**
     * Contains extension information for property 'id'.
     */
    _id?: Element;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * Lower limit possible or expected.
     */
    lowLimit?: Quantity;
    /**
     * Upper limit possible or expected.
     */
    highLimit?: Quantity;
}
/**
 * Todo.
 */
export interface SubstancePolymer {
    /**
     * The type of the resource.
     */
    resourceType: string;
    /**
     * The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes.
     */
    id?: id;
    /**
     * Contains extension information for property 'id'.
     */
    _id?: Element;
    /**
     * The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource.
     */
    meta?: Meta;
    /**
     * A reference to a set of rules that were followed when the resource was constructed, and which must be understood when processing the content. Often, this is a reference to an implementation guide that defines the special rules along with other profiles etc.
     */
    implicitRules?: uri;
    /**
     * Contains extension information for property 'implicitRules'.
     */
    _implicitRules?: Element;
    /**
     * The base language in which the resource is written.
     */
    language?: code;
    /**
     * Contains extension information for property 'language'.
     */
    _language?: Element;
    /**
     * A human-readable narrative that contains a summary of the resource and can be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it "clinically safe" for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety.
     */
    text?: Narrative;
    /**
     * These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, and nor can they have their own independent transaction scope.
     */
    contained?: Resource[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * Todo.
     */
    class?: CodeableConcept;
    /**
     * Todo.
     */
    geometry?: CodeableConcept;
    /**
     * Todo.
     */
    copolymerConnectivity?: CodeableConcept[];
    /**
     * Todo.
     */
    modification?: string[];
    /**
     * Contains extension information for property 'modification'.
     */
    _modification?: Element[];
    /**
     * Todo.
     */
    monomerSet?: SubstancePolymerMonomerSet[];
    /**
     * Todo.
     */
    repeat?: SubstancePolymerRepeat[];
}
/**
 * Todo.
 */
export interface SubstancePolymerMonomerSet {
    /**
     * Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
     */
    id?: string;
    /**
     * Contains extension information for property 'id'.
     */
    _id?: Element;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * Todo.
     */
    ratioType?: CodeableConcept;
    /**
     * Todo.
     */
    startingMaterial?: SubstancePolymerMonomerSetStartingMaterial[];
}
/**
 * Todo.
 */
export interface SubstancePolymerMonomerSetStartingMaterial {
    /**
     * Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
     */
    id?: string;
    /**
     * Contains extension information for property 'id'.
     */
    _id?: Element;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * Todo.
     */
    material?: CodeableConcept;
    /**
     * Todo.
     */
    type?: CodeableConcept;
    /**
     * Todo.
     */
    isDefining?: boolean;
    /**
     * Contains extension information for property 'isDefining'.
     */
    _isDefining?: Element;
    /**
     * Todo.
     */
    amount?: SubstanceAmount;
}
/**
 * Todo.
 */
export interface SubstancePolymerRepeat {
    /**
     * Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
     */
    id?: string;
    /**
     * Contains extension information for property 'id'.
     */
    _id?: Element;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * Todo.
     */
    numberOfUnits?: integer;
    /**
     * Contains extension information for property 'numberOfUnits'.
     */
    _numberOfUnits?: Element;
    /**
     * Todo.
     */
    averageMolecularFormula?: string;
    /**
     * Contains extension information for property 'averageMolecularFormula'.
     */
    _averageMolecularFormula?: Element;
    /**
     * Todo.
     */
    repeatUnitAmountType?: CodeableConcept;
    /**
     * Todo.
     */
    repeatUnit?: SubstancePolymerRepeatRepeatUnit[];
}
/**
 * Todo.
 */
export interface SubstancePolymerRepeatRepeatUnit {
    /**
     * Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
     */
    id?: string;
    /**
     * Contains extension information for property 'id'.
     */
    _id?: Element;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * Todo.
     */
    orientationOfPolymerisation?: CodeableConcept;
    /**
     * Todo.
     */
    repeatUnit?: string;
    /**
     * Contains extension information for property 'repeatUnit'.
     */
    _repeatUnit?: Element;
    /**
     * Todo.
     */
    amount?: SubstanceAmount;
    /**
     * Todo.
     */
    degreeOfPolymerisation?: SubstancePolymerRepeatRepeatUnitDegreeOfPolymerisation[];
    /**
     * Todo.
     */
    structuralRepresentation?: SubstancePolymerRepeatRepeatUnitStructuralRepresentation[];
}
/**
 * Todo.
 */
export interface SubstancePolymerRepeatRepeatUnitDegreeOfPolymerisation {
    /**
     * Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
     */
    id?: string;
    /**
     * Contains extension information for property 'id'.
     */
    _id?: Element;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * Todo.
     */
    degree?: CodeableConcept;
    /**
     * Todo.
     */
    amount?: SubstanceAmount;
}
/**
 * Todo.
 */
export interface SubstancePolymerRepeatRepeatUnitStructuralRepresentation {
    /**
     * Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
     */
    id?: string;
    /**
     * Contains extension information for property 'id'.
     */
    _id?: Element;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * Todo.
     */
    type?: CodeableConcept;
    /**
     * Todo.
     */
    representation?: string;
    /**
     * Contains extension information for property 'representation'.
     */
    _representation?: Element;
    /**
     * Todo.
     */
    attachment?: Attachment;
}
/**
 * Todo.
 */
export interface SubstanceReferenceInformation {
    /**
     * The type of the resource.
     */
    resourceType: string;
    /**
     * The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes.
     */
    id?: id;
    /**
     * Contains extension information for property 'id'.
     */
    _id?: Element;
    /**
     * The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource.
     */
    meta?: Meta;
    /**
     * A reference to a set of rules that were followed when the resource was constructed, and which must be understood when processing the content. Often, this is a reference to an implementation guide that defines the special rules along with other profiles etc.
     */
    implicitRules?: uri;
    /**
     * Contains extension information for property 'implicitRules'.
     */
    _implicitRules?: Element;
    /**
     * The base language in which the resource is written.
     */
    language?: code;
    /**
     * Contains extension information for property 'language'.
     */
    _language?: Element;
    /**
     * A human-readable narrative that contains a summary of the resource and can be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it "clinically safe" for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety.
     */
    text?: Narrative;
    /**
     * These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, and nor can they have their own independent transaction scope.
     */
    contained?: Resource[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * Todo.
     */
    comment?: string;
    /**
     * Contains extension information for property 'comment'.
     */
    _comment?: Element;
    /**
     * Todo.
     */
    gene?: SubstanceReferenceInformationGene[];
    /**
     * Todo.
     */
    geneElement?: SubstanceReferenceInformationGeneElement[];
    /**
     * Todo.
     */
    classification?: SubstanceReferenceInformationClassification[];
    /**
     * Todo.
     */
    target?: SubstanceReferenceInformationTarget[];
}
/**
 * Todo.
 */
export interface SubstanceReferenceInformationGene {
    /**
     * Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
     */
    id?: string;
    /**
     * Contains extension information for property 'id'.
     */
    _id?: Element;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * Todo.
     */
    geneSequenceOrigin?: CodeableConcept;
    /**
     * Todo.
     */
    gene?: CodeableConcept;
    /**
     * Todo.
     */
    source?: Reference[];
}
/**
 * Todo.
 */
export interface SubstanceReferenceInformationGeneElement {
    /**
     * Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
     */
    id?: string;
    /**
     * Contains extension information for property 'id'.
     */
    _id?: Element;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * Todo.
     */
    type?: CodeableConcept;
    /**
     * Todo.
     */
    element?: Identifier;
    /**
     * Todo.
     */
    source?: Reference[];
}
/**
 * Todo.
 */
export interface SubstanceReferenceInformationClassification {
    /**
     * Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
     */
    id?: string;
    /**
     * Contains extension information for property 'id'.
     */
    _id?: Element;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * Todo.
     */
    domain?: CodeableConcept;
    /**
     * Todo.
     */
    classification?: CodeableConcept;
    /**
     * Todo.
     */
    subtype?: CodeableConcept[];
    /**
     * Todo.
     */
    source?: Reference[];
}
/**
 * Todo.
 */
export interface SubstanceReferenceInformationTarget {
    /**
     * Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
     */
    id?: string;
    /**
     * Contains extension information for property 'id'.
     */
    _id?: Element;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * Todo.
     */
    target?: Identifier;
    /**
     * Todo.
     */
    type?: CodeableConcept;
    /**
     * Todo.
     */
    interaction?: CodeableConcept;
    /**
     * Todo.
     */
    organism?: CodeableConcept;
    /**
     * Todo.
     */
    organismType?: CodeableConcept;
    /**
     * Todo.
     */
    amountQuantity?: Quantity;
    /**
     * Todo.
     */
    amountRange?: Range;
    /**
     * Todo.
     */
    amountString?: string;
    /**
     * Contains extension information for property 'amountString'.
     */
    _amountString?: Element;
    /**
     * Todo.
     */
    amountType?: CodeableConcept;
    /**
     * Todo.
     */
    source?: Reference[];
}
/**
 * The detailed description of a substance, typically at a level beyond what is used for prescribing.
 */
export interface SubstanceSpecification {
    /**
     * The type of the resource.
     */
    resourceType: string;
    /**
     * The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes.
     */
    id?: id;
    /**
     * Contains extension information for property 'id'.
     */
    _id?: Element;
    /**
     * The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource.
     */
    meta?: Meta;
    /**
     * A reference to a set of rules that were followed when the resource was constructed, and which must be understood when processing the content. Often, this is a reference to an implementation guide that defines the special rules along with other profiles etc.
     */
    implicitRules?: uri;
    /**
     * Contains extension information for property 'implicitRules'.
     */
    _implicitRules?: Element;
    /**
     * The base language in which the resource is written.
     */
    language?: code;
    /**
     * Contains extension information for property 'language'.
     */
    _language?: Element;
    /**
     * A human-readable narrative that contains a summary of the resource and can be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it "clinically safe" for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety.
     */
    text?: Narrative;
    /**
     * These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, and nor can they have their own independent transaction scope.
     */
    contained?: Resource[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * Identifier by which this substance is known.
     */
    identifier?: Identifier;
    /**
     * High level categorization, e.g. polymer or nucleic acid.
     */
    type?: CodeableConcept;
    /**
     * Status of substance within the catalogue e.g. approved.
     */
    status?: CodeableConcept;
    /**
     * If the substance applies to only human or veterinary use.
     */
    domain?: CodeableConcept;
    /**
     * Textual description of the substance.
     */
    description?: string;
    /**
     * Contains extension information for property 'description'.
     */
    _description?: Element;
    /**
     * Supporting literature.
     */
    source?: Reference[];
    /**
     * Textual comment about this record of a substance.
     */
    comment?: string;
    /**
     * Contains extension information for property 'comment'.
     */
    _comment?: Element;
    /**
     * Moiety, for structural modifications.
     */
    moiety?: SubstanceSpecificationMoiety[];
    /**
     * General specifications for this substance, including how it is related to other substances.
     */
    property?: SubstanceSpecificationProperty[];
    /**
     * General information detailing this substance.
     */
    referenceInformation?: Reference;
    /**
     * Structural information.
     */
    structure?: SubstanceSpecificationStructure;
    /**
     * Codes associated with the substance.
     */
    code?: SubstanceSpecificationCode[];
    /**
     * Names applicable to this substance.
     */
    name?: SubstanceSpecificationName[];
    /**
     * The molecular weight or weight range (for proteins, polymers or nucleic acids).
     */
    molecularWeight?: SubstanceSpecificationStructureIsotopeMolecularWeight[];
    /**
     * A link between this substance and another, with details of the relationship.
     */
    relationship?: SubstanceSpecificationRelationship[];
    /**
     * Data items specific to nucleic acids.
     */
    nucleicAcid?: Reference;
    /**
     * Data items specific to polymers.
     */
    polymer?: Reference;
    /**
     * Data items specific to proteins.
     */
    protein?: Reference;
    /**
     * Material or taxonomic/anatomical source for the substance.
     */
    sourceMaterial?: Reference;
}
/**
 * Moiety, for structural modifications.
 */
export interface SubstanceSpecificationMoiety {
    /**
     * Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
     */
    id?: string;
    /**
     * Contains extension information for property 'id'.
     */
    _id?: Element;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * Role that the moiety is playing.
     */
    role?: CodeableConcept;
    /**
     * Identifier by which this moiety substance is known.
     */
    identifier?: Identifier;
    /**
     * Textual name for this moiety substance.
     */
    name?: string;
    /**
     * Contains extension information for property 'name'.
     */
    _name?: Element;
    /**
     * Stereochemistry type.
     */
    stereochemistry?: CodeableConcept;
    /**
     * Optical activity type.
     */
    opticalActivity?: CodeableConcept;
    /**
     * Molecular formula.
     */
    molecularFormula?: string;
    /**
     * Contains extension information for property 'molecularFormula'.
     */
    _molecularFormula?: Element;
    /**
     * Quantitative value for this moiety.
     */
    amountQuantity?: Quantity;
    /**
     * Quantitative value for this moiety.
     */
    amountString?: string;
    /**
     * Contains extension information for property 'amountString'.
     */
    _amountString?: Element;
}
/**
 * General specifications for this substance, including how it is related to other substances.
 */
export interface SubstanceSpecificationProperty {
    /**
     * Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
     */
    id?: string;
    /**
     * Contains extension information for property 'id'.
     */
    _id?: Element;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * A category for this property, e.g. Physical, Chemical, Enzymatic.
     */
    category?: CodeableConcept;
    /**
     * Property type e.g. viscosity, pH, isoelectric point.
     */
    code?: CodeableConcept;
    /**
     * Parameters that were used in the measurement of a property (e.g. for viscosity: measured at 20C with a pH of 7.1).
     */
    parameters?: string;
    /**
     * Contains extension information for property 'parameters'.
     */
    _parameters?: Element;
    /**
     * A substance upon which a defining property depends (e.g. for solubility: in water, in alcohol).
     */
    definingsubstanceReference?: Reference;
    /**
     * A substance upon which a defining property depends (e.g. for solubility: in water, in alcohol).
     */
    definingsubstanceCodeableConcept?: CodeableConcept;
    /**
     * Quantitative value for this property.
     */
    amountQuantity?: Quantity;
    /**
     * Quantitative value for this property.
     */
    amountString?: string;
    /**
     * Contains extension information for property 'amountString'.
     */
    _amountString?: Element;
}
/**
 * Structural information.
 */
export interface SubstanceSpecificationStructure {
    /**
     * Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
     */
    id?: string;
    /**
     * Contains extension information for property 'id'.
     */
    _id?: Element;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * Stereochemistry type.
     */
    stereochemistry?: CodeableConcept;
    /**
     * Optical activity type.
     */
    opticalActivity?: CodeableConcept;
    /**
     * Molecular formula.
     */
    molecularFormula?: string;
    /**
     * Contains extension information for property 'molecularFormula'.
     */
    _molecularFormula?: Element;
    /**
     * Specified per moiety according to the Hill system, i.e. first C, then H, then alphabetical, each moiety separated by a dot.
     */
    molecularFormulaByMoiety?: string;
    /**
     * Contains extension information for property 'molecularFormulaByMoiety'.
     */
    _molecularFormulaByMoiety?: Element;
    /**
     * Applicable for single substances that contain a radionuclide or a non-natural isotopic ratio.
     */
    isotope?: SubstanceSpecificationStructureIsotope[];
    /**
     * The molecular weight or weight range (for proteins, polymers or nucleic acids).
     */
    molecularWeight?: SubstanceSpecificationStructureIsotopeMolecularWeight;
    /**
     * Supporting literature.
     */
    source?: Reference[];
    /**
     * Molecular structural representation.
     */
    representation?: SubstanceSpecificationStructureRepresentation[];
}
/**
 * Applicable for single substances that contain a radionuclide or a non-natural isotopic ratio.
 */
export interface SubstanceSpecificationStructureIsotope {
    /**
     * Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
     */
    id?: string;
    /**
     * Contains extension information for property 'id'.
     */
    _id?: Element;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * Substance identifier for each non-natural or radioisotope.
     */
    identifier?: Identifier;
    /**
     * Substance name for each non-natural or radioisotope.
     */
    name?: CodeableConcept;
    /**
     * The type of isotopic substitution present in a single substance.
     */
    substitution?: CodeableConcept;
    /**
     * Half life - for a non-natural nuclide.
     */
    halfLife?: Quantity;
    /**
     * The molecular weight or weight range (for proteins, polymers or nucleic acids).
     */
    molecularWeight?: SubstanceSpecificationStructureIsotopeMolecularWeight;
}
/**
 * The molecular weight or weight range (for proteins, polymers or nucleic acids).
 */
export interface SubstanceSpecificationStructureIsotopeMolecularWeight {
    /**
     * Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
     */
    id?: string;
    /**
     * Contains extension information for property 'id'.
     */
    _id?: Element;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * The method by which the molecular weight was determined.
     */
    method?: CodeableConcept;
    /**
     * Type of molecular weight such as exact, average (also known as. number average), weight average.
     */
    type?: CodeableConcept;
    /**
     * Used to capture quantitative values for a variety of elements. If only limits are given, the arithmetic mean would be the average. If only a single definite value for a given element is given, it would be captured in this field.
     */
    amount?: Quantity;
}
/**
 * Molecular structural representation.
 */
export interface SubstanceSpecificationStructureRepresentation {
    /**
     * Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
     */
    id?: string;
    /**
     * Contains extension information for property 'id'.
     */
    _id?: Element;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * The type of structure (e.g. Full, Partial, Representative).
     */
    type?: CodeableConcept;
    /**
     * The structural representation as text string in a format e.g. InChI, SMILES, MOLFILE, CDX.
     */
    representation?: string;
    /**
     * Contains extension information for property 'representation'.
     */
    _representation?: Element;
    /**
     * An attached file with the structural representation.
     */
    attachment?: Attachment;
}
/**
 * Codes associated with the substance.
 */
export interface SubstanceSpecificationCode {
    /**
     * Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
     */
    id?: string;
    /**
     * Contains extension information for property 'id'.
     */
    _id?: Element;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * The specific code.
     */
    code?: CodeableConcept;
    /**
     * Status of the code assignment.
     */
    status?: CodeableConcept;
    /**
     * The date at which the code status is changed as part of the terminology maintenance.
     */
    statusDate?: dateTime;
    /**
     * Contains extension information for property 'statusDate'.
     */
    _statusDate?: Element;
    /**
     * Any comment can be provided in this field, if necessary.
     */
    comment?: string;
    /**
     * Contains extension information for property 'comment'.
     */
    _comment?: Element;
    /**
     * Supporting literature.
     */
    source?: Reference[];
}
/**
 * Names applicable to this substance.
 */
export interface SubstanceSpecificationName {
    /**
     * Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
     */
    id?: string;
    /**
     * Contains extension information for property 'id'.
     */
    _id?: Element;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * The actual name.
     */
    name: string;
    /**
     * Contains extension information for property 'name'.
     */
    _name?: Element;
    /**
     * Name type.
     */
    type?: CodeableConcept;
    /**
     * The status of the name.
     */
    status?: CodeableConcept;
    /**
     * If this is the preferred name for this substance.
     */
    preferred?: boolean;
    /**
     * Contains extension information for property 'preferred'.
     */
    _preferred?: Element;
    /**
     * Language of the name.
     */
    language?: CodeableConcept[];
    /**
     * The use context of this name for example if there is a different name a drug active ingredient as opposed to a food colour additive.
     */
    domain?: CodeableConcept[];
    /**
     * The jurisdiction where this name applies.
     */
    jurisdiction?: CodeableConcept[];
    /**
     * A synonym of this name.
     */
    synonym?: SubstanceSpecificationName[];
    /**
     * A translation for this name.
     */
    translation?: SubstanceSpecificationName[];
    /**
     * Details of the official nature of this name.
     */
    official?: SubstanceSpecificationNameOfficial[];
    /**
     * Supporting literature.
     */
    source?: Reference[];
}
/**
 * Details of the official nature of this name.
 */
export interface SubstanceSpecificationNameOfficial {
    /**
     * Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
     */
    id?: string;
    /**
     * Contains extension information for property 'id'.
     */
    _id?: Element;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * Which authority uses this official name.
     */
    authority?: CodeableConcept;
    /**
     * The status of the official name.
     */
    status?: CodeableConcept;
    /**
     * Date of official name change.
     */
    date?: dateTime;
    /**
     * Contains extension information for property 'date'.
     */
    _date?: Element;
}
/**
 * A link between this substance and another, with details of the relationship.
 */
export interface SubstanceSpecificationRelationship {
    /**
     * Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
     */
    id?: string;
    /**
     * Contains extension information for property 'id'.
     */
    _id?: Element;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * A pointer to another substance, as a resource or just a representational code.
     */
    substanceReference?: Reference;
    /**
     * A pointer to another substance, as a resource or just a representational code.
     */
    substanceCodeableConcept?: CodeableConcept;
    /**
     * For example "salt to parent", "active moiety", "starting material".
     */
    relationship?: CodeableConcept;
    /**
     * For example where an enzyme strongly bonds with a particular substance, this is a defining relationship for that enzyme, out of several possible substance relationships.
     */
    isDefining?: boolean;
    /**
     * Contains extension information for property 'isDefining'.
     */
    _isDefining?: Element;
    /**
     * A numeric factor for the relationship, for instance to express that the salt of a substance has some percentage of the active substance in relation to some other.
     */
    amountQuantity?: Quantity;
    /**
     * A numeric factor for the relationship, for instance to express that the salt of a substance has some percentage of the active substance in relation to some other.
     */
    amountRange?: Range;
    /**
     * A numeric factor for the relationship, for instance to express that the salt of a substance has some percentage of the active substance in relation to some other.
     */
    amountRatio?: Ratio;
    /**
     * A numeric factor for the relationship, for instance to express that the salt of a substance has some percentage of the active substance in relation to some other.
     */
    amountString?: string;
    /**
     * Contains extension information for property 'amountString'.
     */
    _amountString?: Element;
    /**
     * For use when the numeric.
     */
    amountRatioLowLimit?: Ratio;
    /**
     * An operator for the amount, for example "average", "approximately", "less than".
     */
    amountType?: CodeableConcept;
    /**
     * Supporting literature.
     */
    source?: Reference[];
}
/**
 * Record of delivery of what is supplied.
 */
export interface SupplyDelivery {
    /**
     * The type of the resource.
     */
    resourceType: string;
    /**
     * The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes.
     */
    id?: id;
    /**
     * Contains extension information for property 'id'.
     */
    _id?: Element;
    /**
     * The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource.
     */
    meta?: Meta;
    /**
     * A reference to a set of rules that were followed when the resource was constructed, and which must be understood when processing the content. Often, this is a reference to an implementation guide that defines the special rules along with other profiles etc.
     */
    implicitRules?: uri;
    /**
     * Contains extension information for property 'implicitRules'.
     */
    _implicitRules?: Element;
    /**
     * The base language in which the resource is written.
     */
    language?: code;
    /**
     * Contains extension information for property 'language'.
     */
    _language?: Element;
    /**
     * A human-readable narrative that contains a summary of the resource and can be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it "clinically safe" for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety.
     */
    text?: Narrative;
    /**
     * These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, and nor can they have their own independent transaction scope.
     */
    contained?: Resource[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * Identifier for the supply delivery event that is used to identify it across multiple disparate systems.
     */
    identifier?: Identifier[];
    /**
     * A plan, proposal or order that is fulfilled in whole or in part by this event.
     */
    basedOn?: Reference[];
    /**
     * A larger event of which this particular event is a component or step.
     */
    partOf?: Reference[];
    /**
     * A code specifying the state of the dispense event.
     */
    status?: code;
    /**
     * Contains extension information for property 'status'.
     */
    _status?: Element;
    /**
     * A link to a resource representing the person whom the delivered item is for.
     */
    patient?: Reference;
    /**
     * Indicates the type of dispensing event that is performed. Examples include: Trial Fill, Completion of Trial, Partial Fill, Emergency Fill, Samples, etc.
     */
    type?: CodeableConcept;
    /**
     * The item that is being delivered or has been supplied.
     */
    suppliedItem?: SupplyDeliverySuppliedItem;
    /**
     * The date or time(s) the activity occurred.
     */
    occurrenceDateTime?: dateTime;
    /**
     * Contains extension information for property 'occurrenceDateTime'.
     */
    _occurrenceDateTime?: Element;
    /**
     * The date or time(s) the activity occurred.
     */
    occurrencePeriod?: Period;
    /**
     * The date or time(s) the activity occurred.
     */
    occurrenceTiming?: Timing;
    /**
     * The individual responsible for dispensing the medication, supplier or device.
     */
    supplier?: Reference;
    /**
     * Identification of the facility/location where the Supply was shipped to, as part of the dispense event.
     */
    destination?: Reference;
    /**
     * Identifies the person who picked up the Supply.
     */
    receiver?: Reference[];
}
/**
 * The item that is being delivered or has been supplied.
 */
export interface SupplyDeliverySuppliedItem {
    /**
     * Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
     */
    id?: string;
    /**
     * Contains extension information for property 'id'.
     */
    _id?: Element;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * The amount of supply that has been dispensed. Includes unit of measure.
     */
    quantity?: Quantity;
    /**
     * Identifies the medication, substance or device being dispensed. This is either a link to a resource representing the details of the item or a code that identifies the item from a known list.
     */
    itemCodeableConcept?: CodeableConcept;
    /**
     * Identifies the medication, substance or device being dispensed. This is either a link to a resource representing the details of the item or a code that identifies the item from a known list.
     */
    itemReference?: Reference;
}
/**
 * A record of a request for a medication, substance or device used in the healthcare setting.
 */
export interface SupplyRequest {
    /**
     * The type of the resource.
     */
    resourceType: string;
    /**
     * The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes.
     */
    id?: id;
    /**
     * Contains extension information for property 'id'.
     */
    _id?: Element;
    /**
     * The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource.
     */
    meta?: Meta;
    /**
     * A reference to a set of rules that were followed when the resource was constructed, and which must be understood when processing the content. Often, this is a reference to an implementation guide that defines the special rules along with other profiles etc.
     */
    implicitRules?: uri;
    /**
     * Contains extension information for property 'implicitRules'.
     */
    _implicitRules?: Element;
    /**
     * The base language in which the resource is written.
     */
    language?: code;
    /**
     * Contains extension information for property 'language'.
     */
    _language?: Element;
    /**
     * A human-readable narrative that contains a summary of the resource and can be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it "clinically safe" for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety.
     */
    text?: Narrative;
    /**
     * These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, and nor can they have their own independent transaction scope.
     */
    contained?: Resource[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * Business identifiers assigned to this SupplyRequest by the author and/or other systems. These identifiers remain constant as the resource is updated and propagates from server to server.
     */
    identifier?: Identifier[];
    /**
     * Status of the supply request.
     */
    status?: code;
    /**
     * Contains extension information for property 'status'.
     */
    _status?: Element;
    /**
     * Category of supply, e.g.  central, non-stock, etc. This is used to support work flows associated with the supply process.
     */
    category?: CodeableConcept;
    /**
     * Indicates how quickly this SupplyRequest should be addressed with respect to other requests.
     */
    priority?: code;
    /**
     * Contains extension information for property 'priority'.
     */
    _priority?: Element;
    /**
     * The item that is requested to be supplied. This is either a link to a resource representing the details of the item or a code that identifies the item from a known list.
     */
    itemCodeableConcept: CodeableConcept;
    /**
     * The item that is requested to be supplied. This is either a link to a resource representing the details of the item or a code that identifies the item from a known list.
     */
    itemReference: Reference;
    /**
     * The amount that is being ordered of the indicated item.
     */
    quantity: Quantity;
    /**
     * Specific parameters for the ordered item.  For example, the size of the indicated item.
     */
    parameter?: SupplyRequestParameter[];
    /**
     * When the request should be fulfilled.
     */
    occurrenceDateTime?: dateTime;
    /**
     * Contains extension information for property 'occurrenceDateTime'.
     */
    _occurrenceDateTime?: Element;
    /**
     * When the request should be fulfilled.
     */
    occurrencePeriod?: Period;
    /**
     * When the request should be fulfilled.
     */
    occurrenceTiming?: Timing;
    /**
     * When the request was made.
     */
    authoredOn?: dateTime;
    /**
     * Contains extension information for property 'authoredOn'.
     */
    _authoredOn?: Element;
    /**
     * The device, practitioner, etc. who initiated the request.
     */
    requester?: Reference;
    /**
     * Who is intended to fulfill the request.
     */
    supplier?: Reference[];
    /**
     * The reason why the supply item was requested.
     */
    reasonCode?: CodeableConcept[];
    /**
     * The reason why the supply item was requested.
     */
    reasonReference?: Reference[];
    /**
     * Where the supply is expected to come from.
     */
    deliverFrom?: Reference;
    /**
     * Where the supply is destined to go.
     */
    deliverTo?: Reference;
}
/**
 * Specific parameters for the ordered item.  For example, the size of the indicated item.
 */
export interface SupplyRequestParameter {
    /**
     * Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
     */
    id?: string;
    /**
     * Contains extension information for property 'id'.
     */
    _id?: Element;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * A code or string that identifies the device detail being asserted.
     */
    code?: CodeableConcept;
    /**
     * The value of the device detail.
     */
    valueCodeableConcept?: CodeableConcept;
    /**
     * The value of the device detail.
     */
    valueQuantity?: Quantity;
    /**
     * The value of the device detail.
     */
    valueRange?: Range;
    /**
     * The value of the device detail.
     */
    valueBoolean?: boolean;
    /**
     * Contains extension information for property 'valueBoolean'.
     */
    _valueBoolean?: Element;
}
/**
 * A task to be performed.
 */
export interface Task {
    /**
     * The type of the resource.
     */
    resourceType: string;
    /**
     * The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes.
     */
    id?: id;
    /**
     * Contains extension information for property 'id'.
     */
    _id?: Element;
    /**
     * The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource.
     */
    meta?: Meta;
    /**
     * A reference to a set of rules that were followed when the resource was constructed, and which must be understood when processing the content. Often, this is a reference to an implementation guide that defines the special rules along with other profiles etc.
     */
    implicitRules?: uri;
    /**
     * Contains extension information for property 'implicitRules'.
     */
    _implicitRules?: Element;
    /**
     * The base language in which the resource is written.
     */
    language?: code;
    /**
     * Contains extension information for property 'language'.
     */
    _language?: Element;
    /**
     * A human-readable narrative that contains a summary of the resource and can be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it "clinically safe" for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety.
     */
    text?: Narrative;
    /**
     * These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, and nor can they have their own independent transaction scope.
     */
    contained?: Resource[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * The business identifier for this task.
     */
    identifier?: Identifier[];
    /**
     * The URL pointing to a *FHIR*-defined protocol, guideline, orderset or other definition that is adhered to in whole or in part by this Task.
     */
    instantiatesCanonical?: canonical;
    /**
     * The URL pointing to an *externally* maintained  protocol, guideline, orderset or other definition that is adhered to in whole or in part by this Task.
     */
    instantiatesUri?: uri;
    /**
     * Contains extension information for property 'instantiatesUri'.
     */
    _instantiatesUri?: Element;
    /**
     * BasedOn refers to a higher-level authorization that triggered the creation of the task.  It references a "request" resource such as a ServiceRequest, MedicationRequest, ServiceRequest, CarePlan, etc. which is distinct from the "request" resource the task is seeking to fulfill.  This latter resource is referenced by FocusOn.  For example, based on a ServiceRequest (= BasedOn), a task is created to fulfill a procedureRequest ( = FocusOn ) to collect a specimen from a patient.
     */
    basedOn?: Reference[];
    /**
     * An identifier that links together multiple tasks and other requests that were created in the same context.
     */
    groupIdentifier?: Identifier;
    /**
     * Task that this particular task is part of.
     */
    partOf?: Reference[];
    /**
     * The current status of the task.
     */
    status: code;
    /**
     * Contains extension information for property 'status'.
     */
    _status?: Element;
    /**
     * An explanation as to why this task is held, failed, was refused, etc.
     */
    statusReason?: CodeableConcept;
    /**
     * Contains business-specific nuances of the business state.
     */
    businessStatus?: CodeableConcept;
    /**
     * Indicates the "level" of actionability associated with the Task, i.e. i+R[9]Cs this a proposed task, a planned task, an actionable task, etc.
     */
    intent: code;
    /**
     * Contains extension information for property 'intent'.
     */
    _intent?: Element;
    /**
     * Indicates how quickly the Task should be addressed with respect to other requests.
     */
    priority?: code;
    /**
     * Contains extension information for property 'priority'.
     */
    _priority?: Element;
    /**
     * A name or code (or both) briefly describing what the task involves.
     */
    code?: CodeableConcept;
    /**
     * A free-text description of what is to be performed.
     */
    description?: string;
    /**
     * Contains extension information for property 'description'.
     */
    _description?: Element;
    /**
     * The request being actioned or the resource being manipulated by this task.
     */
    focus?: Reference;
    /**
     * The entity who benefits from the performance of the service specified in the task (e.g., the patient).
     */
    for?: Reference;
    /**
     * The healthcare event  (e.g. a patient and healthcare provider interaction) during which this task was created.
     */
    encounter?: Reference;
    /**
     * Identifies the time action was first taken against the task (start) and/or the time final action was taken against the task prior to marking it as completed (end).
     */
    executionPeriod?: Period;
    /**
     * The date and time this task was created.
     */
    authoredOn?: dateTime;
    /**
     * Contains extension information for property 'authoredOn'.
     */
    _authoredOn?: Element;
    /**
     * The date and time of last modification to this task.
     */
    lastModified?: dateTime;
    /**
     * Contains extension information for property 'lastModified'.
     */
    _lastModified?: Element;
    /**
     * The creator of the task.
     */
    requester?: Reference;
    /**
     * The kind of participant that should perform the task.
     */
    performerType?: CodeableConcept[];
    /**
     * Individual organization or Device currently responsible for task execution.
     */
    owner?: Reference;
    /**
     * Principal physical location where the this task is performed.
     */
    location?: Reference;
    /**
     * A description or code indicating why this task needs to be performed.
     */
    reasonCode?: CodeableConcept;
    /**
     * A resource reference indicating why this task needs to be performed.
     */
    reasonReference?: Reference;
    /**
     * Insurance plans, coverage extensions, pre-authorizations and/or pre-determinations that may be relevant to the Task.
     */
    insurance?: Reference[];
    /**
     * Free-text information captured about the task as it progresses.
     */
    note?: Annotation[];
    /**
     * Links to Provenance records for past versions of this Task that identify key state transitions or updates that are likely to be relevant to a user looking at the current version of the task.
     */
    relevantHistory?: Reference[];
    /**
     * If the Task.focus is a request resource and the task is seeking fulfillment (i.e. is asking for the request to be actioned), this element identifies any limitations on what parts of the referenced request should be actioned.
     */
    restriction?: TaskRestriction;
    /**
     * Additional information that may be needed in the execution of the task.
     */
    input?: TaskInput[];
    /**
     * Outputs produced by the Task.
     */
    output?: TaskOutput[];
}
/**
 * If the Task.focus is a request resource and the task is seeking fulfillment (i.e. is asking for the request to be actioned), this element identifies any limitations on what parts of the referenced request should be actioned.
 */
export interface TaskRestriction {
    /**
     * Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
     */
    id?: string;
    /**
     * Contains extension information for property 'id'.
     */
    _id?: Element;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * Indicates the number of times the requested action should occur.
     */
    repetitions?: positiveInt;
    /**
     * Contains extension information for property 'repetitions'.
     */
    _repetitions?: Element;
    /**
     * Over what time-period is fulfillment sought.
     */
    period?: Period;
    /**
     * For requests that are targeted to more than on potential recipient/target, for whom is fulfillment sought?
     */
    recipient?: Reference[];
}
/**
 * Additional information that may be needed in the execution of the task.
 */
export interface TaskInput {
    /**
     * Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
     */
    id?: string;
    /**
     * Contains extension information for property 'id'.
     */
    _id?: Element;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * A code or description indicating how the input is intended to be used as part of the task execution.
     */
    type: CodeableConcept;
    /**
     * The value of the input parameter as a basic type.
     */
    valueBase64Binary: base64Binary;
    /**
     * Contains extension information for property 'valueBase64Binary'.
     */
    _valueBase64Binary?: Element;
    /**
     * The value of the input parameter as a basic type.
     */
    valueBoolean: boolean;
    /**
     * Contains extension information for property 'valueBoolean'.
     */
    _valueBoolean?: Element;
    /**
     * The value of the input parameter as a basic type.
     */
    valueCanonical: canonical;
    /**
     * The value of the input parameter as a basic type.
     */
    valueCode: code;
    /**
     * Contains extension information for property 'valueCode'.
     */
    _valueCode?: Element;
    /**
     * The value of the input parameter as a basic type.
     */
    valueDate: date;
    /**
     * Contains extension information for property 'valueDate'.
     */
    _valueDate?: Element;
    /**
     * The value of the input parameter as a basic type.
     */
    valueDateTime: dateTime;
    /**
     * Contains extension information for property 'valueDateTime'.
     */
    _valueDateTime?: Element;
    /**
     * The value of the input parameter as a basic type.
     */
    valueDecimal: decimal;
    /**
     * Contains extension information for property 'valueDecimal'.
     */
    _valueDecimal?: Element;
    /**
     * The value of the input parameter as a basic type.
     */
    valueId: id;
    /**
     * Contains extension information for property 'valueId'.
     */
    _valueId?: Element;
    /**
     * The value of the input parameter as a basic type.
     */
    valueInstant: instant;
    /**
     * Contains extension information for property 'valueInstant'.
     */
    _valueInstant?: Element;
    /**
     * The value of the input parameter as a basic type.
     */
    valueInteger: integer;
    /**
     * Contains extension information for property 'valueInteger'.
     */
    _valueInteger?: Element;
    /**
     * The value of the input parameter as a basic type.
     */
    valueMarkdown: markdown;
    /**
     * Contains extension information for property 'valueMarkdown'.
     */
    _valueMarkdown?: Element;
    /**
     * The value of the input parameter as a basic type.
     */
    valueOid: oid;
    /**
     * Contains extension information for property 'valueOid'.
     */
    _valueOid?: Element;
    /**
     * The value of the input parameter as a basic type.
     */
    valuePositiveInt: positiveInt;
    /**
     * Contains extension information for property 'valuePositiveInt'.
     */
    _valuePositiveInt?: Element;
    /**
     * The value of the input parameter as a basic type.
     */
    valueString: string;
    /**
     * Contains extension information for property 'valueString'.
     */
    _valueString?: Element;
    /**
     * The value of the input parameter as a basic type.
     */
    valueTime: time;
    /**
     * Contains extension information for property 'valueTime'.
     */
    _valueTime?: Element;
    /**
     * The value of the input parameter as a basic type.
     */
    valueUnsignedInt: unsignedInt;
    /**
     * Contains extension information for property 'valueUnsignedInt'.
     */
    _valueUnsignedInt?: Element;
    /**
     * The value of the input parameter as a basic type.
     */
    valueUri: uri;
    /**
     * Contains extension information for property 'valueUri'.
     */
    _valueUri?: Element;
    /**
     * The value of the input parameter as a basic type.
     */
    valueUrl: url;
    /**
     * The value of the input parameter as a basic type.
     */
    valueUuid: uuid;
    /**
     * The value of the input parameter as a basic type.
     */
    valueAddress: Address;
    /**
     * The value of the input parameter as a basic type.
     */
    valueAge: Age;
    /**
     * The value of the input parameter as a basic type.
     */
    valueAnnotation: Annotation;
    /**
     * The value of the input parameter as a basic type.
     */
    valueAttachment: Attachment;
    /**
     * The value of the input parameter as a basic type.
     */
    valueCodeableConcept: CodeableConcept;
    /**
     * The value of the input parameter as a basic type.
     */
    valueCoding: Coding;
    /**
     * The value of the input parameter as a basic type.
     */
    valueContactPoint: ContactPoint;
    /**
     * The value of the input parameter as a basic type.
     */
    valueCount: Count;
    /**
     * The value of the input parameter as a basic type.
     */
    valueDistance: Distance;
    /**
     * The value of the input parameter as a basic type.
     */
    valueDuration: Duration;
    /**
     * The value of the input parameter as a basic type.
     */
    valueHumanName: HumanName;
    /**
     * The value of the input parameter as a basic type.
     */
    valueIdentifier: Identifier;
    /**
     * The value of the input parameter as a basic type.
     */
    valueMoney: Money;
    /**
     * The value of the input parameter as a basic type.
     */
    valuePeriod: Period;
    /**
     * The value of the input parameter as a basic type.
     */
    valueQuantity: Quantity;
    /**
     * The value of the input parameter as a basic type.
     */
    valueRange: Range;
    /**
     * The value of the input parameter as a basic type.
     */
    valueRatio: Ratio;
    /**
     * The value of the input parameter as a basic type.
     */
    valueReference: Reference;
    /**
     * The value of the input parameter as a basic type.
     */
    valueSampledData: SampledData;
    /**
     * The value of the input parameter as a basic type.
     */
    valueSignature: Signature;
    /**
     * The value of the input parameter as a basic type.
     */
    valueTiming: Timing;
    /**
     * The value of the input parameter as a basic type.
     */
    valueContactDetail: ContactDetail;
    /**
     * The value of the input parameter as a basic type.
     */
    valueContributor: Contributor;
    /**
     * The value of the input parameter as a basic type.
     */
    valueDataRequirement: DataRequirement;
    /**
     * The value of the input parameter as a basic type.
     */
    valueExpression: Expression;
    /**
     * The value of the input parameter as a basic type.
     */
    valueParameterDefinition: ParameterDefinition;
    /**
     * The value of the input parameter as a basic type.
     */
    valueRelatedArtifact: RelatedArtifact;
    /**
     * The value of the input parameter as a basic type.
     */
    valueTriggerDefinition: TriggerDefinition;
    /**
     * The value of the input parameter as a basic type.
     */
    valueUsageContext: UsageContext;
    /**
     * The value of the input parameter as a basic type.
     */
    valueDosage: Dosage;
}
/**
 * Outputs produced by the Task.
 */
export interface TaskOutput {
    /**
     * Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
     */
    id?: string;
    /**
     * Contains extension information for property 'id'.
     */
    _id?: Element;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * The name of the Output parameter.
     */
    type: CodeableConcept;
    /**
     * The value of the Output parameter as a basic type.
     */
    valueBase64Binary: base64Binary;
    /**
     * Contains extension information for property 'valueBase64Binary'.
     */
    _valueBase64Binary?: Element;
    /**
     * The value of the Output parameter as a basic type.
     */
    valueBoolean: boolean;
    /**
     * Contains extension information for property 'valueBoolean'.
     */
    _valueBoolean?: Element;
    /**
     * The value of the Output parameter as a basic type.
     */
    valueCanonical: canonical;
    /**
     * The value of the Output parameter as a basic type.
     */
    valueCode: code;
    /**
     * Contains extension information for property 'valueCode'.
     */
    _valueCode?: Element;
    /**
     * The value of the Output parameter as a basic type.
     */
    valueDate: date;
    /**
     * Contains extension information for property 'valueDate'.
     */
    _valueDate?: Element;
    /**
     * The value of the Output parameter as a basic type.
     */
    valueDateTime: dateTime;
    /**
     * Contains extension information for property 'valueDateTime'.
     */
    _valueDateTime?: Element;
    /**
     * The value of the Output parameter as a basic type.
     */
    valueDecimal: decimal;
    /**
     * Contains extension information for property 'valueDecimal'.
     */
    _valueDecimal?: Element;
    /**
     * The value of the Output parameter as a basic type.
     */
    valueId: id;
    /**
     * Contains extension information for property 'valueId'.
     */
    _valueId?: Element;
    /**
     * The value of the Output parameter as a basic type.
     */
    valueInstant: instant;
    /**
     * Contains extension information for property 'valueInstant'.
     */
    _valueInstant?: Element;
    /**
     * The value of the Output parameter as a basic type.
     */
    valueInteger: integer;
    /**
     * Contains extension information for property 'valueInteger'.
     */
    _valueInteger?: Element;
    /**
     * The value of the Output parameter as a basic type.
     */
    valueMarkdown: markdown;
    /**
     * Contains extension information for property 'valueMarkdown'.
     */
    _valueMarkdown?: Element;
    /**
     * The value of the Output parameter as a basic type.
     */
    valueOid: oid;
    /**
     * Contains extension information for property 'valueOid'.
     */
    _valueOid?: Element;
    /**
     * The value of the Output parameter as a basic type.
     */
    valuePositiveInt: positiveInt;
    /**
     * Contains extension information for property 'valuePositiveInt'.
     */
    _valuePositiveInt?: Element;
    /**
     * The value of the Output parameter as a basic type.
     */
    valueString: string;
    /**
     * Contains extension information for property 'valueString'.
     */
    _valueString?: Element;
    /**
     * The value of the Output parameter as a basic type.
     */
    valueTime: time;
    /**
     * Contains extension information for property 'valueTime'.
     */
    _valueTime?: Element;
    /**
     * The value of the Output parameter as a basic type.
     */
    valueUnsignedInt: unsignedInt;
    /**
     * Contains extension information for property 'valueUnsignedInt'.
     */
    _valueUnsignedInt?: Element;
    /**
     * The value of the Output parameter as a basic type.
     */
    valueUri: uri;
    /**
     * Contains extension information for property 'valueUri'.
     */
    _valueUri?: Element;
    /**
     * The value of the Output parameter as a basic type.
     */
    valueUrl: url;
    /**
     * The value of the Output parameter as a basic type.
     */
    valueUuid: uuid;
    /**
     * The value of the Output parameter as a basic type.
     */
    valueAddress: Address;
    /**
     * The value of the Output parameter as a basic type.
     */
    valueAge: Age;
    /**
     * The value of the Output parameter as a basic type.
     */
    valueAnnotation: Annotation;
    /**
     * The value of the Output parameter as a basic type.
     */
    valueAttachment: Attachment;
    /**
     * The value of the Output parameter as a basic type.
     */
    valueCodeableConcept: CodeableConcept;
    /**
     * The value of the Output parameter as a basic type.
     */
    valueCoding: Coding;
    /**
     * The value of the Output parameter as a basic type.
     */
    valueContactPoint: ContactPoint;
    /**
     * The value of the Output parameter as a basic type.
     */
    valueCount: Count;
    /**
     * The value of the Output parameter as a basic type.
     */
    valueDistance: Distance;
    /**
     * The value of the Output parameter as a basic type.
     */
    valueDuration: Duration;
    /**
     * The value of the Output parameter as a basic type.
     */
    valueHumanName: HumanName;
    /**
     * The value of the Output parameter as a basic type.
     */
    valueIdentifier: Identifier;
    /**
     * The value of the Output parameter as a basic type.
     */
    valueMoney: Money;
    /**
     * The value of the Output parameter as a basic type.
     */
    valuePeriod: Period;
    /**
     * The value of the Output parameter as a basic type.
     */
    valueQuantity: Quantity;
    /**
     * The value of the Output parameter as a basic type.
     */
    valueRange: Range;
    /**
     * The value of the Output parameter as a basic type.
     */
    valueRatio: Ratio;
    /**
     * The value of the Output parameter as a basic type.
     */
    valueReference: Reference;
    /**
     * The value of the Output parameter as a basic type.
     */
    valueSampledData: SampledData;
    /**
     * The value of the Output parameter as a basic type.
     */
    valueSignature: Signature;
    /**
     * The value of the Output parameter as a basic type.
     */
    valueTiming: Timing;
    /**
     * The value of the Output parameter as a basic type.
     */
    valueContactDetail: ContactDetail;
    /**
     * The value of the Output parameter as a basic type.
     */
    valueContributor: Contributor;
    /**
     * The value of the Output parameter as a basic type.
     */
    valueDataRequirement: DataRequirement;
    /**
     * The value of the Output parameter as a basic type.
     */
    valueExpression: Expression;
    /**
     * The value of the Output parameter as a basic type.
     */
    valueParameterDefinition: ParameterDefinition;
    /**
     * The value of the Output parameter as a basic type.
     */
    valueRelatedArtifact: RelatedArtifact;
    /**
     * The value of the Output parameter as a basic type.
     */
    valueTriggerDefinition: TriggerDefinition;
    /**
     * The value of the Output parameter as a basic type.
     */
    valueUsageContext: UsageContext;
    /**
     * The value of the Output parameter as a basic type.
     */
    valueDosage: Dosage;
}
/**
 * A TerminologyCapabilities resource documents a set of capabilities (behaviors) of a FHIR Terminology Server that may be used as a statement of actual server functionality or a statement of required or desired server implementation.
 */
export interface TerminologyCapabilities {
    /**
     * The type of the resource.
     */
    resourceType: string;
    /**
     * The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes.
     */
    id?: id;
    /**
     * Contains extension information for property 'id'.
     */
    _id?: Element;
    /**
     * The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource.
     */
    meta?: Meta;
    /**
     * A reference to a set of rules that were followed when the resource was constructed, and which must be understood when processing the content. Often, this is a reference to an implementation guide that defines the special rules along with other profiles etc.
     */
    implicitRules?: uri;
    /**
     * Contains extension information for property 'implicitRules'.
     */
    _implicitRules?: Element;
    /**
     * The base language in which the resource is written.
     */
    language?: code;
    /**
     * Contains extension information for property 'language'.
     */
    _language?: Element;
    /**
     * A human-readable narrative that contains a summary of the resource and can be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it "clinically safe" for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety.
     */
    text?: Narrative;
    /**
     * These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, and nor can they have their own independent transaction scope.
     */
    contained?: Resource[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * An absolute URI that is used to identify this terminology capabilities when it is referenced in a specification, model, design or an instance; also called its canonical identifier. This SHOULD be globally unique and SHOULD be a literal address at which at which an authoritative instance of this terminology capabilities is (or will be) published. This URL can be the target of a canonical reference. It SHALL remain the same when the terminology capabilities is stored on different servers.
     */
    url?: uri;
    /**
     * Contains extension information for property 'url'.
     */
    _url?: Element;
    /**
     * The identifier that is used to identify this version of the terminology capabilities when it is referenced in a specification, model, design or instance. This is an arbitrary value managed by the terminology capabilities author and is not expected to be globally unique. For example, it might be a timestamp (e.g. yyyymmdd) if a managed version is not available. There is also no expectation that versions can be placed in a lexicographical sequence.
     */
    version?: string;
    /**
     * Contains extension information for property 'version'.
     */
    _version?: Element;
    /**
     * A natural language name identifying the terminology capabilities. This name should be usable as an identifier for the module by machine processing applications such as code generation.
     */
    name?: string;
    /**
     * Contains extension information for property 'name'.
     */
    _name?: Element;
    /**
     * A short, descriptive, user-friendly title for the terminology capabilities.
     */
    title?: string;
    /**
     * Contains extension information for property 'title'.
     */
    _title?: Element;
    /**
     * The status of this terminology capabilities. Enables tracking the life-cycle of the content.
     */
    status: code;
    /**
     * Contains extension information for property 'status'.
     */
    _status?: Element;
    /**
     * A Boolean value to indicate that this terminology capabilities is authored for testing purposes (or education/evaluation/marketing) and is not intended to be used for genuine usage.
     */
    experimental?: boolean;
    /**
     * Contains extension information for property 'experimental'.
     */
    _experimental?: Element;
    /**
     * The date  (and optionally time) when the terminology capabilities was published. The date must change when the business version changes and it must change if the status code changes. In addition, it should change when the substantive content of the terminology capabilities changes.
     */
    date: dateTime;
    /**
     * Contains extension information for property 'date'.
     */
    _date?: Element;
    /**
     * The name of the organization or individual that published the terminology capabilities.
     */
    publisher?: string;
    /**
     * Contains extension information for property 'publisher'.
     */
    _publisher?: Element;
    /**
     * Contact details to assist a user in finding and communicating with the publisher.
     */
    contact?: ContactDetail[];
    /**
     * A free text natural language description of the terminology capabilities from a consumer's perspective. Typically, this is used when the capability statement describes a desired rather than an actual solution, for example as a formal expression of requirements as part of an RFP.
     */
    description?: markdown;
    /**
     * Contains extension information for property 'description'.
     */
    _description?: Element;
    /**
     * The content was developed with a focus and intent of supporting the contexts that are listed. These contexts may be general categories (gender, age, ...) or may be references to specific programs (insurance plans, studies, ...) and may be used to assist with indexing and searching for appropriate terminology capabilities instances.
     */
    useContext?: UsageContext[];
    /**
     * A legal or geographic region in which the terminology capabilities is intended to be used.
     */
    jurisdiction?: CodeableConcept[];
    /**
     * Explanation of why this terminology capabilities is needed and why it has been designed as it has.
     */
    purpose?: markdown;
    /**
     * Contains extension information for property 'purpose'.
     */
    _purpose?: Element;
    /**
     * A copyright statement relating to the terminology capabilities and/or its contents. Copyright statements are generally legal restrictions on the use and publishing of the terminology capabilities.
     */
    copyright?: markdown;
    /**
     * Contains extension information for property 'copyright'.
     */
    _copyright?: Element;
    /**
     * The way that this statement is intended to be used, to describe an actual running instance of software, a particular product (kind, not instance of software) or a class of implementation (e.g. a desired purchase).
     */
    kind: code;
    /**
     * Contains extension information for property 'kind'.
     */
    _kind?: Element;
    /**
     * Software that is covered by this terminology capability statement.  It is used when the statement describes the capabilities of a particular software version, independent of an installation.
     */
    software?: TerminologyCapabilitiesSoftware;
    /**
     * Identifies a specific implementation instance that is described by the terminology capability statement - i.e. a particular installation, rather than the capabilities of a software program.
     */
    implementation?: TerminologyCapabilitiesImplementation;
    /**
     * Whether the server supports lockedDate.
     */
    lockedDate?: boolean;
    /**
     * Contains extension information for property 'lockedDate'.
     */
    _lockedDate?: Element;
    /**
     * Identifies a code system that is supported by the server. If there is a no code system URL, then this declares the general assumptions a client can make about support for any CodeSystem resource.
     */
    codeSystem?: TerminologyCapabilitiesCodeSystem[];
    /**
     * Information about the [ValueSet/$expand](valueset-operation-expand.html) operation.
     */
    expansion?: TerminologyCapabilitiesExpansion;
    /**
     * The degree to which the server supports the code search parameter on ValueSet, if it is supported.
     */
    codeSearch?: code;
    /**
     * Contains extension information for property 'codeSearch'.
     */
    _codeSearch?: Element;
    /**
     * Information about the [ValueSet/$validate-code](valueset-operation-validate-code.html) operation.
     */
    validateCode?: TerminologyCapabilitiesValidateCode;
    /**
     * Information about the [ConceptMap/$translate](conceptmap-operation-translate.html) operation.
     */
    translation?: TerminologyCapabilitiesTranslation;
    /**
     * Whether the $closure operation is supported.
     */
    closure?: TerminologyCapabilitiesClosure;
}
/**
 * Software that is covered by this terminology capability statement.  It is used when the statement describes the capabilities of a particular software version, independent of an installation.
 */
export interface TerminologyCapabilitiesSoftware {
    /**
     * Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
     */
    id?: string;
    /**
     * Contains extension information for property 'id'.
     */
    _id?: Element;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * Name the software is known by.
     */
    name: string;
    /**
     * Contains extension information for property 'name'.
     */
    _name?: Element;
    /**
     * The version identifier for the software covered by this statement.
     */
    version?: string;
    /**
     * Contains extension information for property 'version'.
     */
    _version?: Element;
}
/**
 * Identifies a specific implementation instance that is described by the terminology capability statement - i.e. a particular installation, rather than the capabilities of a software program.
 */
export interface TerminologyCapabilitiesImplementation {
    /**
     * Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
     */
    id?: string;
    /**
     * Contains extension information for property 'id'.
     */
    _id?: Element;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * Information about the specific installation that this terminology capability statement relates to.
     */
    description: string;
    /**
     * Contains extension information for property 'description'.
     */
    _description?: Element;
    /**
     * An absolute base URL for the implementation.
     */
    url?: url;
}
/**
 * Identifies a code system that is supported by the server. If there is a no code system URL, then this declares the general assumptions a client can make about support for any CodeSystem resource.
 */
export interface TerminologyCapabilitiesCodeSystem {
    /**
     * Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
     */
    id?: string;
    /**
     * Contains extension information for property 'id'.
     */
    _id?: Element;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * URI for the Code System.
     */
    uri?: canonical;
    /**
     * For the code system, a list of versions that are supported by the server.
     */
    version?: TerminologyCapabilitiesCodeSystemVersion[];
    /**
     * True if subsumption is supported for this version of the code system.
     */
    subsumption?: boolean;
    /**
     * Contains extension information for property 'subsumption'.
     */
    _subsumption?: Element;
}
/**
 * For the code system, a list of versions that are supported by the server.
 */
export interface TerminologyCapabilitiesCodeSystemVersion {
    /**
     * Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
     */
    id?: string;
    /**
     * Contains extension information for property 'id'.
     */
    _id?: Element;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * For version-less code systems, there should be a single version with no identifier.
     */
    code?: string;
    /**
     * Contains extension information for property 'code'.
     */
    _code?: Element;
    /**
     * If this is the default version for this code system.
     */
    isDefault?: boolean;
    /**
     * Contains extension information for property 'isDefault'.
     */
    _isDefault?: Element;
    /**
     * If the compositional grammar defined by the code system is supported.
     */
    compositional?: boolean;
    /**
     * Contains extension information for property 'compositional'.
     */
    _compositional?: Element;
    /**
     * Language Displays supported.
     */
    language?: code[];
    /**
     * Contains extension information for property 'language'.
     */
    _language?: Element[];
    /**
     * Filter Properties supported.
     */
    filter?: TerminologyCapabilitiesCodeSystemVersionFilter[];
    /**
     * Properties supported for $lookup.
     */
    property?: code[];
    /**
     * Contains extension information for property 'property'.
     */
    _property?: Element[];
}
/**
 * Filter Properties supported.
 */
export interface TerminologyCapabilitiesCodeSystemVersionFilter {
    /**
     * Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
     */
    id?: string;
    /**
     * Contains extension information for property 'id'.
     */
    _id?: Element;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * Code of the property supported.
     */
    code: code;
    /**
     * Contains extension information for property 'code'.
     */
    _code?: Element;
    /**
     * Operations supported for the property.
     */
    op: code[];
    /**
     * Contains extension information for property 'op'.
     */
    _op?: Element[];
}
/**
 * Information about the [ValueSet/$expand](valueset-operation-expand.html) operation.
 */
export interface TerminologyCapabilitiesExpansion {
    /**
     * Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
     */
    id?: string;
    /**
     * Contains extension information for property 'id'.
     */
    _id?: Element;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * Whether the server can return nested value sets.
     */
    hierarchical?: boolean;
    /**
     * Contains extension information for property 'hierarchical'.
     */
    _hierarchical?: Element;
    /**
     * Whether the server supports paging on expansion.
     */
    paging?: boolean;
    /**
     * Contains extension information for property 'paging'.
     */
    _paging?: Element;
    /**
     * Allow request for incomplete expansions?
     */
    incomplete?: boolean;
    /**
     * Contains extension information for property 'incomplete'.
     */
    _incomplete?: Element;
    /**
     * Supported expansion parameter.
     */
    parameter?: TerminologyCapabilitiesExpansionParameter[];
    /**
     * Documentation about text searching works.
     */
    textFilter?: markdown;
    /**
     * Contains extension information for property 'textFilter'.
     */
    _textFilter?: Element;
}
/**
 * Supported expansion parameter.
 */
export interface TerminologyCapabilitiesExpansionParameter {
    /**
     * Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
     */
    id?: string;
    /**
     * Contains extension information for property 'id'.
     */
    _id?: Element;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * Expansion Parameter name.
     */
    name: code;
    /**
     * Contains extension information for property 'name'.
     */
    _name?: Element;
    /**
     * Description of support for parameter.
     */
    documentation?: string;
    /**
     * Contains extension information for property 'documentation'.
     */
    _documentation?: Element;
}
/**
 * Information about the [ValueSet/$validate-code](valueset-operation-validate-code.html) operation.
 */
export interface TerminologyCapabilitiesValidateCode {
    /**
     * Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
     */
    id?: string;
    /**
     * Contains extension information for property 'id'.
     */
    _id?: Element;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * Whether translations are validated.
     */
    translations: boolean;
    /**
     * Contains extension information for property 'translations'.
     */
    _translations?: Element;
}
/**
 * Information about the [ConceptMap/$translate](conceptmap-operation-translate.html) operation.
 */
export interface TerminologyCapabilitiesTranslation {
    /**
     * Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
     */
    id?: string;
    /**
     * Contains extension information for property 'id'.
     */
    _id?: Element;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * Whether the client must identify the map.
     */
    needsMap: boolean;
    /**
     * Contains extension information for property 'needsMap'.
     */
    _needsMap?: Element;
}
/**
 * Whether the $closure operation is supported.
 */
export interface TerminologyCapabilitiesClosure {
    /**
     * Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
     */
    id?: string;
    /**
     * Contains extension information for property 'id'.
     */
    _id?: Element;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * If cross-system closure is supported.
     */
    translation?: boolean;
    /**
     * Contains extension information for property 'translation'.
     */
    _translation?: Element;
}
/**
 * A summary of information based on the results of executing a TestScript.
 */
export interface TestReport {
    /**
     * The type of the resource.
     */
    resourceType: string;
    /**
     * The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes.
     */
    id?: id;
    /**
     * Contains extension information for property 'id'.
     */
    _id?: Element;
    /**
     * The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource.
     */
    meta?: Meta;
    /**
     * A reference to a set of rules that were followed when the resource was constructed, and which must be understood when processing the content. Often, this is a reference to an implementation guide that defines the special rules along with other profiles etc.
     */
    implicitRules?: uri;
    /**
     * Contains extension information for property 'implicitRules'.
     */
    _implicitRules?: Element;
    /**
     * The base language in which the resource is written.
     */
    language?: code;
    /**
     * Contains extension information for property 'language'.
     */
    _language?: Element;
    /**
     * A human-readable narrative that contains a summary of the resource and can be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it "clinically safe" for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety.
     */
    text?: Narrative;
    /**
     * These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, and nor can they have their own independent transaction scope.
     */
    contained?: Resource[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * Identifier for the TestScript assigned for external purposes outside the context of FHIR.
     */
    identifier?: Identifier;
    /**
     * A free text natural language name identifying the executed TestScript.
     */
    name?: string;
    /**
     * Contains extension information for property 'name'.
     */
    _name?: Element;
    /**
     * The current state of this test report.
     */
    status: code;
    /**
     * Contains extension information for property 'status'.
     */
    _status?: Element;
    /**
     * Ideally this is an absolute URL that is used to identify the version-specific TestScript that was executed, matching the `TestScript.url`.
     */
    testScript: Reference;
    /**
     * The overall result from the execution of the TestScript.
     */
    result: code;
    /**
     * Contains extension information for property 'result'.
     */
    _result?: Element;
    /**
     * The final score (percentage of tests passed) resulting from the execution of the TestScript.
     */
    score?: decimal;
    /**
     * Contains extension information for property 'score'.
     */
    _score?: Element;
    /**
     * Name of the tester producing this report (Organization or individual).
     */
    tester?: string;
    /**
     * Contains extension information for property 'tester'.
     */
    _tester?: Element;
    /**
     * When the TestScript was executed and this TestReport was generated.
     */
    issued?: dateTime;
    /**
     * Contains extension information for property 'issued'.
     */
    _issued?: Element;
    /**
     * A participant in the test execution, either the execution engine, a client, or a server.
     */
    participant?: TestReportParticipant[];
    /**
     * The results of the series of required setup operations before the tests were executed.
     */
    setup?: TestReportSetup;
    /**
     * A test executed from the test script.
     */
    test?: TestReportTest[];
    /**
     * The results of the series of operations required to clean up after all the tests were executed (successfully or otherwise).
     */
    teardown?: TestReportTeardown;
}
/**
 * A participant in the test execution, either the execution engine, a client, or a server.
 */
export interface TestReportParticipant {
    /**
     * Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
     */
    id?: string;
    /**
     * Contains extension information for property 'id'.
     */
    _id?: Element;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * The type of participant.
     */
    type: code;
    /**
     * Contains extension information for property 'type'.
     */
    _type?: Element;
    /**
     * The uri of the participant. An absolute URL is preferred.
     */
    uri: uri;
    /**
     * Contains extension information for property 'uri'.
     */
    _uri?: Element;
    /**
     * The display name of the participant.
     */
    display?: string;
    /**
     * Contains extension information for property 'display'.
     */
    _display?: Element;
}
/**
 * The results of the series of required setup operations before the tests were executed.
 */
export interface TestReportSetup {
    /**
     * Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
     */
    id?: string;
    /**
     * Contains extension information for property 'id'.
     */
    _id?: Element;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * Action would contain either an operation or an assertion.
     */
    action: TestReportSetupAction[];
}
/**
 * Action would contain either an operation or an assertion.
 */
export interface TestReportSetupAction {
    /**
     * Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
     */
    id?: string;
    /**
     * Contains extension information for property 'id'.
     */
    _id?: Element;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * The operation performed.
     */
    operation?: TestReportSetupActionOperation;
    /**
     * The results of the assertion performed on the previous operations.
     */
    assert?: TestReportSetupActionAssert;
}
/**
 * The operation performed.
 */
export interface TestReportSetupActionOperation {
    /**
     * Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
     */
    id?: string;
    /**
     * Contains extension information for property 'id'.
     */
    _id?: Element;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * The result of this operation.
     */
    result: code;
    /**
     * Contains extension information for property 'result'.
     */
    _result?: Element;
    /**
     * An explanatory message associated with the result.
     */
    message?: markdown;
    /**
     * Contains extension information for property 'message'.
     */
    _message?: Element;
    /**
     * A link to further details on the result.
     */
    detail?: uri;
    /**
     * Contains extension information for property 'detail'.
     */
    _detail?: Element;
}
/**
 * The results of the assertion performed on the previous operations.
 */
export interface TestReportSetupActionAssert {
    /**
     * Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
     */
    id?: string;
    /**
     * Contains extension information for property 'id'.
     */
    _id?: Element;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * The result of this assertion.
     */
    result: code;
    /**
     * Contains extension information for property 'result'.
     */
    _result?: Element;
    /**
     * An explanatory message associated with the result.
     */
    message?: markdown;
    /**
     * Contains extension information for property 'message'.
     */
    _message?: Element;
    /**
     * A link to further details on the result.
     */
    detail?: string;
    /**
     * Contains extension information for property 'detail'.
     */
    _detail?: Element;
}
/**
 * A test executed from the test script.
 */
export interface TestReportTest {
    /**
     * Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
     */
    id?: string;
    /**
     * Contains extension information for property 'id'.
     */
    _id?: Element;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * The name of this test used for tracking/logging purposes by test engines.
     */
    name?: string;
    /**
     * Contains extension information for property 'name'.
     */
    _name?: Element;
    /**
     * A short description of the test used by test engines for tracking and reporting purposes.
     */
    description?: string;
    /**
     * Contains extension information for property 'description'.
     */
    _description?: Element;
    /**
     * Action would contain either an operation or an assertion.
     */
    action: TestReportTestAction[];
}
/**
 * Action would contain either an operation or an assertion.
 */
export interface TestReportTestAction {
    /**
     * Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
     */
    id?: string;
    /**
     * Contains extension information for property 'id'.
     */
    _id?: Element;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * An operation would involve a REST request to a server.
     */
    operation?: TestReportSetupActionOperation;
    /**
     * The results of the assertion performed on the previous operations.
     */
    assert?: TestReportSetupActionAssert;
}
/**
 * The results of the series of operations required to clean up after all the tests were executed (successfully or otherwise).
 */
export interface TestReportTeardown {
    /**
     * Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
     */
    id?: string;
    /**
     * Contains extension information for property 'id'.
     */
    _id?: Element;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * The teardown action will only contain an operation.
     */
    action: TestReportTeardownAction[];
}
/**
 * The teardown action will only contain an operation.
 */
export interface TestReportTeardownAction {
    /**
     * Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
     */
    id?: string;
    /**
     * Contains extension information for property 'id'.
     */
    _id?: Element;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * An operation would involve a REST request to a server.
     */
    operation: TestReportSetupActionOperation;
}
/**
 * A structured set of tests against a FHIR server or client implementation to determine compliance against the FHIR specification.
 */
export interface TestScript {
    /**
     * The type of the resource.
     */
    resourceType: string;
    /**
     * The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes.
     */
    id?: id;
    /**
     * Contains extension information for property 'id'.
     */
    _id?: Element;
    /**
     * The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource.
     */
    meta?: Meta;
    /**
     * A reference to a set of rules that were followed when the resource was constructed, and which must be understood when processing the content. Often, this is a reference to an implementation guide that defines the special rules along with other profiles etc.
     */
    implicitRules?: uri;
    /**
     * Contains extension information for property 'implicitRules'.
     */
    _implicitRules?: Element;
    /**
     * The base language in which the resource is written.
     */
    language?: code;
    /**
     * Contains extension information for property 'language'.
     */
    _language?: Element;
    /**
     * A human-readable narrative that contains a summary of the resource and can be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it "clinically safe" for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety.
     */
    text?: Narrative;
    /**
     * These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, and nor can they have their own independent transaction scope.
     */
    contained?: Resource[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * An absolute URI that is used to identify this test script when it is referenced in a specification, model, design or an instance; also called its canonical identifier. This SHOULD be globally unique and SHOULD be a literal address at which at which an authoritative instance of this test script is (or will be) published. This URL can be the target of a canonical reference. It SHALL remain the same when the test script is stored on different servers.
     */
    url: uri;
    /**
     * Contains extension information for property 'url'.
     */
    _url?: Element;
    /**
     * A formal identifier that is used to identify this test script when it is represented in other formats, or referenced in a specification, model, design or an instance.
     */
    identifier?: Identifier;
    /**
     * The identifier that is used to identify this version of the test script when it is referenced in a specification, model, design or instance. This is an arbitrary value managed by the test script author and is not expected to be globally unique. For example, it might be a timestamp (e.g. yyyymmdd) if a managed version is not available. There is also no expectation that versions can be placed in a lexicographical sequence.
     */
    version?: string;
    /**
     * Contains extension information for property 'version'.
     */
    _version?: Element;
    /**
     * A natural language name identifying the test script. This name should be usable as an identifier for the module by machine processing applications such as code generation.
     */
    name: string;
    /**
     * Contains extension information for property 'name'.
     */
    _name?: Element;
    /**
     * A short, descriptive, user-friendly title for the test script.
     */
    title?: string;
    /**
     * Contains extension information for property 'title'.
     */
    _title?: Element;
    /**
     * The status of this test script. Enables tracking the life-cycle of the content.
     */
    status: code;
    /**
     * Contains extension information for property 'status'.
     */
    _status?: Element;
    /**
     * A Boolean value to indicate that this test script is authored for testing purposes (or education/evaluation/marketing) and is not intended to be used for genuine usage.
     */
    experimental?: boolean;
    /**
     * Contains extension information for property 'experimental'.
     */
    _experimental?: Element;
    /**
     * The date  (and optionally time) when the test script was published. The date must change when the business version changes and it must change if the status code changes. In addition, it should change when the substantive content of the test script changes.
     */
    date?: dateTime;
    /**
     * Contains extension information for property 'date'.
     */
    _date?: Element;
    /**
     * The name of the organization or individual that published the test script.
     */
    publisher?: string;
    /**
     * Contains extension information for property 'publisher'.
     */
    _publisher?: Element;
    /**
     * Contact details to assist a user in finding and communicating with the publisher.
     */
    contact?: ContactDetail[];
    /**
     * A free text natural language description of the test script from a consumer's perspective.
     */
    description?: markdown;
    /**
     * Contains extension information for property 'description'.
     */
    _description?: Element;
    /**
     * The content was developed with a focus and intent of supporting the contexts that are listed. These contexts may be general categories (gender, age, ...) or may be references to specific programs (insurance plans, studies, ...) and may be used to assist with indexing and searching for appropriate test script instances.
     */
    useContext?: UsageContext[];
    /**
     * A legal or geographic region in which the test script is intended to be used.
     */
    jurisdiction?: CodeableConcept[];
    /**
     * Explanation of why this test script is needed and why it has been designed as it has.
     */
    purpose?: markdown;
    /**
     * Contains extension information for property 'purpose'.
     */
    _purpose?: Element;
    /**
     * A copyright statement relating to the test script and/or its contents. Copyright statements are generally legal restrictions on the use and publishing of the test script.
     */
    copyright?: markdown;
    /**
     * Contains extension information for property 'copyright'.
     */
    _copyright?: Element;
    /**
     * An abstract server used in operations within this test script in the origin element.
     */
    origin?: TestScriptOrigin[];
    /**
     * An abstract server used in operations within this test script in the destination element.
     */
    destination?: TestScriptDestination[];
    /**
     * The required capability must exist and are assumed to function correctly on the FHIR server being tested.
     */
    metadata?: TestScriptMetadata;
    /**
     * Fixture in the test script - by reference (uri). All fixtures are required for the test script to execute.
     */
    fixture?: TestScriptFixture[];
    /**
     * Reference to the profile to be used for validation.
     */
    profile?: Reference[];
    /**
     * Variable is set based either on element value in response body or on header field value in the response headers.
     */
    variable?: TestScriptVariable[];
    /**
     * A series of required setup operations before tests are executed.
     */
    setup?: TestScriptSetup;
    /**
     * A test in this script.
     */
    test?: TestScriptTest[];
    /**
     * A series of operations required to clean up after all the tests are executed (successfully or otherwise).
     */
    teardown?: TestScriptTeardown;
}
/**
 * An abstract server used in operations within this test script in the origin element.
 */
export interface TestScriptOrigin {
    /**
     * Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
     */
    id?: string;
    /**
     * Contains extension information for property 'id'.
     */
    _id?: Element;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * Abstract name given to an origin server in this test script.  The name is provided as a number starting at 1.
     */
    index: integer;
    /**
     * Contains extension information for property 'index'.
     */
    _index?: Element;
    /**
     * The type of origin profile the test system supports.
     */
    profile: Coding;
}
/**
 * An abstract server used in operations within this test script in the destination element.
 */
export interface TestScriptDestination {
    /**
     * Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
     */
    id?: string;
    /**
     * Contains extension information for property 'id'.
     */
    _id?: Element;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * Abstract name given to a destination server in this test script.  The name is provided as a number starting at 1.
     */
    index: integer;
    /**
     * Contains extension information for property 'index'.
     */
    _index?: Element;
    /**
     * The type of destination profile the test system supports.
     */
    profile: Coding;
}
/**
 * The required capability must exist and are assumed to function correctly on the FHIR server being tested.
 */
export interface TestScriptMetadata {
    /**
     * Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
     */
    id?: string;
    /**
     * Contains extension information for property 'id'.
     */
    _id?: Element;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * A link to the FHIR specification that this test is covering.
     */
    link?: TestScriptMetadataLink[];
    /**
     * Capabilities that must exist and are assumed to function correctly on the FHIR server being tested.
     */
    capability: TestScriptMetadataCapability[];
}
/**
 * A link to the FHIR specification that this test is covering.
 */
export interface TestScriptMetadataLink {
    /**
     * Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
     */
    id?: string;
    /**
     * Contains extension information for property 'id'.
     */
    _id?: Element;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * URL to a particular requirement or feature within the FHIR specification.
     */
    url: uri;
    /**
     * Contains extension information for property 'url'.
     */
    _url?: Element;
    /**
     * Short description of the link.
     */
    description?: string;
    /**
     * Contains extension information for property 'description'.
     */
    _description?: Element;
}
/**
 * Capabilities that must exist and are assumed to function correctly on the FHIR server being tested.
 */
export interface TestScriptMetadataCapability {
    /**
     * Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
     */
    id?: string;
    /**
     * Contains extension information for property 'id'.
     */
    _id?: Element;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * Whether or not the test execution will require the given capabilities of the server in order for this test script to execute.
     */
    required: boolean;
    /**
     * Contains extension information for property 'required'.
     */
    _required?: Element;
    /**
     * Whether or not the test execution will validate the given capabilities of the server in order for this test script to execute.
     */
    validated: boolean;
    /**
     * Contains extension information for property 'validated'.
     */
    _validated?: Element;
    /**
     * Description of the capabilities that this test script is requiring the server to support.
     */
    description?: string;
    /**
     * Contains extension information for property 'description'.
     */
    _description?: Element;
    /**
     * Which origin server these requirements apply to.
     */
    origin?: integer[];
    /**
     * Contains extension information for property 'origin'.
     */
    _origin?: Element[];
    /**
     * Which server these requirements apply to.
     */
    destination?: integer;
    /**
     * Contains extension information for property 'destination'.
     */
    _destination?: Element;
    /**
     * Links to the FHIR specification that describes this interaction and the resources involved in more detail.
     */
    link?: uri[];
    /**
     * Contains extension information for property 'link'.
     */
    _link?: Element[];
    /**
     * Minimum capabilities required of server for test script to execute successfully.   If server does not meet at a minimum the referenced capability statement, then all tests in this script are skipped.
     */
    capabilities: canonical;
}
/**
 * Fixture in the test script - by reference (uri). All fixtures are required for the test script to execute.
 */
export interface TestScriptFixture {
    /**
     * Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
     */
    id?: string;
    /**
     * Contains extension information for property 'id'.
     */
    _id?: Element;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * Whether or not to implicitly create the fixture during setup. If true, the fixture is automatically created on each server being tested during setup, therefore no create operation is required for this fixture in the TestScript.setup section.
     */
    autocreate: boolean;
    /**
     * Contains extension information for property 'autocreate'.
     */
    _autocreate?: Element;
    /**
     * Whether or not to implicitly delete the fixture during teardown. If true, the fixture is automatically deleted on each server being tested during teardown, therefore no delete operation is required for this fixture in the TestScript.teardown section.
     */
    autodelete: boolean;
    /**
     * Contains extension information for property 'autodelete'.
     */
    _autodelete?: Element;
    /**
     * Reference to the resource (containing the contents of the resource needed for operations).
     */
    resource?: Reference;
}
/**
 * Variable is set based either on element value in response body or on header field value in the response headers.
 */
export interface TestScriptVariable {
    /**
     * Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
     */
    id?: string;
    /**
     * Contains extension information for property 'id'.
     */
    _id?: Element;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * Descriptive name for this variable.
     */
    name: string;
    /**
     * Contains extension information for property 'name'.
     */
    _name?: Element;
    /**
     * A default, hard-coded, or user-defined value for this variable.
     */
    defaultValue?: string;
    /**
     * Contains extension information for property 'defaultValue'.
     */
    _defaultValue?: Element;
    /**
     * A free text natural language description of the variable and its purpose.
     */
    description?: string;
    /**
     * Contains extension information for property 'description'.
     */
    _description?: Element;
    /**
     * The FHIRPath expression to evaluate against the fixture body. When variables are defined, only one of either expression, headerField or path must be specified.
     */
    expression?: string;
    /**
     * Contains extension information for property 'expression'.
     */
    _expression?: Element;
    /**
     * Will be used to grab the HTTP header field value from the headers that sourceId is pointing to.
     */
    headerField?: string;
    /**
     * Contains extension information for property 'headerField'.
     */
    _headerField?: Element;
    /**
     * Displayable text string with hint help information to the user when entering a default value.
     */
    hint?: string;
    /**
     * Contains extension information for property 'hint'.
     */
    _hint?: Element;
    /**
     * XPath or JSONPath to evaluate against the fixture body.  When variables are defined, only one of either expression, headerField or path must be specified.
     */
    path?: string;
    /**
     * Contains extension information for property 'path'.
     */
    _path?: Element;
    /**
     * Fixture to evaluate the XPath/JSONPath expression or the headerField  against within this variable.
     */
    sourceId?: id;
    /**
     * Contains extension information for property 'sourceId'.
     */
    _sourceId?: Element;
}
/**
 * A series of required setup operations before tests are executed.
 */
export interface TestScriptSetup {
    /**
     * Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
     */
    id?: string;
    /**
     * Contains extension information for property 'id'.
     */
    _id?: Element;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * Action would contain either an operation or an assertion.
     */
    action: TestScriptSetupAction[];
}
/**
 * Action would contain either an operation or an assertion.
 */
export interface TestScriptSetupAction {
    /**
     * Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
     */
    id?: string;
    /**
     * Contains extension information for property 'id'.
     */
    _id?: Element;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * The operation to perform.
     */
    operation?: TestScriptSetupActionOperation;
    /**
     * Evaluates the results of previous operations to determine if the server under test behaves appropriately.
     */
    assert?: TestScriptSetupActionAssert;
}
/**
 * The operation to perform.
 */
export interface TestScriptSetupActionOperation {
    /**
     * Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
     */
    id?: string;
    /**
     * Contains extension information for property 'id'.
     */
    _id?: Element;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * Server interaction or operation type.
     */
    type?: Coding;
    /**
     * The type of the resource.  See http://build.fhir.org/resourcelist.html.
     */
    resource?: code;
    /**
     * Contains extension information for property 'resource'.
     */
    _resource?: Element;
    /**
     * The label would be used for tracking/logging purposes by test engines.
     */
    label?: string;
    /**
     * Contains extension information for property 'label'.
     */
    _label?: Element;
    /**
     * The description would be used by test engines for tracking and reporting purposes.
     */
    description?: string;
    /**
     * Contains extension information for property 'description'.
     */
    _description?: Element;
    /**
     * The mime-type to use for RESTful operation in the 'Accept' header.
     */
    accept?: code;
    /**
     * Contains extension information for property 'accept'.
     */
    _accept?: Element;
    /**
     * The mime-type to use for RESTful operation in the 'Content-Type' header.
     */
    contentType?: code;
    /**
     * Contains extension information for property 'contentType'.
     */
    _contentType?: Element;
    /**
     * The server where the request message is destined for.  Must be one of the server numbers listed in TestScript.destination section.
     */
    destination?: integer;
    /**
     * Contains extension information for property 'destination'.
     */
    _destination?: Element;
    /**
     * Whether or not to implicitly send the request url in encoded format. The default is true to match the standard RESTful client behavior. Set to false when communicating with a server that does not support encoded url paths.
     */
    encodeRequestUrl: boolean;
    /**
     * Contains extension information for property 'encodeRequestUrl'.
     */
    _encodeRequestUrl?: Element;
    /**
     * The HTTP method the test engine MUST use for this operation regardless of any other operation details.
     */
    method?: code;
    /**
     * Contains extension information for property 'method'.
     */
    _method?: Element;
    /**
     * The server where the request message originates from.  Must be one of the server numbers listed in TestScript.origin section.
     */
    origin?: integer;
    /**
     * Contains extension information for property 'origin'.
     */
    _origin?: Element;
    /**
     * Path plus parameters after [type].  Used to set parts of the request URL explicitly.
     */
    params?: string;
    /**
     * Contains extension information for property 'params'.
     */
    _params?: Element;
    /**
     * Header elements would be used to set HTTP headers.
     */
    requestHeader?: TestScriptSetupActionOperationRequestHeader[];
    /**
     * The fixture id (maybe new) to map to the request.
     */
    requestId?: id;
    /**
     * Contains extension information for property 'requestId'.
     */
    _requestId?: Element;
    /**
     * The fixture id (maybe new) to map to the response.
     */
    responseId?: id;
    /**
     * Contains extension information for property 'responseId'.
     */
    _responseId?: Element;
    /**
     * The id of the fixture used as the body of a PUT or POST request.
     */
    sourceId?: id;
    /**
     * Contains extension information for property 'sourceId'.
     */
    _sourceId?: Element;
    /**
     * Id of fixture used for extracting the [id],  [type], and [vid] for GET requests.
     */
    targetId?: id;
    /**
     * Contains extension information for property 'targetId'.
     */
    _targetId?: Element;
    /**
     * Complete request URL.
     */
    url?: string;
    /**
     * Contains extension information for property 'url'.
     */
    _url?: Element;
}
/**
 * Header elements would be used to set HTTP headers.
 */
export interface TestScriptSetupActionOperationRequestHeader {
    /**
     * Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
     */
    id?: string;
    /**
     * Contains extension information for property 'id'.
     */
    _id?: Element;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * The HTTP header field e.g. "Accept".
     */
    field: string;
    /**
     * Contains extension information for property 'field'.
     */
    _field?: Element;
    /**
     * The value of the header e.g. "application/fhir+xml".
     */
    value: string;
    /**
     * Contains extension information for property 'value'.
     */
    _value?: Element;
}
/**
 * Evaluates the results of previous operations to determine if the server under test behaves appropriately.
 */
export interface TestScriptSetupActionAssert {
    /**
     * Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
     */
    id?: string;
    /**
     * Contains extension information for property 'id'.
     */
    _id?: Element;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * The label would be used for tracking/logging purposes by test engines.
     */
    label?: string;
    /**
     * Contains extension information for property 'label'.
     */
    _label?: Element;
    /**
     * The description would be used by test engines for tracking and reporting purposes.
     */
    description?: string;
    /**
     * Contains extension information for property 'description'.
     */
    _description?: Element;
    /**
     * The direction to use for the assertion.
     */
    direction?: code;
    /**
     * Contains extension information for property 'direction'.
     */
    _direction?: Element;
    /**
     * Id of the source fixture used as the contents to be evaluated by either the "source/expression" or "sourceId/path" definition.
     */
    compareToSourceId?: string;
    /**
     * Contains extension information for property 'compareToSourceId'.
     */
    _compareToSourceId?: Element;
    /**
     * The FHIRPath expression to evaluate against the source fixture. When compareToSourceId is defined, either compareToSourceExpression or compareToSourcePath must be defined, but not both.
     */
    compareToSourceExpression?: string;
    /**
     * Contains extension information for property 'compareToSourceExpression'.
     */
    _compareToSourceExpression?: Element;
    /**
     * XPath or JSONPath expression to evaluate against the source fixture. When compareToSourceId is defined, either compareToSourceExpression or compareToSourcePath must be defined, but not both.
     */
    compareToSourcePath?: string;
    /**
     * Contains extension information for property 'compareToSourcePath'.
     */
    _compareToSourcePath?: Element;
    /**
     * The mime-type contents to compare against the request or response message 'Content-Type' header.
     */
    contentType?: code;
    /**
     * Contains extension information for property 'contentType'.
     */
    _contentType?: Element;
    /**
     * The FHIRPath expression to be evaluated against the request or response message contents - HTTP headers and payload.
     */
    expression?: string;
    /**
     * Contains extension information for property 'expression'.
     */
    _expression?: Element;
    /**
     * The HTTP header field name e.g. 'Location'.
     */
    headerField?: string;
    /**
     * Contains extension information for property 'headerField'.
     */
    _headerField?: Element;
    /**
     * The ID of a fixture.  Asserts that the response contains at a minimum the fixture specified by minimumId.
     */
    minimumId?: string;
    /**
     * Contains extension information for property 'minimumId'.
     */
    _minimumId?: Element;
    /**
     * Whether or not the test execution performs validation on the bundle navigation links.
     */
    navigationLinks?: boolean;
    /**
     * Contains extension information for property 'navigationLinks'.
     */
    _navigationLinks?: Element;
    /**
     * The operator type defines the conditional behavior of the assert. If not defined, the default is equals.
     */
    operator?: code;
    /**
     * Contains extension information for property 'operator'.
     */
    _operator?: Element;
    /**
     * The XPath or JSONPath expression to be evaluated against the fixture representing the response received from server.
     */
    path?: string;
    /**
     * Contains extension information for property 'path'.
     */
    _path?: Element;
    /**
     * The request method or HTTP operation code to compare against that used by the client system under test.
     */
    requestMethod?: code;
    /**
     * Contains extension information for property 'requestMethod'.
     */
    _requestMethod?: Element;
    /**
     * The value to use in a comparison against the request URL path string.
     */
    requestURL?: string;
    /**
     * Contains extension information for property 'requestURL'.
     */
    _requestURL?: Element;
    /**
     * The type of the resource.  See http://build.fhir.org/resourcelist.html.
     */
    resource?: code;
    /**
     * Contains extension information for property 'resource'.
     */
    _resource?: Element;
    /**
     * okay | created | noContent | notModified | bad | forbidden | notFound | methodNotAllowed | conflict | gone | preconditionFailed | unprocessable.
     */
    response?: code;
    /**
     * Contains extension information for property 'response'.
     */
    _response?: Element;
    /**
     * The value of the HTTP response code to be tested.
     */
    responseCode?: string;
    /**
     * Contains extension information for property 'responseCode'.
     */
    _responseCode?: Element;
    /**
     * Fixture to evaluate the XPath/JSONPath expression or the headerField  against.
     */
    sourceId?: id;
    /**
     * Contains extension information for property 'sourceId'.
     */
    _sourceId?: Element;
    /**
     * The ID of the Profile to validate against.
     */
    validateProfileId?: id;
    /**
     * Contains extension information for property 'validateProfileId'.
     */
    _validateProfileId?: Element;
    /**
     * The value to compare to.
     */
    value?: string;
    /**
     * Contains extension information for property 'value'.
     */
    _value?: Element;
    /**
     * Whether or not the test execution will produce a warning only on error for this assert.
     */
    warningOnly: boolean;
    /**
     * Contains extension information for property 'warningOnly'.
     */
    _warningOnly?: Element;
}
/**
 * A test in this script.
 */
export interface TestScriptTest {
    /**
     * Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
     */
    id?: string;
    /**
     * Contains extension information for property 'id'.
     */
    _id?: Element;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * The name of this test used for tracking/logging purposes by test engines.
     */
    name?: string;
    /**
     * Contains extension information for property 'name'.
     */
    _name?: Element;
    /**
     * A short description of the test used by test engines for tracking and reporting purposes.
     */
    description?: string;
    /**
     * Contains extension information for property 'description'.
     */
    _description?: Element;
    /**
     * Action would contain either an operation or an assertion.
     */
    action: TestScriptTestAction[];
}
/**
 * Action would contain either an operation or an assertion.
 */
export interface TestScriptTestAction {
    /**
     * Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
     */
    id?: string;
    /**
     * Contains extension information for property 'id'.
     */
    _id?: Element;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * An operation would involve a REST request to a server.
     */
    operation?: TestScriptSetupActionOperation;
    /**
     * Evaluates the results of previous operations to determine if the server under test behaves appropriately.
     */
    assert?: TestScriptSetupActionAssert;
}
/**
 * A series of operations required to clean up after all the tests are executed (successfully or otherwise).
 */
export interface TestScriptTeardown {
    /**
     * Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
     */
    id?: string;
    /**
     * Contains extension information for property 'id'.
     */
    _id?: Element;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * The teardown action will only contain an operation.
     */
    action: TestScriptTeardownAction[];
}
/**
 * The teardown action will only contain an operation.
 */
export interface TestScriptTeardownAction {
    /**
     * Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
     */
    id?: string;
    /**
     * Contains extension information for property 'id'.
     */
    _id?: Element;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * An operation would involve a REST request to a server.
     */
    operation: TestScriptSetupActionOperation;
}
/**
 * Specifies an event that may occur multiple times. Timing schedules are used to record when things are planned, expected or requested to occur. The most common usage is in dosage instructions for medications. They are also used when planning care of various kinds, and may be used for reporting the schedule to which past regular activities were carried out.
 */
export interface Timing {
    /**
     * Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
     */
    id?: string;
    /**
     * Contains extension information for property 'id'.
     */
    _id?: Element;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * Identifies specific times when the event occurs.
     */
    event?: dateTime[];
    /**
     * Contains extension information for property 'event'.
     */
    _event?: Element[];
    /**
     * A set of rules that describe when the event is scheduled.
     */
    repeat?: Element;
    /**
     * A code for the timing schedule (or just text in code.text). Some codes such as BID are ubiquitous, but many institutions define their own additional codes. If a code is provided, the code is understood to be a complete statement of whatever is specified in the structured timing data, and either the code or the data may be used to interpret the Timing, with the exception that .repeat.bounds still applies over the code (and is not contained in the code).
     */
    code?: CodeableConcept;
}
export interface TimingRepeat {
    /**
     * Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
     */
    id?: string;
    /**
     * Contains extension information for property 'id'.
     */
    _id?: Element;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * Either a duration for the length of the timing schedule, a range of possible length, or outer bounds for start and/or end limits of the timing schedule.
     */
    boundsDuration?: Duration;
    /**
     * Either a duration for the length of the timing schedule, a range of possible length, or outer bounds for start and/or end limits of the timing schedule.
     */
    boundsRange?: Range;
    /**
     * Either a duration for the length of the timing schedule, a range of possible length, or outer bounds for start and/or end limits of the timing schedule.
     */
    boundsPeriod?: Period;
    /**
     * A total count of the desired number of repetitions across the duration of the entire timing specification. If countMax is present, this element indicates the lower bound of the allowed range of count values.
     */
    count?: positiveInt;
    /**
     * Contains extension information for property 'count'.
     */
    _count?: Element;
    /**
     * If present, indicates that the count is a range - so to perform the action between [count] and [countMax] times.
     */
    countMax?: positiveInt;
    /**
     * Contains extension information for property 'countMax'.
     */
    _countMax?: Element;
    /**
     * How long this thing happens for when it happens. If durationMax is present, this element indicates the lower bound of the allowed range of the duration.
     */
    duration?: decimal;
    /**
     * Contains extension information for property 'duration'.
     */
    _duration?: Element;
    /**
     * If present, indicates that the duration is a range - so to perform the action between [duration] and [durationMax] time length.
     */
    durationMax?: decimal;
    /**
     * Contains extension information for property 'durationMax'.
     */
    _durationMax?: Element;
    /**
     * The units of time for the duration, in UCUM units.
     */
    durationUnit?: code;
    /**
     * Contains extension information for property 'durationUnit'.
     */
    _durationUnit?: Element;
    /**
     * The number of times to repeat the action within the specified period. If frequencyMax is present, this element indicates the lower bound of the allowed range of the frequency.
     */
    frequency?: positiveInt;
    /**
     * Contains extension information for property 'frequency'.
     */
    _frequency?: Element;
    /**
     * If present, indicates that the frequency is a range - so to repeat between [frequency] and [frequencyMax] times within the period or period range.
     */
    frequencyMax?: positiveInt;
    /**
     * Contains extension information for property 'frequencyMax'.
     */
    _frequencyMax?: Element;
    /**
     * Indicates the duration of time over which repetitions are to occur; e.g. to express "3 times per day", 3 would be the frequency and "1 day" would be the period. If periodMax is present, this element indicates the lower bound of the allowed range of the period length.
     */
    period?: decimal;
    /**
     * Contains extension information for property 'period'.
     */
    _period?: Element;
    /**
     * If present, indicates that the period is a range from [period] to [periodMax], allowing expressing concepts such as "do this once every 3-5 days.
     */
    periodMax?: decimal;
    /**
     * Contains extension information for property 'periodMax'.
     */
    _periodMax?: Element;
    /**
     * The units of time for the period in UCUM units.
     */
    periodUnit?: code;
    /**
     * Contains extension information for property 'periodUnit'.
     */
    _periodUnit?: Element;
    /**
     * If one or more days of week is provided, then the action happens only on the specified day(s).
     */
    dayOfWeek?: code[];
    /**
     * Contains extension information for property 'dayOfWeek'.
     */
    _dayOfWeek?: Element[];
    /**
     * Specified time of day for action to take place.
     */
    timeOfDay?: time[];
    /**
     * Contains extension information for property 'timeOfDay'.
     */
    _timeOfDay?: Element[];
    /**
     * An approximate time period during the day, potentially linked to an event of daily living that indicates when the action should occur.
     */
    when?: code[];
    /**
     * Contains extension information for property 'when'.
     */
    _when?: Element[];
    /**
     * The number of minutes from the event. If the event code does not indicate whether the minutes is before or after the event, then the offset is assumed to be after the event.
     */
    offset?: unsignedInt;
    /**
     * Contains extension information for property 'offset'.
     */
    _offset?: Element;
}
/**
 * A description of a triggering event. Triggering events can be named events, data events, or periodic, as determined by the type element.
 */
export interface TriggerDefinition {
    /**
     * Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
     */
    id?: string;
    /**
     * Contains extension information for property 'id'.
     */
    _id?: Element;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * The type of triggering event.
     */
    type: code;
    /**
     * Contains extension information for property 'type'.
     */
    _type?: Element;
    /**
     * A formal name for the event. This may be an absolute URI that identifies the event formally (e.g. from a trigger registry), or a simple relative URI that identifies the event in a local context.
     */
    name?: string;
    /**
     * Contains extension information for property 'name'.
     */
    _name?: Element;
    /**
     * The timing of the event (if this is a periodic trigger).
     */
    timingTiming?: Timing;
    /**
     * The timing of the event (if this is a periodic trigger).
     */
    timingReference?: Reference;
    /**
     * The timing of the event (if this is a periodic trigger).
     */
    timingDate?: date;
    /**
     * Contains extension information for property 'timingDate'.
     */
    _timingDate?: Element;
    /**
     * The timing of the event (if this is a periodic trigger).
     */
    timingDateTime?: dateTime;
    /**
     * Contains extension information for property 'timingDateTime'.
     */
    _timingDateTime?: Element;
    /**
     * The triggering data of the event (if this is a data trigger). If more than one data is requirement is specified, then all the data requirements must be true.
     */
    data?: DataRequirement[];
    /**
     * A boolean-valued expression that is evaluated in the context of the container of the trigger definition and returns whether or not the trigger fires.
     */
    condition?: Expression;
}
/**
 * Specifies clinical/business/etc. metadata that can be used to retrieve, index and/or categorize an artifact. This metadata can either be specific to the applicable population (e.g., age category, DRG) or the specific context of care (e.g., venue, care setting, provider of care).
 */
export interface UsageContext {
    /**
     * Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
     */
    id?: string;
    /**
     * Contains extension information for property 'id'.
     */
    _id?: Element;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * A code that identifies the type of context being specified by this usage context.
     */
    code: Coding;
    /**
     * A value that defines the context specified in this context of use. The interpretation of the value is defined by the code.
     */
    valueCodeableConcept: CodeableConcept;
    /**
     * A value that defines the context specified in this context of use. The interpretation of the value is defined by the code.
     */
    valueQuantity: Quantity;
    /**
     * A value that defines the context specified in this context of use. The interpretation of the value is defined by the code.
     */
    valueRange: Range;
    /**
     * A value that defines the context specified in this context of use. The interpretation of the value is defined by the code.
     */
    valueReference: Reference;
}
/**
 * A ValueSet resource instance specifies a set of codes drawn from one or more code systems, intended for use in a particular context. Value sets link between [CodeSystem](codesystem.html) definitions and their use in [coded elements](terminologies.html).
 */
export interface ValueSet {
    /**
     * The type of the resource.
     */
    resourceType: string;
    /**
     * The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes.
     */
    id?: id;
    /**
     * Contains extension information for property 'id'.
     */
    _id?: Element;
    /**
     * The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource.
     */
    meta?: Meta;
    /**
     * A reference to a set of rules that were followed when the resource was constructed, and which must be understood when processing the content. Often, this is a reference to an implementation guide that defines the special rules along with other profiles etc.
     */
    implicitRules?: uri;
    /**
     * Contains extension information for property 'implicitRules'.
     */
    _implicitRules?: Element;
    /**
     * The base language in which the resource is written.
     */
    language?: code;
    /**
     * Contains extension information for property 'language'.
     */
    _language?: Element;
    /**
     * A human-readable narrative that contains a summary of the resource and can be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it "clinically safe" for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety.
     */
    text?: Narrative;
    /**
     * These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, and nor can they have their own independent transaction scope.
     */
    contained?: Resource[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * An absolute URI that is used to identify this value set when it is referenced in a specification, model, design or an instance; also called its canonical identifier. This SHOULD be globally unique and SHOULD be a literal address at which at which an authoritative instance of this value set is (or will be) published. This URL can be the target of a canonical reference. It SHALL remain the same when the value set is stored on different servers.
     */
    url?: uri;
    /**
     * Contains extension information for property 'url'.
     */
    _url?: Element;
    /**
     * A formal identifier that is used to identify this value set when it is represented in other formats, or referenced in a specification, model, design or an instance.
     */
    identifier?: Identifier[];
    /**
     * The identifier that is used to identify this version of the value set when it is referenced in a specification, model, design or instance. This is an arbitrary value managed by the value set author and is not expected to be globally unique. For example, it might be a timestamp (e.g. yyyymmdd) if a managed version is not available. There is also no expectation that versions can be placed in a lexicographical sequence.
     */
    version?: string;
    /**
     * Contains extension information for property 'version'.
     */
    _version?: Element;
    /**
     * A natural language name identifying the value set. This name should be usable as an identifier for the module by machine processing applications such as code generation.
     */
    name?: string;
    /**
     * Contains extension information for property 'name'.
     */
    _name?: Element;
    /**
     * A short, descriptive, user-friendly title for the value set.
     */
    title?: string;
    /**
     * Contains extension information for property 'title'.
     */
    _title?: Element;
    /**
     * The status of this value set. Enables tracking the life-cycle of the content. The status of the value set applies to the value set definition (ValueSet.compose) and the associated ValueSet metadata. Expansions do not have a state.
     */
    status: code;
    /**
     * Contains extension information for property 'status'.
     */
    _status?: Element;
    /**
     * A Boolean value to indicate that this value set is authored for testing purposes (or education/evaluation/marketing) and is not intended to be used for genuine usage.
     */
    experimental?: boolean;
    /**
     * Contains extension information for property 'experimental'.
     */
    _experimental?: Element;
    /**
     * The date (and optionally time) when the value set was created or revised (e.g. the 'content logical definition').
     */
    date?: dateTime;
    /**
     * Contains extension information for property 'date'.
     */
    _date?: Element;
    /**
     * The name of the organization or individual that published the value set.
     */
    publisher?: string;
    /**
     * Contains extension information for property 'publisher'.
     */
    _publisher?: Element;
    /**
     * Contact details to assist a user in finding and communicating with the publisher.
     */
    contact?: ContactDetail[];
    /**
     * A free text natural language description of the value set from a consumer's perspective. The textual description specifies the span of meanings for concepts to be included within the Value Set Expansion, and also may specify the intended use and limitations of the Value Set.
     */
    description?: markdown;
    /**
     * Contains extension information for property 'description'.
     */
    _description?: Element;
    /**
     * The content was developed with a focus and intent of supporting the contexts that are listed. These contexts may be general categories (gender, age, ...) or may be references to specific programs (insurance plans, studies, ...) and may be used to assist with indexing and searching for appropriate value set instances.
     */
    useContext?: UsageContext[];
    /**
     * A legal or geographic region in which the value set is intended to be used.
     */
    jurisdiction?: CodeableConcept[];
    /**
     * If this is set to 'true', then no new versions of the content logical definition can be created.  Note: Other metadata might still change.
     */
    immutable?: boolean;
    /**
     * Contains extension information for property 'immutable'.
     */
    _immutable?: Element;
    /**
     * Explanation of why this value set is needed and why it has been designed as it has.
     */
    purpose?: markdown;
    /**
     * Contains extension information for property 'purpose'.
     */
    _purpose?: Element;
    /**
     * A copyright statement relating to the value set and/or its contents. Copyright statements are generally legal restrictions on the use and publishing of the value set.
     */
    copyright?: markdown;
    /**
     * Contains extension information for property 'copyright'.
     */
    _copyright?: Element;
    /**
     * A set of criteria that define the contents of the value set by including or excluding codes selected from the specified code system(s) that the value set draws from. This is also known as the Content Logical Definition (CLD).
     */
    compose?: ValueSetCompose;
    /**
     * A value set can also be "expanded", where the value set is turned into a simple collection of enumerated codes. This element holds the expansion, if it has been performed.
     */
    expansion?: ValueSetExpansion;
}
/**
 * A set of criteria that define the contents of the value set by including or excluding codes selected from the specified code system(s) that the value set draws from. This is also known as the Content Logical Definition (CLD).
 */
export interface ValueSetCompose {
    /**
     * Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
     */
    id?: string;
    /**
     * Contains extension information for property 'id'.
     */
    _id?: Element;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * The Locked Date is  the effective date that is used to determine the version of all referenced Code Systems and Value Set Definitions included in the compose that are not already tied to a specific version.
     */
    lockedDate?: date;
    /**
     * Contains extension information for property 'lockedDate'.
     */
    _lockedDate?: Element;
    /**
     * Whether inactive codes - codes that are not approved for current use - are in the value set. If inactive = true, inactive codes are to be included in the expansion, if inactive = false, the inactive codes will not be included in the expansion. If absent, the behavior is determined by the implementation, or by the applicable $expand parameters (but generally, inactive codes would be expected to be included).
     */
    inactive?: boolean;
    /**
     * Contains extension information for property 'inactive'.
     */
    _inactive?: Element;
    /**
     * Include one or more codes from a code system or other value set(s).
     */
    include: ValueSetComposeInclude[];
    /**
     * Exclude one or more codes from the value set based on code system filters and/or other value sets.
     */
    exclude?: ValueSetComposeInclude[];
}
/**
 * Include one or more codes from a code system or other value set(s).
 */
export interface ValueSetComposeInclude {
    /**
     * Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
     */
    id?: string;
    /**
     * Contains extension information for property 'id'.
     */
    _id?: Element;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * An absolute URI which is the code system from which the selected codes come from.
     */
    system?: uri;
    /**
     * Contains extension information for property 'system'.
     */
    _system?: Element;
    /**
     * The version of the code system that the codes are selected from, or the special version '*' for all versions.
     */
    version?: string;
    /**
     * Contains extension information for property 'version'.
     */
    _version?: Element;
    /**
     * Specifies a concept to be included or excluded.
     */
    concept?: ValueSetComposeIncludeConcept[];
    /**
     * Select concepts by specify a matching criterion based on the properties (including relationships) defined by the system, or on filters defined by the system. If multiple filters are specified, they SHALL all be true.
     */
    filter?: ValueSetComposeIncludeFilter[];
    /**
     * Selects the concepts found in this value set (based on its value set definition). This is an absolute URI that is a reference to ValueSet.url.  If multiple value sets are specified this includes the union of the contents of all of the referenced value sets.
     */
    valueSet?: canonical[];
}
/**
 * Specifies a concept to be included or excluded.
 */
export interface ValueSetComposeIncludeConcept {
    /**
     * Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
     */
    id?: string;
    /**
     * Contains extension information for property 'id'.
     */
    _id?: Element;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * Specifies a code for the concept to be included or excluded.
     */
    code: code;
    /**
     * Contains extension information for property 'code'.
     */
    _code?: Element;
    /**
     * The text to display to the user for this concept in the context of this valueset. If no display is provided, then applications using the value set use the display specified for the code by the system.
     */
    display?: string;
    /**
     * Contains extension information for property 'display'.
     */
    _display?: Element;
    /**
     * Additional representations for this concept when used in this value set - other languages, aliases, specialized purposes, used for particular purposes, etc.
     */
    designation?: ValueSetComposeIncludeConceptDesignation[];
}
/**
 * Additional representations for this concept when used in this value set - other languages, aliases, specialized purposes, used for particular purposes, etc.
 */
export interface ValueSetComposeIncludeConceptDesignation {
    /**
     * Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
     */
    id?: string;
    /**
     * Contains extension information for property 'id'.
     */
    _id?: Element;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * The language this designation is defined for.
     */
    language?: code;
    /**
     * Contains extension information for property 'language'.
     */
    _language?: Element;
    /**
     * A code that represents types of uses of designations.
     */
    use?: Coding;
    /**
     * The text value for this designation.
     */
    value: string;
    /**
     * Contains extension information for property 'value'.
     */
    _value?: Element;
}
/**
 * Select concepts by specify a matching criterion based on the properties (including relationships) defined by the system, or on filters defined by the system. If multiple filters are specified, they SHALL all be true.
 */
export interface ValueSetComposeIncludeFilter {
    /**
     * Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
     */
    id?: string;
    /**
     * Contains extension information for property 'id'.
     */
    _id?: Element;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * A code that identifies a property or a filter defined in the code system.
     */
    property: code;
    /**
     * Contains extension information for property 'property'.
     */
    _property?: Element;
    /**
     * The kind of operation to perform as a part of the filter criteria.
     */
    op: code;
    /**
     * Contains extension information for property 'op'.
     */
    _op?: Element;
    /**
     * The match value may be either a code defined by the system, or a string value, which is a regex match on the literal string of the property value  (if the filter represents a property defined in CodeSystem) or of the system filter value (if the filter represents a filter defined in CodeSystem) when the operation is 'regex', or one of the values (true and false), when the operation is 'exists'.
     */
    value: string;
    /**
     * Contains extension information for property 'value'.
     */
    _value?: Element;
}
/**
 * A value set can also be "expanded", where the value set is turned into a simple collection of enumerated codes. This element holds the expansion, if it has been performed.
 */
export interface ValueSetExpansion {
    /**
     * Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
     */
    id?: string;
    /**
     * Contains extension information for property 'id'.
     */
    _id?: Element;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * An identifier that uniquely identifies this expansion of the valueset, based on a unique combination of the provided parameters, the system default parameters, and the underlying system code system versions etc. Systems may re-use the same identifier as long as those factors remain the same, and the expansion is the same, but are not required to do so. This is a business identifier.
     */
    identifier?: uri;
    /**
     * Contains extension information for property 'identifier'.
     */
    _identifier?: Element;
    /**
     * The time at which the expansion was produced by the expanding system.
     */
    timestamp: dateTime;
    /**
     * Contains extension information for property 'timestamp'.
     */
    _timestamp?: Element;
    /**
     * The total number of concepts in the expansion. If the number of concept nodes in this resource is less than the stated number, then the server can return more using the offset parameter.
     */
    total?: integer;
    /**
     * Contains extension information for property 'total'.
     */
    _total?: Element;
    /**
     * If paging is being used, the offset at which this resource starts.  I.e. this resource is a partial view into the expansion. If paging is not being used, this element SHALL NOT be present.
     */
    offset?: integer;
    /**
     * Contains extension information for property 'offset'.
     */
    _offset?: Element;
    /**
     * A parameter that controlled the expansion process. These parameters may be used by users of expanded value sets to check whether the expansion is suitable for a particular purpose, or to pick the correct expansion.
     */
    parameter?: ValueSetExpansionParameter[];
    /**
     * The codes that are contained in the value set expansion.
     */
    contains?: ValueSetExpansionContains[];
}
/**
 * A parameter that controlled the expansion process. These parameters may be used by users of expanded value sets to check whether the expansion is suitable for a particular purpose, or to pick the correct expansion.
 */
export interface ValueSetExpansionParameter {
    /**
     * Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
     */
    id?: string;
    /**
     * Contains extension information for property 'id'.
     */
    _id?: Element;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * Name of the input parameter to the $expand operation; may be a server-assigned name for additional default or other server-supplied parameters used to control the expansion process.
     */
    name: string;
    /**
     * Contains extension information for property 'name'.
     */
    _name?: Element;
    /**
     * The value of the parameter.
     */
    valueString?: string;
    /**
     * Contains extension information for property 'valueString'.
     */
    _valueString?: Element;
    /**
     * The value of the parameter.
     */
    valueBoolean?: boolean;
    /**
     * Contains extension information for property 'valueBoolean'.
     */
    _valueBoolean?: Element;
    /**
     * The value of the parameter.
     */
    valueInteger?: integer;
    /**
     * Contains extension information for property 'valueInteger'.
     */
    _valueInteger?: Element;
    /**
     * The value of the parameter.
     */
    valueDecimal?: decimal;
    /**
     * Contains extension information for property 'valueDecimal'.
     */
    _valueDecimal?: Element;
    /**
     * The value of the parameter.
     */
    valueUri?: uri;
    /**
     * Contains extension information for property 'valueUri'.
     */
    _valueUri?: Element;
    /**
     * The value of the parameter.
     */
    valueCode?: code;
    /**
     * Contains extension information for property 'valueCode'.
     */
    _valueCode?: Element;
    /**
     * The value of the parameter.
     */
    valueDateTime?: dateTime;
    /**
     * Contains extension information for property 'valueDateTime'.
     */
    _valueDateTime?: Element;
}
/**
 * The codes that are contained in the value set expansion.
 */
export interface ValueSetExpansionContains {
    /**
     * Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
     */
    id?: string;
    /**
     * Contains extension information for property 'id'.
     */
    _id?: Element;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * An absolute URI which is the code system in which the code for this item in the expansion is defined.
     */
    system?: uri;
    /**
     * Contains extension information for property 'system'.
     */
    _system?: Element;
    /**
     * If true, this entry is included in the expansion for navigational purposes, and the user cannot select the code directly as a proper value.
     */
    abstract?: boolean;
    /**
     * Contains extension information for property 'abstract'.
     */
    _abstract?: Element;
    /**
     * If the concept is inactive in the code system that defines it. Inactive codes are those that are no longer to be used, but are maintained by the code system for understanding legacy data. It might not be known or specified whether an concept is inactive (and it may depend on the context of use).
     */
    inactive?: boolean;
    /**
     * Contains extension information for property 'inactive'.
     */
    _inactive?: Element;
    /**
     * The version of the code system from this code was taken. Note that a well-maintained code system does not need the version reported, because the meaning of codes is consistent across versions. However this cannot consistently be assured, and when the meaning is not guaranteed to be consistent, the version SHOULD be exchanged.
     */
    version?: string;
    /**
     * Contains extension information for property 'version'.
     */
    _version?: Element;
    /**
     * The code for this item in the expansion hierarchy. If this code is missing the entry in the hierarchy is a place holder (abstract) and does not represent a valid code in the value set.
     */
    code?: code;
    /**
     * Contains extension information for property 'code'.
     */
    _code?: Element;
    /**
     * The recommended display for this item in the expansion.
     */
    display?: string;
    /**
     * Contains extension information for property 'display'.
     */
    _display?: Element;
    /**
     * Additional representations for this item - other languages, aliases, specialized purposes, used for particular purposes, etc. These are relevant when the conditions of the expansion do not fix to a single correct representation.
     */
    designation?: ValueSetComposeIncludeConceptDesignation[];
    /**
     * Other codes and entries contained under this entry in the hierarchy.
     */
    contains?: ValueSetExpansionContains[];
}
/**
 * Describes validation requirements, source(s), status and dates for one or more elements.
 */
export interface VerificationResult {
    /**
     * The type of the resource.
     */
    resourceType: string;
    /**
     * The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes.
     */
    id?: id;
    /**
     * Contains extension information for property 'id'.
     */
    _id?: Element;
    /**
     * The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource.
     */
    meta?: Meta;
    /**
     * A reference to a set of rules that were followed when the resource was constructed, and which must be understood when processing the content. Often, this is a reference to an implementation guide that defines the special rules along with other profiles etc.
     */
    implicitRules?: uri;
    /**
     * Contains extension information for property 'implicitRules'.
     */
    _implicitRules?: Element;
    /**
     * The base language in which the resource is written.
     */
    language?: code;
    /**
     * Contains extension information for property 'language'.
     */
    _language?: Element;
    /**
     * A human-readable narrative that contains a summary of the resource and can be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it "clinically safe" for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety.
     */
    text?: Narrative;
    /**
     * These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, and nor can they have their own independent transaction scope.
     */
    contained?: Resource[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * A resource that was validated.
     */
    target?: Reference[];
    /**
     * The fhirpath location(s) within the resource that was validated.
     */
    targetLocation?: string[];
    /**
     * Contains extension information for property 'targetLocation'.
     */
    _targetLocation?: Element[];
    /**
     * The frequency with which the target must be validated (none; initial; periodic).
     */
    need?: CodeableConcept;
    /**
     * The validation status of the target (attested; validated; in process; requires revalidation; validation failed; revalidation failed).
     */
    status: code;
    /**
     * Contains extension information for property 'status'.
     */
    _status?: Element;
    /**
     * When the validation status was updated.
     */
    statusDate?: dateTime;
    /**
     * Contains extension information for property 'statusDate'.
     */
    _statusDate?: Element;
    /**
     * What the target is validated against (nothing; primary source; multiple sources).
     */
    validationType?: CodeableConcept;
    /**
     * The primary process by which the target is validated (edit check; value set; primary source; multiple sources; standalone; in context).
     */
    validationProcess?: CodeableConcept[];
    /**
     * Frequency of revalidation.
     */
    frequency?: Timing;
    /**
     * The date/time validation was last completed (including failed validations).
     */
    lastPerformed?: dateTime;
    /**
     * Contains extension information for property 'lastPerformed'.
     */
    _lastPerformed?: Element;
    /**
     * The date when target is next validated, if appropriate.
     */
    nextScheduled?: date;
    /**
     * Contains extension information for property 'nextScheduled'.
     */
    _nextScheduled?: Element;
    /**
     * The result if validation fails (fatal; warning; record only; none).
     */
    failureAction?: CodeableConcept;
    /**
     * Information about the primary source(s) involved in validation.
     */
    primarySource?: VerificationResultPrimarySource[];
    /**
     * Information about the entity attesting to information.
     */
    attestation?: VerificationResultAttestation;
    /**
     * Information about the entity validating information.
     */
    validator?: VerificationResultValidator[];
}
/**
 * Information about the primary source(s) involved in validation.
 */
export interface VerificationResultPrimarySource {
    /**
     * Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
     */
    id?: string;
    /**
     * Contains extension information for property 'id'.
     */
    _id?: Element;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * Reference to the primary source.
     */
    who?: Reference;
    /**
     * Type of primary source (License Board; Primary Education; Continuing Education; Postal Service; Relationship owner; Registration Authority; legal source; issuing source; authoritative source).
     */
    type?: CodeableConcept[];
    /**
     * Method for communicating with the primary source (manual; API; Push).
     */
    communicationMethod?: CodeableConcept[];
    /**
     * Status of the validation of the target against the primary source (successful; failed; unknown).
     */
    validationStatus?: CodeableConcept;
    /**
     * When the target was validated against the primary source.
     */
    validationDate?: dateTime;
    /**
     * Contains extension information for property 'validationDate'.
     */
    _validationDate?: Element;
    /**
     * Ability of the primary source to push updates/alerts (yes; no; undetermined).
     */
    canPushUpdates?: CodeableConcept;
    /**
     * Type of alerts/updates the primary source can send (specific requested changes; any changes; as defined by source).
     */
    pushTypeAvailable?: CodeableConcept[];
}
/**
 * Information about the entity attesting to information.
 */
export interface VerificationResultAttestation {
    /**
     * Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
     */
    id?: string;
    /**
     * Contains extension information for property 'id'.
     */
    _id?: Element;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * The individual or organization attesting to information.
     */
    who?: Reference;
    /**
     * When the who is asserting on behalf of another (organization or individual).
     */
    onBehalfOf?: Reference;
    /**
     * The method by which attested information was submitted/retrieved (manual; API; Push).
     */
    communicationMethod?: CodeableConcept;
    /**
     * The date the information was attested to.
     */
    date?: date;
    /**
     * Contains extension information for property 'date'.
     */
    _date?: Element;
    /**
     * A digital identity certificate associated with the attestation source.
     */
    sourceIdentityCertificate?: string;
    /**
     * Contains extension information for property 'sourceIdentityCertificate'.
     */
    _sourceIdentityCertificate?: Element;
    /**
     * A digital identity certificate associated with the proxy entity submitting attested information on behalf of the attestation source.
     */
    proxyIdentityCertificate?: string;
    /**
     * Contains extension information for property 'proxyIdentityCertificate'.
     */
    _proxyIdentityCertificate?: Element;
    /**
     * Signed assertion by the proxy entity indicating that they have the right to submit attested information on behalf of the attestation source.
     */
    proxySignature?: Signature;
    /**
     * Signed assertion by the attestation source that they have attested to the information.
     */
    sourceSignature?: Signature;
}
/**
 * Information about the entity validating information.
 */
export interface VerificationResultValidator {
    /**
     * Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
     */
    id?: string;
    /**
     * Contains extension information for property 'id'.
     */
    _id?: Element;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * Reference to the organization validating information.
     */
    organization: Reference;
    /**
     * A digital identity certificate associated with the validator.
     */
    identityCertificate?: string;
    /**
     * Contains extension information for property 'identityCertificate'.
     */
    _identityCertificate?: Element;
    /**
     * Signed assertion by the validator that they have validated the information.
     */
    attestationSignature?: Signature;
}
/**
 * An authorization for the provision of glasses and/or contact lenses to a patient.
 */
export interface VisionPrescription {
    /**
     * The type of the resource.
     */
    resourceType: string;
    /**
     * The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes.
     */
    id?: id;
    /**
     * Contains extension information for property 'id'.
     */
    _id?: Element;
    /**
     * The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource.
     */
    meta?: Meta;
    /**
     * A reference to a set of rules that were followed when the resource was constructed, and which must be understood when processing the content. Often, this is a reference to an implementation guide that defines the special rules along with other profiles etc.
     */
    implicitRules?: uri;
    /**
     * Contains extension information for property 'implicitRules'.
     */
    _implicitRules?: Element;
    /**
     * The base language in which the resource is written.
     */
    language?: code;
    /**
     * Contains extension information for property 'language'.
     */
    _language?: Element;
    /**
     * A human-readable narrative that contains a summary of the resource and can be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it "clinically safe" for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety.
     */
    text?: Narrative;
    /**
     * These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, and nor can they have their own independent transaction scope.
     */
    contained?: Resource[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * A unique identifier assigned to this vision prescription.
     */
    identifier?: Identifier[];
    /**
     * The status of the resource instance.
     */
    status: code;
    /**
     * Contains extension information for property 'status'.
     */
    _status?: Element;
    /**
     * The date this resource was created.
     */
    created: dateTime;
    /**
     * Contains extension information for property 'created'.
     */
    _created?: Element;
    /**
     * A resource reference to the person to whom the vision prescription applies.
     */
    patient: Reference;
    /**
     * A reference to a resource that identifies the particular occurrence of contact between patient and health care provider during which the prescription was issued.
     */
    encounter?: Reference;
    /**
     * The date (and perhaps time) when the prescription was written.
     */
    dateWritten: dateTime;
    /**
     * Contains extension information for property 'dateWritten'.
     */
    _dateWritten?: Element;
    /**
     * The healthcare professional responsible for authorizing the prescription.
     */
    prescriber: Reference;
    /**
     * Contain the details of  the individual lens specifications and serves as the authorization for the fullfillment by certified professionals.
     */
    lensSpecification: VisionPrescriptionLensSpecification[];
}
/**
 * Contain the details of  the individual lens specifications and serves as the authorization for the fullfillment by certified professionals.
 */
export interface VisionPrescriptionLensSpecification {
    /**
     * Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
     */
    id?: string;
    /**
     * Contains extension information for property 'id'.
     */
    _id?: Element;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * Identifies the type of vision correction product which is required for the patient.
     */
    product: CodeableConcept;
    /**
     * The eye for which the lens specification applies.
     */
    eye: code;
    /**
     * Contains extension information for property 'eye'.
     */
    _eye?: Element;
    /**
     * Lens power measured in dioptres (0.25 units).
     */
    sphere?: decimal;
    /**
     * Contains extension information for property 'sphere'.
     */
    _sphere?: Element;
    /**
     * Power adjustment for astigmatism measured in dioptres (0.25 units).
     */
    cylinder?: decimal;
    /**
     * Contains extension information for property 'cylinder'.
     */
    _cylinder?: Element;
    /**
     * Adjustment for astigmatism measured in integer degrees.
     */
    axis?: integer;
    /**
     * Contains extension information for property 'axis'.
     */
    _axis?: Element;
    /**
     * Allows for adjustment on two axis.
     */
    prism?: VisionPrescriptionLensSpecificationPrism[];
    /**
     * Power adjustment for multifocal lenses measured in dioptres (0.25 units).
     */
    add?: decimal;
    /**
     * Contains extension information for property 'add'.
     */
    _add?: Element;
    /**
     * Contact lens power measured in dioptres (0.25 units).
     */
    power?: decimal;
    /**
     * Contains extension information for property 'power'.
     */
    _power?: Element;
    /**
     * Back curvature measured in millimetres.
     */
    backCurve?: decimal;
    /**
     * Contains extension information for property 'backCurve'.
     */
    _backCurve?: Element;
    /**
     * Contact lens diameter measured in millimetres.
     */
    diameter?: decimal;
    /**
     * Contains extension information for property 'diameter'.
     */
    _diameter?: Element;
    /**
     * The recommended maximum wear period for the lens.
     */
    duration?: Quantity;
    /**
     * Special color or pattern.
     */
    color?: string;
    /**
     * Contains extension information for property 'color'.
     */
    _color?: Element;
    /**
     * Brand recommendations or restrictions.
     */
    brand?: string;
    /**
     * Contains extension information for property 'brand'.
     */
    _brand?: Element;
    /**
     * Notes for special requirements such as coatings and lens materials.
     */
    note?: Annotation[];
}
/**
 * Allows for adjustment on two axis.
 */
export interface VisionPrescriptionLensSpecificationPrism {
    /**
     * Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
     */
    id?: string;
    /**
     * Contains extension information for property 'id'.
     */
    _id?: Element;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Extension[];
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Extension[];
    /**
     * Amount of prism to compensate for eye alignment in fractional units.
     */
    amount: decimal;
    /**
     * Contains extension information for property 'amount'.
     */
    _amount?: Element;
    /**
     * The relative base, or reference lens edge, for the prism.
     */
    base: code;
    /**
     * Contains extension information for property 'base'.
     */
    _base?: Element;
}
